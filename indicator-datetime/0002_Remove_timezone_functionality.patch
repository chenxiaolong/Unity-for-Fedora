--- a/configure.ac
+++ b/configure.ac
@@ -52,7 +52,6 @@
 DBUSMENUGTK_REQUIRED_VERSION=0.5.90
 GIO_REQUIRED_VERSION=2.25.11
 INDICATOR_DISPLAY_OBJECTS=0.2.2
-GEOCLUE_REQUIRED_VERSION=0.12.0
 ECAL_REQUIRED_VERSION=3.5
 EDS_REQUIRED_VERSION=3.5
 ICAL_REQUIRED_VERSION=0.48
@@ -73,7 +72,6 @@
                            dbusmenu-gtk3-0.4 >= $DBUSMENUGTK_REQUIRED_VERSION
                            libido3-0.1 >= $INDICATOR_DISPLAY_OBJECTS
                            gio-2.0 >= $GIO_REQUIRED_VERSION
-                           geoclue >= $GEOCLUE_REQUIRED_VERSION
                            libecal-1.2 >= $ECAL_REQUIRED_VERSION
                            libical >= $ICAL_REQUIRED_VERSION
                            libedataserver-1.2 >= EDS_REQUIRED_VERSION
@@ -93,15 +91,11 @@
    PKG_CHECK_MODULES([PREF],
                      [gio-2.0 >= $GIO_REQUIRED_VERSION
                       gtk+-3.0 >= $GTK3_REQUIRED_VERSION
-                      timezonemap
-                      libgnome-control-center
-                      polkit-gobject-1],
+                      libgnome-control-center],
                      [have_ccpanel=yes],
                      [have_ccpanel=no])
    if test x${have_ccpanel} = xyes; then
       AC_DEFINE(HAVE_CCPANEL, 1, [Define to 1 to enable Control Center panel])
-      PKG_CHECK_MODULES(LIBMAP, gio-2.0 >= $GIO_REQUIRED_VERSION
-                                gtk+-3.0 >= $GTK3_REQUIRED_VERSION)
    fi
    if test x${with_ccpanel} = xyes && test x${have_ccpanel} = xno; then
      AC_MSG_ERROR([Control Center panel configured but not found])
--- a/data/com.canonical.indicator.datetime.gschema.xml
+++ b/data/com.canonical.indicator.datetime.gschema.xml
@@ -85,34 +85,5 @@
 			  Shows events from Evolution in indicator-datetime's menu.
 			</description>
 		</key>
-		<key name="show-auto-detected-location" type="b">
-			<default>false</default>
-			<summary>Show the auto-detected location in the indicator</summary>
-			<description>
-			  Shows your current location (determined from geoclue and systemd's timedated) in indicator-datetime's menu.
-			</description>
-		</key>
-		<key name="show-locations" type="b">
-			<default>false</default>
-			<summary>Show locations in the indicator</summary>
-			<description>
-			  Shows custom defined locations in indicator-datetime's menu.
-			</description>
-		</key>
-		<key name="locations" type="as">
-			<default>['UTC']</default>
-			<summary>A List of locations</summary>
-			<description>
-			  Adds the list of locations the user has configured to display in the 
-			  indicator-datetime menu.
-			</description>
-		</key>
-		<key name="timezone-name" type="s">
-			<default>''</default>
-			<summary>The name of the current timezone</summary>
-			<description>
-			  Some timezones can be known by many different cities or names.  This setting describes how the current zone prefers to be named.  Format is "TIMEZONE NAME" (e.g. "America/New_York Boston" to name the New_York zone Boston).
-			</description>
-		</key>
 	</schema>
 </schemalist>
--- a/data/datetime-dialog.ui
+++ b/data/datetime-dialog.ui
@@ -7,152 +7,6 @@
     <property name="step_increment">86400</property>
     <property name="page_increment">864000</property>
   </object>
-  <object class="GtkWindow" id="locationsDialog">
-    <property name="can_focus">False</property>
-    <property name="title" translatable="yes">Locations</property>
-    <property name="default_width">300</property>
-    <property name="default_height">200</property>
-    <property name="destroy_with_parent">True</property>
-    <child>
-      <object class="GtkVBox" id="vbox1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <child>
-          <object class="GtkScrolledWindow" id="scrolledwindow1">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="hscrollbar_policy">automatic</property>
-            <property name="vscrollbar_policy">automatic</property>
-            <child>
-              <object class="GtkTreeView" id="locationsView">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="model">locationsStore</property>
-                <property name="headers_visible">False</property>
-                <property name="headers_clickable">False</property>
-                <property name="reorderable">True</property>
-                <property name="search_column">0</property>
-              </object>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkHSeparator" id="hseparator1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkHBox" id="hbox10">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="spacing">4</property>
-            <child>
-              <object class="GtkButton" id="addButton">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <child internal-child="accessible">
-                  <object class="AtkObject" id="addButton-atkobject">
-                    <property name="AtkObject::accessible-description" translatable="yes">Add a Locationâ€¦</property>
-                  </object>
-                </child>
-                <child>
-                  <object class="GtkImage" id="addImage">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="stock">gtk-add</property>
-                  </object>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="removeButton">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <child internal-child="accessible">
-                  <object class="AtkObject" id="removeButton-atkobject">
-                    <property name="AtkObject::accessible-description" translatable="yes">Remove This Location</property>
-                  </object>
-                </child>
-                <child>
-                  <object class="GtkImage" id="removeImage">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="stock">gtk-remove</property>
-                  </object>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="sortByNameButton">
-                <property name="label" translatable="yes">Sort by _Name</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_underline">True</property>
-                <accelerator key="n" signal="clicked" modifiers="GDK_MOD1_MASK"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="padding">6</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="sortByTimeButton">
-                <property name="label" translatable="yes">Sort by _Time</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_underline">True</property>
-                <accelerator key="t" signal="clicked" modifiers="GDK_MOD1_MASK"/>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">3</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="padding">4</property>
-            <property name="position">2</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
   <object class="GtkListStore" id="locationsStore">
     <columns>
       <!-- column-name Location -->
@@ -180,286 +34,6 @@
         <property name="visible">True</property>
         <property name="can_focus">True</property>
         <child>
-          <object class="GtkVBox" id="timeDateBox">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="border_width">12</property>
-            <property name="spacing">6</property>
-            <child>
-              <object class="GtkVBox" id="timeDateOptions">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="spacing">12</property>
-                <child>
-                  <object class="GtkVBox" id="vbox6">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="spacing">6</property>
-                    <child>
-                      <object class="GtkAspectFrame" id="mapBox">
-                        <property name="height_request">265</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label_xalign">0</property>
-                        <property name="shadow_type">none</property>
-                        <child>
-                          <placeholder/>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkHBox" id="hbox1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="spacing">6</property>
-                        <child>
-                          <object class="GtkLabel" id="label5">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="xalign">1</property>
-                            <property name="label" translatable="yes">_Location:</property>
-                            <property name="use_underline">True</property>
-                            <property name="mnemonic_widget">timezoneEntry</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkEntry" id="timezoneEntry">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="invisible_char">â€¢</property>
-                            <property name="invisible_char_set">True</property>
-                          </object>
-                          <packing>
-                            <property name="expand">True</property>
-                            <property name="fill">True</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkTable" id="table1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="n_rows">2</property>
-                    <property name="n_columns">2</property>
-                    <property name="column_spacing">6</property>
-                    <property name="row_spacing">6</property>
-                    <child>
-                      <object class="GtkHBox" id="hbox2">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="spacing">6</property>
-                        <child>
-                          <object class="GtkRadioButton" id="manualTimeRadio">
-                            <property name="label" translatable="yes">_Manually</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="use_underline">True</property>
-                            <property name="xalign">0</property>
-                            <property name="active">True</property>
-                            <property name="draw_indicator">True</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkRadioButton" id="automaticTimeRadio">
-                            <property name="label" translatable="yes">_Automatically from the Internet</property>
-                            <property name="visible">True</property>
-                            <property name="sensitive">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="use_underline">True</property>
-                            <property name="xalign">0</property>
-                            <property name="draw_indicator">True</property>
-                            <property name="group">manualTimeRadio</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label9">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">1</property>
-                        <property name="label" translatable="yes">Set the time:</property>
-                      </object>
-                      <packing>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkHBox" id="manualOptions">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="spacing">12</property>
-                        <child>
-                          <object class="GtkHBox" id="hbox8">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="spacing">6</property>
-                            <child>
-                              <object class="GtkSpinButton" id="timeSpinner">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="invisible_char">â€¢</property>
-                                <property name="width_chars">11</property>
-                                <property name="xalign">1</property>
-                                <property name="invisible_char_set">True</property>
-                                <property name="adjustment">timeAdjustment</property>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">0</property>
-                              </packing>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkHBox" id="hbox9">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="spacing">6</property>
-                            <child>
-                              <object class="GtkLabel" id="label10">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="label" translatable="yes">_Date:</property>
-                                <property name="use_underline">True</property>
-                                <property name="mnemonic_widget">dateSpinner</property>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">0</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkSpinButton" id="dateSpinner">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="invisible_char">â€¢</property>
-                                <property name="width_chars">11</property>
-                                <property name="xalign">1</property>
-                                <property name="invisible_char_set">True</property>
-                                <property name="adjustment">dateAdjustment</property>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
-                        <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label11">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">1</property>
-                        <property name="label" translatable="yes">Tim_e:</property>
-                        <property name="use_underline">True</property>
-                        <property name="mnemonic_widget">timeSpinner</property>
-                      </object>
-                      <packing>
-                        <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="pack_type">end</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <placeholder/>
-            </child>
-          </object>
-        </child>
-        <child type="tab">
-          <object class="GtkLabel" id="label1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="xpad">1</property>
-            <property name="label" translatable="yes">_Time &amp; Date</property>
-            <property name="use_underline">True</property>
-          </object>
-          <packing>
-            <property name="tab_fill">False</property>
-          </packing>
-        </child>
-        <child>
           <object class="GtkAlignment" id="alignment1">
             <property name="visible">True</property>
             <property name="can_focus">False</property>
@@ -717,67 +291,6 @@
                             <property name="position">3</property>
                           </packing>
                         </child>
-                        <child>
-                          <object class="GtkCheckButton" id="showDetectedCheck">
-                            <property name="label" translatable="yes">Time in _auto-detected location</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="use_underline">True</property>
-                            <property name="xalign">0</property>
-                            <property name="draw_indicator">True</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">4</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkCheckButton" id="showLocationsCheck">
-                            <property name="label" translatable="yes">Time in _other locations</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="use_underline">True</property>
-                            <property name="xalign">0</property>
-                            <property name="draw_indicator">True</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">5</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkAlignment" id="alignment2">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="xalign">0</property>
-                            <property name="yalign">0</property>
-                            <property name="xscale">0</property>
-                            <property name="yscale">0</property>
-                            <property name="left_padding">24</property>
-                            <child>
-                              <object class="GtkButton" id="locationsButton">
-                                <property name="label" translatable="yes">Choose _Locationsâ€¦</property>
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="receives_default">True</property>
-                                <property name="use_action_appearance">False</property>
-                                <property name="use_underline">True</property>
-                                <property name="xalign">0</property>
-                              </object>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">True</property>
-                            <property name="fill">True</property>
-                            <property name="position">6</property>
-                          </packing>
-                        </child>
                       </object>
                       <packing>
                         <property name="expand">True</property>
@@ -815,11 +328,4 @@
       </object>
     </child>
   </object>
-  <object class="GtkSizeGroup" id="timeSizeGroup">
-    <widgets>
-      <widget name="label5"/>
-      <widget name="label9"/>
-      <widget name="label11"/>
-    </widgets>
-  </object>
 </interface>
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -1,7 +1,6 @@
 src/indicator-datetime.c
 src/datetime-service.c
 src/datetime-prefs.c
-src/datetime-prefs-locations.c
 src/utils.c
 src/settings-shared.h
 [type: gettext/glade]data/datetime-dialog.ui
--- a/src/datetime-prefs.c
+++ b/src/datetime-prefs.c
@@ -7,6 +7,7 @@
 Authors:
     Ted Gould <ted@canonical.com>
     Michael Terry <michael.terry@canonical.com>
+    Xiao-Long Chen <chenxiaolong@cxl.epac.to>
 
 This program is free software: you can redistribute it and/or modify it 
 under the terms of the GNU General Public License version 3, as published 
@@ -32,15 +33,10 @@
 #include <glib/gi18n-lib.h>
 #include <gdk/gdkkeysyms.h>
 #include <gtk/gtk.h>
-#include <polkit/polkit.h>
 #include <libgnome-control-center/cc-panel.h>
-#include <timezonemap/cc-timezone-map.h>
-#include <timezonemap/timezone-completion.h>
 
-#include "dbus-shared.h"
 #include "settings-shared.h"
 #include "utils.h"
-#include "datetime-prefs-locations.h"
 
 #define DATETIME_DIALOG_UI_FILE PKGDATADIR "/datetime-dialog.ui"
 
@@ -59,17 +55,6 @@
 struct _IndicatorDatetimePanelPrivate
 {
   GtkBuilder *         builder;
-  GDBusProxy *         proxy;
-  GtkWidget *          auto_radio;
-  GtkWidget *          tz_entry;
-  CcTimezoneMap *      tzmap;
-  GtkWidget *          time_spin;
-  GtkWidget *          date_spin;
-  guint                save_time_id;
-  gboolean             user_edited_time;
-  gboolean             changing_time;
-  GtkWidget *          loc_dlg;
-  CcTimezoneCompletion * completion;
 };
 
 struct _IndicatorDatetimePanelClass
@@ -139,503 +124,6 @@
 }
 
 static void
-polkit_dependency_cb (GPermission * permission, GParamSpec *pspec, GtkWidget * dependent)
-{
-  gboolean allowed = FALSE;
-
-  g_object_get (G_OBJECT (permission),
-                "allowed", &allowed, NULL);
-
-  gtk_widget_set_sensitive (dependent, allowed);
-}
-
-static void
-add_polkit_dependency_helper (GtkWidget * parent, GParamSpec *pspec, GtkWidget * dependent)
-{
-  GtkLockButton * button = GTK_LOCK_BUTTON (parent);
-  GPermission * permission = gtk_lock_button_get_permission (button);
-  g_signal_connect (permission, "notify::allowed",
-                    G_CALLBACK(polkit_dependency_cb), dependent);
-  polkit_dependency_cb (permission, NULL, dependent);
-}
-
-static void
-add_polkit_dependency (GtkWidget * parent, GtkWidget * dependent)
-{
-  /* polkit async hasn't finished at this point, so wait for permission to come in */
-  g_signal_connect (parent, "notify::permission", G_CALLBACK(add_polkit_dependency_helper),
-                    dependent);
-  gtk_widget_set_sensitive (dependent, FALSE);
-}
-
-static void
-polkit_perm_ready (GObject *source_object, GAsyncResult *res, gpointer user_data)
-{
-  GError * error = NULL;
-  GPermission * permission = polkit_permission_new_finish (res, &error);
-
-  if (error != NULL) {
-    g_warning ("Could not get permission object: %s", error->message);
-    g_error_free (error);
-    return;
-  }
-
-  GtkLockButton * button = GTK_LOCK_BUTTON (user_data);
-  gtk_lock_button_set_permission (button, permission);
-}
-
-static void
-dbus_set_answered (GObject *object, GAsyncResult *res, gpointer command)
-{
-  GError * error = NULL;
-  GVariant * answers = g_dbus_proxy_call_finish (G_DBUS_PROXY (object), res, &error);
-
-  if (error != NULL) {
-    g_warning("Could not set '%s' using timedated: %s", (gchar *)command, error->message);
-    g_error_free(error);
-    return;
-  }
-
-  g_variant_unref (answers);
-}
-
-static void
-toggle_ntp (GtkWidget * radio, GParamSpec * pspec, IndicatorDatetimePanel * self)
-{
-  gboolean active = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (radio));
-
-  g_dbus_proxy_call (self->priv->proxy, "SetNTP", g_variant_new ("(bb)", active, TRUE),
-                     G_DBUS_CALL_FLAGS_NONE, -1, NULL, dbus_set_answered, "NTP");
-}
-
-static void
-sync_entry (IndicatorDatetimePanel * self, const gchar * location)
-{
-  gchar * name = get_current_zone_name (location);
-  gtk_entry_set_text (GTK_ENTRY (self->priv->tz_entry), name);
-  g_free (name);
-
-  gtk_entry_set_icon_from_stock (GTK_ENTRY (self->priv->tz_entry),
-                                 GTK_ENTRY_ICON_SECONDARY, NULL);
-}
-
-static void
-tz_changed (CcTimezoneMap * map, CcTimezoneLocation * location, IndicatorDatetimePanel * self)
-{
-  if (location == NULL)
-    return;
-
-  gchar * zone;
-  g_object_get (location, "zone", &zone, NULL);
-
-  g_dbus_proxy_call (self->priv->proxy, "SetTimezone", g_variant_new ("(sb)", zone, TRUE),
-                     G_DBUS_CALL_FLAGS_NONE, -1, NULL, dbus_set_answered, "timezone");
-
-  sync_entry (self, zone);
-
-  g_free (zone);
-}
-
-static void
-proxy_ready (GObject *object, GAsyncResult *res, IndicatorDatetimePanel * self)
-{
-  GError * error = NULL;
-  IndicatorDatetimePanelPrivate * priv = self->priv;
-  GVariant *value;
-
-  self->priv->proxy = g_dbus_proxy_new_for_bus_finish (res, &error);
-
-  if (error != NULL) {
-    g_critical("Could not grab DBus proxy for timedated: %s", error->message);
-    g_error_free(error);
-    return;
-  }
-
-  /* And now, do initial proxy configuration */
-  value = g_dbus_proxy_get_cached_property (priv->proxy, "CanNTP");
-  if (value != NULL)
-    {
-      if (g_variant_is_of_type (value, G_VARIANT_TYPE_BOOLEAN))
-        gtk_widget_set_sensitive (priv->auto_radio, g_variant_get_boolean (value));
-      g_variant_unref (value);
-    }
-
-  value = g_dbus_proxy_get_cached_property (priv->proxy, "NTP");
-  if (value != NULL)
-    {
-      if (g_variant_is_of_type (value, G_VARIANT_TYPE_BOOLEAN))
-        {
-          gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (priv->auto_radio), g_variant_get_boolean (value));
-          g_signal_connect (priv->auto_radio, "notify::active", G_CALLBACK (toggle_ntp), self);
-        }
-      g_variant_unref (value);
-    }
-
-  value = g_dbus_proxy_get_cached_property (priv->proxy, "Timezone");
-  if (value != NULL)
-    {
-      if (g_variant_is_of_type (value, G_VARIANT_TYPE_STRING))
-        {
-          const gchar *timezone = g_variant_get_string (value, NULL);
-
-          cc_timezone_map_set_timezone (priv->tzmap, timezone);
-          sync_entry (self, timezone);
-          g_signal_connect (priv->tzmap, "location-changed", G_CALLBACK (tz_changed), self);
-        }
-      g_variant_unref (value);
-    }
-}
-
-static void
-service_name_owner_changed (GDBusProxy * proxy, GParamSpec *pspec, gpointer user_data)
-{
-  GtkWidget * widget = GTK_WIDGET (user_data);
-  gchar * owner = g_dbus_proxy_get_name_owner (proxy);
-
-  gtk_widget_set_sensitive (widget, (owner != NULL));
-
-  g_free (owner);
-}
-
-static void
-service_proxy_ready (GObject *object, GAsyncResult *res, gpointer user_data)
-{
-  GError * error = NULL;
-
-  GDBusProxy * proxy = g_dbus_proxy_new_for_bus_finish (res, &error);
-
-  if (error != NULL) {
-    g_critical("Could not grab DBus proxy for indicator-datetime-service: %s", error->message);
-    g_error_free(error);
-    return;
-  }
-
-  /* And now, do initial proxy configuration */
-  g_signal_connect (proxy, "notify::g-name-owner", G_CALLBACK (service_name_owner_changed), user_data);
-  service_name_owner_changed (proxy, NULL, user_data);
-}
-
-static gboolean
-are_spinners_focused (IndicatorDatetimePanel * self)
-{
-  // save_time_id means that we were in focus and haven't finished our save
-  // yet, so act like we are still focused.
-  return self->priv->save_time_id ||
-         gtk_widget_has_focus (self->priv->time_spin) ||
-         gtk_widget_has_focus (self->priv->date_spin);
-}
-
-static gboolean
-save_time (IndicatorDatetimePanel * self)
-{
-  if (self->priv->user_edited_time) {
-    gdouble current_value = gtk_spin_button_get_value (GTK_SPIN_BUTTON (self->priv->date_spin));
-    g_dbus_proxy_call (self->priv->proxy, "SetTime",
-                       g_variant_new ("(xbb)", (gint64) (current_value * G_TIME_SPAN_SECOND), FALSE, TRUE),
-                       G_DBUS_CALL_FLAGS_NONE, -1, NULL, dbus_set_answered, "time");
-  }
-  self->priv->user_edited_time = FALSE;
-  self->priv->save_time_id = 0;
-  return FALSE;
-}
-
-static gboolean
-spin_focus_in (IndicatorDatetimePanel * self)
-{
-  if (self->priv->save_time_id > 0) {
-    g_source_remove (self->priv->save_time_id);
-    self->priv->save_time_id = 0;
-  }
-  return FALSE;
-}
-
-static gboolean
-spin_focus_out (IndicatorDatetimePanel * self)
-{
-  /* We want to only save when both spinners are unfocused.  But it's difficult
-     to tell who is about to get focus during a focus-out.  So we set an idle
-     callback to save the time if we don't focus in to another spinner by that
-     time. */
-  if (self->priv->save_time_id == 0) {
-    self->priv->save_time_id = g_idle_add ((GSourceFunc)save_time, self);
-  }
-  return FALSE;
-}
-
-static int
-input_time_text (GtkWidget * spinner, gdouble * value, IndicatorDatetimePanel * self)
-{
-  gboolean is_time = (gboolean)GPOINTER_TO_INT (g_object_get_data (G_OBJECT (spinner), "is-time"));
-  const gchar * text = gtk_entry_get_text (GTK_ENTRY (spinner));
-
-  gdouble current_value = gtk_spin_button_get_value (GTK_SPIN_BUTTON (spinner));
-  *value = current_value;
-
-  GDateTime * now = g_date_time_new_from_unix_local (current_value);
-  gint year, month, day, hour, minute, second;
-  year = g_date_time_get_year (now);
-  month = g_date_time_get_month (now);
-  day = g_date_time_get_day_of_month (now);
-  hour = g_date_time_get_hour (now);
-  minute = g_date_time_get_minute (now);
-  second = g_date_time_get_second (now);
-  g_date_time_unref (now);
-
-  /* Parse this string as if it were in the output format */
-  gint scanned = 0;
-  gboolean passed = TRUE, skip = FALSE;
-  if (is_time) {
-    gint hour_in, minute_in, second_in;
-
-    if (is_locale_12h ()) { // TODO: make this look-at/watch gsettings?
-      char ampm[51];
-
-      /* coverity[secure_coding] */
-      scanned = sscanf (text, "%u:%u:%u %50s", &hour_in, &minute_in, &second_in, ampm);
-      passed = (scanned == 4);
-
-      if (passed) {
-        const char *pm_str = nl_langinfo (PM_STR);
-        if (g_ascii_strcasecmp (pm_str, ampm) == 0) {
-          hour_in += 12;
-        }
-      }
-    } else {
-      /* coverity[secure_coding] */
-      scanned = sscanf (text, "%u:%u:%u", &hour_in, &minute_in, &second_in);
-      passed = (scanned == 3);
-    }
-
-    if (passed && (hour_in > 23 || minute_in > 59 || second_in > 59)) {
-      passed = FALSE;
-    }
-    if (passed && hour == hour_in && minute == minute_in && second == second_in) {
-      skip = TRUE; // no change
-    } else {
-      hour = hour_in;
-      minute = minute_in;
-      second = second_in;
-    }
-  }
-  else {
-    gint year_in, month_in, day_in;
-
-    /* coverity[secure_coding] */
-    scanned = sscanf (text, "%u-%u-%u", &year_in, &month_in, &day_in);
-
-    if (scanned != 3 || year_in < 1 || year_in > 9999 ||
-        month_in < 1 || month_in > 12 || day_in < 1 || day_in > 31) {
-      passed = FALSE;
-    }
-    if (passed && year == year_in && month == month_in && day == day_in) {
-      skip = TRUE; // no change
-    } else {
-      year = year_in;
-      month = month_in;
-      day = day_in;
-    }
-  }
-
-  if (!passed) {
-    g_warning ("Could not understand %s", text);
-    return TRUE;
-  }
-
-  if (skip) {
-    return TRUE;
-  }
-
-  gboolean prev_changing = self->priv->changing_time;
-  self->priv->changing_time = TRUE;
-  GDateTime * new_time = g_date_time_new_local (year, month, day, hour, minute, second);
-  *value = g_date_time_to_unix (new_time);
-  self->priv->user_edited_time = TRUE;
-  g_date_time_unref (new_time);
-  self->priv->changing_time = prev_changing;
-
-  return TRUE;
-}
-
-static gboolean
-format_time_text (GtkWidget * spinner, gpointer user_data)
-{
-  gboolean is_time = (gboolean)GPOINTER_TO_INT (g_object_get_data (G_OBJECT (spinner), "is-time"));
-
-  const gchar * format;
-  if (is_time) {
-    if (is_locale_12h ()) { // TODO: make this look-at/watch gsettings?
-      format = "%I:%M:%S %p";
-    } else {
-      format = "%H:%M:%S";
-    }
-  }
-  else {
-    // This is intentionally not "%x".  See https://launchpad.net/bugs/1149696
-    // If you are willing to do the hard work of writing a locale-sensitive
-    // date parser, there is an open bug: https://launchpad.net/bugs/729056
-    format = "%Y-%m-%d";
-  }
-
-  GDateTime * datetime = g_date_time_new_from_unix_local (gtk_spin_button_get_value (GTK_SPIN_BUTTON (spinner)));
-  gchar * formatted = g_date_time_format (datetime, format);
-  gtk_entry_set_text (GTK_ENTRY (spinner), formatted);
-  g_date_time_unref (datetime);
-
-  return TRUE;
-}
-
-static void
-spin_copy_value (GtkSpinButton * spinner, IndicatorDatetimePanel * self)
-{
-  GtkSpinButton * other = NULL;
-  if (GTK_WIDGET (spinner) == self->priv->date_spin)
-    other = GTK_SPIN_BUTTON (self->priv->time_spin);
-  else
-    other = GTK_SPIN_BUTTON (self->priv->date_spin);
-
-  if (gtk_spin_button_get_value (spinner) != gtk_spin_button_get_value (other)) {
-    gtk_spin_button_set_value (other, gtk_spin_button_get_value (spinner));
-  }
-  if (!self->priv->changing_time) { /* Means user pressed spin buttons */
-    self->priv->user_edited_time = TRUE;
-  }
-}
-
-static gboolean
-update_spinners (IndicatorDatetimePanel * self)
-{
-  /* Add datetime object to spinner, which will hold the real time value, rather
-     then using the value of the spinner itself.  And don't update while user is
-     editing. */
-  if (!are_spinners_focused (self)) {
-    gboolean prev_changing = self->priv->changing_time;
-    self->priv->changing_time = TRUE;
-    GDateTime * now = g_date_time_new_now_local ();
-    gtk_spin_button_set_value (GTK_SPIN_BUTTON (self->priv->time_spin),
-                               (gdouble)g_date_time_to_unix (now));
-    /* will be copied to other spin button */
-    g_date_time_unref (now);
-    self->priv->changing_time = prev_changing;
-  }
-  return TRUE;
-}
-
-static void
-setup_time_spinners (IndicatorDatetimePanel * self, GtkWidget * time, GtkWidget * date)
-{
-  g_signal_connect (time, "input", G_CALLBACK (input_time_text), self);
-  g_signal_connect (date, "input", G_CALLBACK (input_time_text), self);
-
-  g_signal_connect (time, "output", G_CALLBACK (format_time_text), date);
-  g_signal_connect (date, "output", G_CALLBACK (format_time_text), time);
-
-  g_signal_connect_swapped (time, "focus-in-event", G_CALLBACK (spin_focus_in), self);
-  g_signal_connect_swapped (date, "focus-in-event", G_CALLBACK (spin_focus_in), self);
-
-  g_signal_connect_swapped (time, "focus-out-event", G_CALLBACK (spin_focus_out), self);
-  g_signal_connect_swapped (date, "focus-out-event", G_CALLBACK (spin_focus_out), self);
-
-  g_signal_connect (time, "value-changed", G_CALLBACK (spin_copy_value), self);
-  g_signal_connect (date, "value-changed", G_CALLBACK (spin_copy_value), self);
-
-  g_object_set_data (G_OBJECT (time), "is-time", GINT_TO_POINTER (TRUE));
-  g_object_set_data (G_OBJECT (date), "is-time", GINT_TO_POINTER (FALSE));
-
-  self->priv->time_spin = time;
-  self->priv->date_spin = date;
-
-  /* 2 seconds is what the indicator itself uses */
-  guint time_id = g_timeout_add_seconds (2, (GSourceFunc)update_spinners, self);
-  g_signal_connect_swapped (self->priv->time_spin, "destroy",
-                            G_CALLBACK (g_source_remove), GINT_TO_POINTER (time_id));
-  update_spinners (self);
-}
-
-static void
-show_locations (IndicatorDatetimePanel * self)
-{
-  if (self->priv->loc_dlg == NULL) {
-    self->priv->loc_dlg = datetime_setup_locations_dialog (self->priv->tzmap);
-    GtkWidget * dlg = gtk_widget_get_toplevel (GTK_WIDGET (self));
-    gtk_window_set_type_hint (GTK_WINDOW(self->priv->loc_dlg), GDK_WINDOW_TYPE_HINT_DIALOG);
-    gtk_window_set_transient_for (GTK_WINDOW (self->priv->loc_dlg), GTK_WINDOW (dlg));
-    g_signal_connect (self->priv->loc_dlg, "destroy", G_CALLBACK (gtk_widget_destroyed), &self->priv->loc_dlg);
-    gtk_widget_show_all (self->priv->loc_dlg);
-  }
-  else {
-    gtk_window_present_with_time (GTK_WINDOW (self->priv->loc_dlg), gtk_get_current_event_time ());
-  }
-}
-
-static gboolean
-timezone_selected (GtkEntryCompletion * widget, GtkTreeModel * model,
-                   GtkTreeIter * iter, IndicatorDatetimePanel * self)
-{
-  const gchar * name, * zone;
-
-  gtk_tree_model_get (model, iter,
-                      CC_TIMEZONE_COMPLETION_NAME, &name,
-                      CC_TIMEZONE_COMPLETION_ZONE, &zone,
-                      -1);
-
-  if (zone == NULL || zone[0] == 0) {
-    const gchar * strlon, * strlat;
-    gdouble lon = 0.0, lat = 0.0;
-
-    gtk_tree_model_get (model, iter,
-                        CC_TIMEZONE_COMPLETION_LONGITUDE, &strlon,
-                        CC_TIMEZONE_COMPLETION_LATITUDE, &strlat,
-                        -1);
-
-    if (strlon != NULL && strlon[0] != 0) {
-      lon = g_ascii_strtod(strlon, NULL);
-    }
-
-    if (strlat != NULL && strlat[0] != 0) {
-      lat = g_ascii_strtod(strlat, NULL);
-    }
-
-    zone = cc_timezone_map_get_timezone_at_coords (self->priv->tzmap, lon, lat);
-  }
-
-  GSettings * conf = g_settings_new (SETTINGS_INTERFACE);
-  gchar * tz_name = g_strdup_printf ("%s %s", zone, name);
-  g_settings_set_string (conf, SETTINGS_TIMEZONE_NAME_S, tz_name);
-  g_free (tz_name);
-  g_object_unref (conf);
-
-  cc_timezone_map_set_timezone (self->priv->tzmap, zone);
-
-  return FALSE; // Do normal action too
-}
-
-static gboolean
-entry_focus_out (GtkEntry * entry, GdkEventFocus * event, IndicatorDatetimePanel * self)
-{
-  // If the name left in the entry doesn't match the current timezone name,
-  // show an error icon.  It's always an error for the user to manually type in
-  // a timezone.
-  CcTimezoneLocation * location = cc_timezone_map_get_location (self->priv->tzmap);
-  if (location == NULL)
-    return FALSE;
-
-  gchar * zone;
-  g_object_get (location, "zone", &zone, NULL);
-
-  gchar * name = get_current_zone_name (zone);
-  gboolean correct = (g_strcmp0 (gtk_entry_get_text (entry), name) == 0);
-  g_free (name);
-  g_free (zone);
-
-  gtk_entry_set_icon_from_stock (entry, GTK_ENTRY_ICON_SECONDARY,
-                                 correct ? NULL : GTK_STOCK_DIALOG_ERROR);
-  gtk_entry_set_icon_tooltip_text (entry, GTK_ENTRY_ICON_SECONDARY,
-                                   _("You need to choose a location to change the time zone."));
-  gtk_entry_set_icon_activatable (entry, GTK_ENTRY_ICON_SECONDARY, FALSE);
-  return FALSE;
-}
-
-static void
 indicator_datetime_panel_init (IndicatorDatetimePanel * self)
 {
   self->priv = G_TYPE_INSTANCE_GET_PRIVATE (self,
@@ -658,31 +146,6 @@
 
 #define WIG(name) GTK_WIDGET (gtk_builder_get_object (self->priv->builder, name))
 
-  /* Add policykit button */
-  GtkWidget * polkit_button = gtk_lock_button_new (NULL);
-  g_object_set (G_OBJECT (polkit_button),
-                "text-unlock", _("Unlock to change these settings"),
-                "text-lock", _("Lock to prevent further changes"),
-                NULL);
-  GtkWidget * alignment = gtk_alignment_new (0.0, 0.5, 0.0, 0.0);
-  gtk_container_add (GTK_CONTAINER (alignment), polkit_button);
-  gtk_box_pack_start (GTK_BOX (WIG ("timeDateBox")), alignment, FALSE, TRUE, 0);
-
-  const gchar * polkit_name = "org.gnome.controlcenter.datetime.configure";
-  polkit_permission_new (polkit_name, NULL, NULL, polkit_perm_ready, polkit_button);
-
-  /* Add map */
-  self->priv->tzmap = cc_timezone_map_new ();
-  gtk_container_add (GTK_CONTAINER (WIG ("mapBox")), GTK_WIDGET (self->priv->tzmap));
-  /* Fufill the CC by Attribution license requirements for the Geonames lookup */
-  cc_timezone_map_set_watermark (self->priv->tzmap, "Geonames.org");
-
-  /* And completion entry */
-  self->priv->completion = cc_timezone_completion_new ();
-  cc_timezone_completion_watch_entry (self->priv->completion, GTK_ENTRY (WIG ("timezoneEntry")));
-  g_signal_connect (self->priv->completion, "match-selected", G_CALLBACK (timezone_selected), self);
-  g_signal_connect (WIG ("timezoneEntry"), "focus-out-event", G_CALLBACK (entry_focus_out), self);
-
   /* Set up settings bindings */
   g_settings_bind (conf, SETTINGS_SHOW_CLOCK_S, WIG ("showClockCheck"),
                    "active", G_SETTINGS_BIND_DEFAULT);
@@ -708,47 +171,17 @@
                    "active", G_SETTINGS_BIND_DEFAULT);
   g_settings_bind (conf, SETTINGS_SHOW_EVENTS_S, WIG ("showEventsCheck"),
                    "active", G_SETTINGS_BIND_DEFAULT);
-  g_settings_bind (conf, SETTINGS_SHOW_DETECTED_S, WIG ("showDetectedCheck"),
-                   "active", G_SETTINGS_BIND_DEFAULT);
-  g_settings_bind (conf, SETTINGS_SHOW_LOCATIONS_S, WIG ("showLocationsCheck"),
-                   "active", G_SETTINGS_BIND_DEFAULT);
 
   /* Set up sensitivities */
   add_widget_dependency (WIG ("showCalendarCheck"), WIG ("calendarOptions"));
   add_widget_dependency (WIG ("showClockCheck"), WIG ("clockOptions"));
-  add_widget_dependency (WIG ("showLocationsCheck"), WIG ("locationsButton"));
-  add_widget_dependency (WIG ("manualTimeRadio"), WIG ("manualOptions"));
-  add_polkit_dependency (polkit_button, WIG ("timeDateOptions"));
 
   /* Hacky proxy test for whether evolution-data-server is installed */
   gchar * evo_path = g_find_program_in_path ("evolution");
   gtk_widget_set_sensitive (WIG ("showEventsCheck"), (evo_path != NULL));
   g_free (evo_path);
 
-  setup_time_spinners (self, WIG ("timeSpinner"), WIG ("dateSpinner"));
-
   GtkWidget * panel = WIG ("timeDatePanel");
-  self->priv->auto_radio = WIG ("automaticTimeRadio");
-  self->priv->tz_entry = WIG ("timezoneEntry");
-
-  g_signal_connect_swapped (WIG ("locationsButton"), "clicked", G_CALLBACK (show_locations), self);
-
-  /* Grab proxy for settings daemon */
-  g_dbus_proxy_new_for_bus (G_BUS_TYPE_SYSTEM, G_DBUS_PROXY_FLAGS_NONE, NULL,
-                            "org.freedesktop.timedate1",
-                            "/org/freedesktop/timedate1",
-                            "org.freedesktop.timedate1",
-                            NULL, (GAsyncReadyCallback)proxy_ready, self);
-
-  /* Grab proxy for datetime service, to see if it's running.  It would
-     actually be more ideal to see if the indicator module itself is running,
-     but that doesn't yet claim a name on the bus.  Presumably the service
-     would have been started by any such indicator, so this will at least tell
-     us if there *was* a datetime module run this session. */
-  g_dbus_proxy_new_for_bus (G_BUS_TYPE_SESSION, G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START, NULL,
-                            SERVICE_NAME, SERVICE_OBJ, SERVICE_IFACE,
-                            NULL, (GAsyncReadyCallback)service_proxy_ready,
-                            WIG ("showClockCheck"));
 
 #undef WIG
 
@@ -765,37 +198,6 @@
   IndicatorDatetimePanelPrivate * priv = self->priv;
 
   g_clear_object (&priv->builder);
-  g_clear_object (&priv->proxy);
-
-  if (priv->loc_dlg) {
-    gtk_widget_destroy (priv->loc_dlg);
-    priv->loc_dlg = NULL;
-  }
-
-  if (priv->save_time_id) {
-    g_source_remove (priv->save_time_id);
-    priv->save_time_id = 0;
-  }
-
-  if (priv->completion) {
-    cc_timezone_completion_watch_entry (priv->completion, NULL);
-    g_clear_object (&priv->completion);
-  }
-
-  if (priv->tz_entry) {
-    gtk_widget_destroy (priv->tz_entry);
-    priv->tz_entry = NULL;
-  }
-
-  if (priv->time_spin) {
-    gtk_widget_destroy (priv->time_spin);
-    priv->time_spin = NULL;
-  }
-
-  if (priv->date_spin) {
-    gtk_widget_destroy (priv->date_spin);
-    priv->date_spin = NULL;
-  }
 
   G_OBJECT_CLASS (indicator_datetime_panel_parent_class)->dispose (object);
 }
--- a/src/datetime-prefs-locations.c
+++ b/src/datetime-prefs-locations.c
@@ -1,673 +0,0 @@
-/* -*- Mode: C; coding: utf-8; indent-tabs-mode: nil; tab-width: 2 -*-
-
-A dialog for setting time and date preferences.
-
-Copyright 2011 Canonical Ltd.
-
-Authors:
-    Michael Terry <michael.terry@canonical.com>
-
-This program is free software: you can redistribute it and/or modify it 
-under the terms of the GNU General Public License version 3, as published 
-by the Free Software Foundation.
-
-This program is distributed in the hope that it will be useful, but 
-WITHOUT ANY WARRANTY; without even the implied warranties of 
-MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
-PURPOSE.  See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along 
-with this program.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#ifdef HAVE_CONFIG_H
-#include "config.h"
-#endif
-
-#include <stdlib.h>
-#include <glib/gi18n-lib.h>
-#include <gtk/gtk.h>
-#include <timezonemap/timezone-completion.h>
-
-#include "datetime-prefs-locations.h"
-#include "settings-shared.h"
-#include "utils.h"
-
-#define DATETIME_DIALOG_UI_FILE PKGDATADIR "/datetime-dialog.ui"
-
-#define COL_NAME         0
-#define COL_TIME         1
-#define COL_ZONE         2
-#define COL_VISIBLE_NAME 3
-#define COL_ICON         4
-
-static gboolean update_times (GtkWidget * dlg);
-static void save_when_idle (GtkWidget * dlg);
-
-/***
-**** Sorting
-***/
-
-/**
- * A temporary struct used for sorting
- */
-struct TimeLocation
-{
-  gchar * collated_name;
-  gint pos;
-  gint32 offset;
-};
-
-static struct TimeLocation*
-time_location_new (const char * zone, const char * name, int pos, time_t now)
-{
-  struct TimeLocation * loc = g_new (struct TimeLocation, 1);
-  GTimeZone * tz = g_time_zone_new (zone);
-  const gint interval = g_time_zone_find_interval (tz, G_TIME_TYPE_UNIVERSAL, now);
-  loc->offset = g_time_zone_get_offset (tz, interval);
-  loc->collated_name = g_utf8_collate_key (name, -1);
-  loc->pos = pos;
-  g_time_zone_unref (tz);
-  return loc;
-}
-
-static void
-time_location_free (struct TimeLocation * loc)
-{
-  g_free (loc->collated_name);
-  g_free (loc);
-}
-
-static GSList*
-time_location_array_new_from_model (GtkTreeModel * model)
-{
-  int pos = 0;
-  GtkTreeIter iter;
-  GSList * list = NULL;
-  const time_t now = time (NULL);
-
-  if (gtk_tree_model_get_iter_first (model, &iter)) do
-    {
-      gchar * zone = NULL;
-      gchar * name = NULL;
-
-      gtk_tree_model_get (model, &iter,
-                          COL_ZONE, &zone,
-                          COL_VISIBLE_NAME, &name,
-                          -1);
-      list = g_slist_prepend (list, time_location_new (zone, name, pos++, now));
-
-      g_free (name);
-      g_free (zone);
-    }
-  while (gtk_tree_model_iter_next (model, &iter));
-
-  return g_slist_reverse (list);
-}
-
-static void
-handle_sort(GtkWidget * button, GtkTreeView * tree_view, GCompareFunc compare)
-{
-  GtkTreeModel * model = gtk_tree_view_get_model (tree_view);
-  GSList * l;
-  GSList * list = g_slist_sort (time_location_array_new_from_model(model), compare);
-
-  gint i;
-  gint * reorder = g_new (gint, g_slist_length(list));
-  for (i=0, l=list; l!=NULL; l=l->next, i++)
-      reorder[i] = ((struct TimeLocation*)l->data)->pos;
-  gtk_list_store_reorder (GTK_LIST_STORE(model), reorder);
-
-  g_free (reorder);
-  g_slist_free_full (list, (GDestroyNotify)time_location_free);
-}
-
-static gint
-time_location_compare_by_name (gconstpointer ga, gconstpointer gb)
-{
-  const struct TimeLocation * a = ga;
-  const struct TimeLocation * b = gb;
-  int ret = g_strcmp0 (a->collated_name, b->collated_name); /* primary key */
-  if (!ret)
-    ret = a->offset - b->offset; /* secondary key */
-  return ret;
-}
-static void
-handle_sort_by_name (GtkWidget * button, GtkTreeView * tree_view)
-{
-  handle_sort (button, tree_view, time_location_compare_by_name);
-}
-
-static gint
-time_location_compare_by_time (gconstpointer ga, gconstpointer gb)
-{
-  const struct TimeLocation * a = ga;
-  const struct TimeLocation * b = gb;
-  int ret = a->offset - b->offset; /* primary key */
-  if (!ret)
-    ret = g_strcmp0 (a->collated_name, b->collated_name); /* secondary key */
-  return ret;
-}
-static void
-handle_sort_by_time (GtkWidget * button, GtkTreeView * tree_view)
-{
-  handle_sort (button, tree_view, time_location_compare_by_time);
-}
-
-static gboolean
-time_location_list_test_sorted (GSList * list, GCompareFunc compare)
-{
-  GSList * l;
-  for (l=list; l!=NULL && l->next!=NULL; l=l->next)
-    if (compare(l->data, l->next->data) > 0)
-      return FALSE;
-  return TRUE;
-}
-static void
-location_model_test_sorted (GtkTreeModel * model, gboolean * is_sorted_by_name, gboolean * is_sorted_by_time)
-{
-  GSList * list = time_location_array_new_from_model(model);
-  *is_sorted_by_name = time_location_list_test_sorted (list, time_location_compare_by_name);
-  *is_sorted_by_time = time_location_list_test_sorted (list, time_location_compare_by_time);
-  g_slist_free_full (list, (GDestroyNotify)time_location_free);
-}
-
-/***
-****
-***/
-
-static void
-handle_add (GtkWidget * button, GtkTreeView * tree)
-{
-  GtkListStore * store = GTK_LIST_STORE (gtk_tree_view_get_model (tree));
-
-  GtkTreeIter iter;
-  gtk_list_store_append (store, &iter);
-
-  GtkTreePath * path = gtk_tree_model_get_path (GTK_TREE_MODEL (store), &iter);
-  gtk_tree_view_set_cursor (tree, path, gtk_tree_view_get_column (tree, 0), TRUE);
-  gtk_tree_path_free (path);
-}
-
-static void
-handle_remove (GtkWidget * button, GtkTreeView * tree)
-{
-  GtkListStore * store = GTK_LIST_STORE (gtk_tree_view_get_model (tree));
-  GtkTreeSelection * selection = gtk_tree_view_get_selection (tree);
-
-  GList * paths = gtk_tree_selection_get_selected_rows (selection, NULL);
-
-  /* Convert all paths to iters so we can safely delete multiple paths.  For a
-     GtkListStore, iters persist past model changes. */
-  GList * tree_iters = NULL;
-  GList * iter;
-  for (iter = paths; iter; iter = iter->next) {
-    GtkTreeIter * tree_iter = g_new(GtkTreeIter, 1);
-    if (gtk_tree_model_get_iter (GTK_TREE_MODEL (store), tree_iter, (GtkTreePath *)iter->data)) {
-      tree_iters = g_list_prepend (tree_iters, tree_iter);
-    }
-    gtk_tree_path_free (iter->data);
-  }
-  g_list_free (paths);
-  
-  // Find the next item to select
-  GtkTreeIter *last_selected = g_list_nth_data(tree_iters, 0);
-  GtkTreePath *path = gtk_tree_model_get_path(GTK_TREE_MODEL (store), last_selected);
-  GtkTreeIter titer;
-  if (!gtk_tree_model_get_iter(GTK_TREE_MODEL (store), &titer, path)) {
-    g_debug("Failed to get last selected iter from path");
-  	last_selected = NULL;
-  } else {
-	  if (!gtk_tree_model_iter_next(GTK_TREE_MODEL (store), &titer)) {
-	  	if (gtk_tree_path_prev(path)) {
-	  	  	if (!gtk_tree_model_get_iter(GTK_TREE_MODEL (store), &titer, path)) {
-	  			g_debug("Failed to get iter from path");
-	  			last_selected = NULL;
-	  		} else {
-		  		last_selected = &titer;
-		  	}
-	  	} else {
-	  		g_debug("handle_remove: Failed to find another location to select (assume single selected)");
-	  		last_selected = NULL;
-	  	}
-	  } else {
-	  	g_debug("Got next item in model");
-		last_selected = &titer;
-	  }
-  }
- 
-  if (last_selected) {
-	  gboolean clear = TRUE;
-	  path = gtk_tree_model_get_path(GTK_TREE_MODEL (store), last_selected);
-	  
-      // Step over the path to find an item which isn't in the delete list
-	  if (g_list_length(tree_iters) > 1) {
-		  for (iter = tree_iters; iter; iter = iter->next) {
-		  	GtkTreePath *ipath = gtk_tree_model_get_path(GTK_TREE_MODEL (store), (GtkTreeIter *)iter->data);
-		  	if (gtk_tree_path_compare(path, ipath) == 0) {
-		  		clear = FALSE;
-		  		break;
-		  	}
-		  }
-	  	  while (clear == FALSE) {
-			if (gtk_tree_path_prev(path)) {
-				clear = TRUE;
-		  	  	for (iter = tree_iters; iter; iter = iter->next) {
-		  			GtkTreePath *ipath = gtk_tree_model_get_path(GTK_TREE_MODEL (store), (GtkTreeIter *)iter->data);
-		  			if (gtk_tree_path_compare(path, ipath) == 0) {
-		  				clear = FALSE;
-		  				break;
-		  			}
-		  		}
-		  		if (clear) {
-			  		if (!gtk_tree_model_get_iter(GTK_TREE_MODEL (store), &titer, path)) {
-			  			g_debug("Failed to get iter from path");
-			  			last_selected = NULL;
-			  		} else {
-				  		last_selected = &titer;
-				  	}
-				}
-		  	} else {
-		  		last_selected = NULL;
-		  		break;
-		  	}
-		  }
-	  }
-  }
-  
-  /* Now delete each iterator */
-  for (iter = tree_iters; iter; iter = iter->next) {
-    gtk_list_store_remove (store, (GtkTreeIter *)iter->data);
-    g_free (iter->data);
-  }
-  g_list_free (tree_iters);
-  
-  if (last_selected)
-	  gtk_tree_selection_select_iter(selection, last_selected);
-}
-
-static void
-handle_edit (GtkCellRendererText * renderer, gchar * path, gchar * new_text,
-             GtkListStore * store)
-{
-  GtkTreeIter iter;
-
-  // Manual user edits are always wrong (unless they are undoing a previous
-  // edit), so we set the error icon here if needed.  Common way to get to
-  // this code path is to lose entry focus.
-  if (gtk_tree_model_get_iter_from_string (GTK_TREE_MODEL (store), &iter, path)) {
-    gchar * name;
-    gtk_tree_model_get (GTK_TREE_MODEL (store), &iter, COL_NAME, &name, -1);
-    gboolean correct = g_strcmp0 (name, new_text) == 0;
-    g_free (name);
-
-    gtk_list_store_set (store, &iter,
-                        COL_VISIBLE_NAME, new_text,
-                        COL_ICON, correct ? NULL : GTK_STOCK_DIALOG_ERROR,
-                        -1);
-  }
-}
-
-static gboolean
-timezone_selected (GtkEntryCompletion * widget, GtkTreeModel * model,
-                   GtkTreeIter * iter, GtkWidget * dlg)
-{
-  gchar * zone = NULL;
-  gchar * name = NULL;
-
-  gtk_tree_model_get (model, iter,
-                      CC_TIMEZONE_COMPLETION_ZONE, &zone,
-                      CC_TIMEZONE_COMPLETION_NAME, &name,
-                      -1);
-
-  /* if no explicit timezone, try to determine one from latlon */
-  if (!zone || !*zone)
-  {
-    gchar * strlat = NULL;
-    gchar * strlon = NULL;
-    gdouble lat = 0;
-    gdouble lon = 0;
-
-    gtk_tree_model_get (model, iter,
-                        CC_TIMEZONE_COMPLETION_LATITUDE, &strlat,
-                        CC_TIMEZONE_COMPLETION_LONGITUDE, &strlon,
-                        -1);
-
-    if (strlat && *strlat) lat = g_ascii_strtod(strlat, NULL);
-    if (strlon && *strlon) lon = g_ascii_strtod(strlon, NULL);
-
-    CcTimezoneMap * tzmap = CC_TIMEZONE_MAP (g_object_get_data (G_OBJECT (widget), "tzmap"));
-    g_free (zone);
-    zone = g_strdup (cc_timezone_map_get_timezone_at_coords (tzmap, lon, lat));
-
-    g_free (strlat);
-    g_free (strlon);
-  }
-
-  GtkListStore * store = GTK_LIST_STORE (g_object_get_data (G_OBJECT (widget), "store"));
-  GtkTreeIter * store_iter = (GtkTreeIter *)g_object_get_data (G_OBJECT (widget), "store_iter");
-  if (store != NULL && store_iter != NULL) {
-    gtk_list_store_set (store, store_iter,
-                        COL_VISIBLE_NAME, name,
-                        COL_ICON, NULL,
-                        COL_NAME, name,
-                        COL_ZONE, zone, -1);
-  }
-
-  update_times (dlg);
-
-  /* cleanup */
-  g_free (name);
-  g_free (zone);
-
-  return FALSE; // Do normal action too
-}
-
-static gboolean
-query_tooltip (GtkTreeView * tree, gint x, gint y, gboolean keyboard_mode,
-               GtkTooltip * tooltip, GtkCellRenderer * cell)
-{
-  GtkTreeModel * model;
-  GtkTreeIter iter;
-  if (!gtk_tree_view_get_tooltip_context (tree, &x, &y, keyboard_mode,
-                                          &model, NULL, &iter))
-    return FALSE;
-
-  const gchar * icon;
-  gtk_tree_model_get (model, &iter, COL_ICON, &icon, -1);
-  if (icon == NULL)
-    return FALSE;
-
-  GtkTreeViewColumn * col = gtk_tree_view_get_column (tree, 0);
-  gtk_tree_view_set_tooltip_cell (tree, tooltip, NULL, col, cell);
-  gtk_tooltip_set_text (tooltip, _("You need to complete this location for it to appear in the menu."));
-  return TRUE;
-}
-
-static void
-handle_edit_started (GtkCellRendererText * renderer, GtkCellEditable * editable,
-                     gchar * path, CcTimezoneCompletion * completion)
-{
-  if (GTK_IS_ENTRY (editable)) {
-    GtkEntry *entry = GTK_ENTRY (editable);
-    cc_timezone_completion_watch_entry (completion, entry);
-
-    GtkListStore * store = GTK_LIST_STORE (g_object_get_data (G_OBJECT (completion), "store"));
-    GtkTreeIter * store_iter = g_new(GtkTreeIter, 1);
-    if (gtk_tree_model_get_iter_from_string (GTK_TREE_MODEL (store), store_iter, path)) {
-      g_object_set_data_full (G_OBJECT (completion), "store_iter", store_iter, g_free);
-    }
-  }
-}
-
-static gboolean
-update_times (GtkWidget * dlg)
-{
-  /* For each entry, check zone in column 2 and set column 1 to it's time */
-  CcTimezoneCompletion * completion = CC_TIMEZONE_COMPLETION (g_object_get_data (G_OBJECT (dlg), "completion"));
-  GtkListStore * store = GTK_LIST_STORE (g_object_get_data (G_OBJECT (completion), "store"));
-  GObject * cell = G_OBJECT (g_object_get_data (G_OBJECT (completion), "name-cell"));
-
-  gboolean editing;
-  g_object_get (cell, "editing", &editing, NULL);
-  if (editing) { /* No updates while editing, it cancels the edit */
-    return TRUE;
-  }
-
-  g_signal_handlers_block_by_func (store, save_when_idle, dlg);
-
-  GDateTime * now = g_date_time_new_now_local ();
-
-  GtkTreeIter iter;
-  if (gtk_tree_model_get_iter_first (GTK_TREE_MODEL (store), &iter)) {
-    do {
-      gchar * strzone;
-
-      gtk_tree_model_get (GTK_TREE_MODEL (store), &iter, COL_ZONE, &strzone, -1);
-
-      if (strzone && *strzone) {
-        GTimeZone * tz = g_time_zone_new (strzone);
-        GDateTime * now_tz = g_date_time_to_timezone (now, tz);
-        gchar * format = generate_format_string_at_time (now_tz);
-        gchar * time_str = g_date_time_format (now_tz, format);
-        gchar * old_time_str;
-
-        gtk_tree_model_get (GTK_TREE_MODEL (store), &iter, COL_TIME, &old_time_str, -1);
-        if (g_strcmp0 (old_time_str, time_str))
-          gtk_list_store_set (store, &iter, COL_TIME, time_str, -1);
-
-        g_free (old_time_str);
-        g_free (time_str);
-        g_free (format);
-        g_date_time_unref (now_tz);
-        g_time_zone_unref (tz);
-      }
-      g_free (strzone);
-    } while (gtk_tree_model_iter_next (GTK_TREE_MODEL (store), &iter));
-  }
-
-  g_date_time_unref (now);
-
-  g_signal_handlers_unblock_by_func (store, save_when_idle, dlg);
-
-  return TRUE;
-}
-
-static void
-fill_from_settings (GObject * store, GSettings * conf)
-{
-  gchar ** locations = g_settings_get_strv (conf, SETTINGS_LOCATIONS_S);
-
-  gtk_list_store_clear (GTK_LIST_STORE (store));
-
-  gchar ** striter;
-  GtkTreeIter iter;
-  for (striter = locations; *striter; ++striter) {
-    gchar * zone, * name;
-    split_settings_location (*striter, &zone, &name);
-
-    gtk_list_store_append (GTK_LIST_STORE (store), &iter);
-    gtk_list_store_set (GTK_LIST_STORE (store), &iter,
-                        COL_VISIBLE_NAME, name,
-                        COL_ICON, NULL,
-                        COL_NAME, name,
-                        COL_ZONE, zone, -1);
-
-    g_free (zone);
-    g_free (name);
-  }
-
-  g_strfreev (locations);
-}
-
-static void
-save_to_settings (GObject * store, GSettings * conf)
-{
-  gboolean empty = TRUE;
-  GVariantBuilder builder;
-  g_variant_builder_init (&builder, G_VARIANT_TYPE_STRING_ARRAY);
-
-  GtkTreeIter iter;
-  if (gtk_tree_model_get_iter_first (GTK_TREE_MODEL (store), &iter)) {
-    GString * gstr = g_string_new (NULL);
-    do {
-      gchar * strname;
-      gchar * strzone;
-      gtk_tree_model_get (GTK_TREE_MODEL (store), &iter,
-                          COL_NAME, &strname,
-                          COL_ZONE, &strzone,
-                          -1);
-      if (strzone && *strzone && strname && *strname) {
-        g_string_printf (gstr, "%s %s", strzone, strname);
-        g_variant_builder_add (&builder, "s", gstr->str);
-        empty = FALSE;
-      }
-      g_free (strname);
-      g_free (strzone);
-    } while (gtk_tree_model_iter_next (GTK_TREE_MODEL (store), &iter));
-    g_string_free (gstr, TRUE);
-  }
-
-  if (empty) {
-    /* Empty list */
-    g_variant_builder_clear (&builder);
-    g_settings_set_strv (conf, SETTINGS_LOCATIONS_S, NULL);
-  }
-  else {
-    g_settings_set_value (conf, SETTINGS_LOCATIONS_S, g_variant_builder_end (&builder));
-  }
-}
-
-static gboolean
-save_now (GtkWidget *dlg)
-{
-  GSettings * conf = G_SETTINGS (g_object_get_data (G_OBJECT (dlg), "conf"));
-  GObject * completion = G_OBJECT (g_object_get_data (G_OBJECT (dlg), "completion"));
-  GObject * store = G_OBJECT (g_object_get_data (completion, "store"));
-
-  save_to_settings (store, conf);
-
-  g_object_set_data (G_OBJECT (dlg), "save-id", GINT_TO_POINTER(0));
-
-  return FALSE;
-}
-
-static void
-save_when_idle (GtkWidget *dlg)
-{
-  guint save_id = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (dlg), "save-id"));
-
-  if (save_id == 0) {
-    save_id = g_idle_add ((GSourceFunc)save_now, dlg);
-    g_object_set_data (G_OBJECT (dlg), "save-id", GINT_TO_POINTER(save_id));
-  }
-}
-
-static void
-dialog_closed (GtkWidget * dlg, GObject * store)
-{
-  /* Cleanup a tad */
-  guint time_id = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (dlg), "time-id"));
-  g_source_remove (time_id);
-
-  guint save_id = GPOINTER_TO_INT (g_object_get_data (G_OBJECT (dlg), "save-id"));
-  if (save_id > 0)
-    g_source_remove (save_id);
-}
-
-static void
-selection_changed (GtkTreeSelection * selection, GtkWidget * remove_button)
-{
-  gint count = gtk_tree_selection_count_selected_rows (selection);
-  gtk_widget_set_sensitive (remove_button, count > 0);
-}
-
-static void
-update_button_sensitivity (GtkWidget * dlg)
-{
-  GObject * odlg = G_OBJECT(dlg);
-  GObject * completion = g_object_get_data(odlg, "completion");
-  GtkTreeModel * model = GTK_TREE_MODEL (g_object_get_data (completion, "store")); 
-  gboolean is_sorted_by_name;
-  gboolean is_sorted_by_time;
-  location_model_test_sorted (model, &is_sorted_by_name, &is_sorted_by_time);
-  gtk_widget_set_sensitive (GTK_WIDGET(g_object_get_data(odlg, "sortByNameButton")), !is_sorted_by_name);
-  gtk_widget_set_sensitive (GTK_WIDGET(g_object_get_data(odlg, "sortByTimeButton")), !is_sorted_by_time);
-}
-
-static void
-model_changed (GtkWidget * dlg)
-{
-  update_button_sensitivity (dlg);
-  save_when_idle (dlg);
-}
-
-GtkWidget *
-datetime_setup_locations_dialog (CcTimezoneMap * map)
-{
-  GError * error = NULL;
-  GtkBuilder * builder = gtk_builder_new ();
-  gtk_builder_set_translation_domain (builder, GETTEXT_PACKAGE);
-  gtk_builder_add_from_file (builder, DATETIME_DIALOG_UI_FILE, &error);
-  if (error != NULL) {
-    /* We have to abort, we can't continue without the ui file */
-    g_error ("Could not load ui file %s: %s", DATETIME_DIALOG_UI_FILE, error->message);
-    g_error_free (error);
-    return NULL;
-  }
-
-  GSettings * conf = g_settings_new (SETTINGS_INTERFACE);
-
-#define WIG(name) GTK_WIDGET (gtk_builder_get_object (builder, name))
-
-  GtkWidget * dlg = WIG ("locationsDialog");
-  GtkWidget * tree = WIG ("locationsView");
-  GObject * store = gtk_builder_get_object (builder, "locationsStore");
-
-  /* Configure tree */
-  CcTimezoneCompletion * completion = cc_timezone_completion_new ();
-  g_object_set_data (G_OBJECT (completion), "tzmap", map);
-  g_object_set_data (G_OBJECT (completion), "store", store);
-  g_signal_connect (completion, "match-selected", G_CALLBACK (timezone_selected), dlg);
-
-  GtkCellRenderer * cell = gtk_cell_renderer_text_new ();
-  g_object_set (cell, "editable", TRUE, NULL);
-  g_signal_connect (cell, "editing-started", G_CALLBACK (handle_edit_started), completion);
-  g_signal_connect (cell, "edited", G_CALLBACK (handle_edit), store);
-  gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (tree), -1,
-                                               _("Location"), cell,
-                                               "text", COL_VISIBLE_NAME, NULL);
-  GtkTreeViewColumn * loc_col = gtk_tree_view_get_column (GTK_TREE_VIEW (tree), 0);
-  gtk_tree_view_column_set_expand (loc_col, TRUE);
-  g_object_set_data (G_OBJECT (completion), "name-cell", cell);
-
-  cell = gtk_cell_renderer_pixbuf_new ();
-  gtk_tree_view_column_pack_start (loc_col, cell, FALSE);
-  gtk_tree_view_column_add_attribute (loc_col, cell, "icon-name", COL_ICON);
-
-  gtk_widget_set_has_tooltip (tree, TRUE);
-  g_signal_connect (tree, "query-tooltip", G_CALLBACK (query_tooltip), cell);
-
-  cell = gtk_cell_renderer_text_new ();
-  gtk_cell_renderer_set_alignment (cell, 1.0f, 0.5f);
-  gtk_tree_view_insert_column_with_attributes (GTK_TREE_VIEW (tree), -1,
-                                               _("Time"), cell,
-                                               "text", COL_TIME, NULL);
-
-  GtkTreeSelection * selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (tree));
-  gtk_tree_selection_set_mode (selection, GTK_SELECTION_MULTIPLE);
-  g_signal_connect (selection, "changed", G_CALLBACK (selection_changed), WIG ("removeButton"));
-  selection_changed (selection, WIG ("removeButton"));
-
-  g_signal_connect (WIG ("addButton"), "clicked", G_CALLBACK (handle_add), tree);
-  g_signal_connect (WIG ("removeButton"), "clicked", G_CALLBACK (handle_remove), tree);
-
-  GtkWidget * w = WIG ("sortByNameButton");
-  g_signal_connect (w, "clicked", G_CALLBACK (handle_sort_by_name), tree);
-  g_object_set_data (G_OBJECT(dlg), "sortByNameButton", w);
-
-  w = WIG ("sortByTimeButton");
-  g_signal_connect (w, "clicked", G_CALLBACK (handle_sort_by_time), tree);
-  g_object_set_data (G_OBJECT(dlg), "sortByTimeButton", w);
-
-  fill_from_settings (store, conf);
-  g_signal_connect_swapped (store, "row-deleted", G_CALLBACK (model_changed), dlg);
-  g_signal_connect_swapped (store, "row-inserted", G_CALLBACK (model_changed), dlg);
-  g_signal_connect_swapped (store, "row-changed", G_CALLBACK (model_changed), dlg);
-  g_signal_connect_swapped (store, "rows-reordered", G_CALLBACK (model_changed), dlg);
-  g_object_set_data_full (G_OBJECT (dlg), "conf", g_object_ref (conf), g_object_unref);
-  g_object_set_data_full (G_OBJECT (dlg), "completion", completion, g_object_unref);
-  g_signal_connect (dlg, "destroy", G_CALLBACK (dialog_closed), store);
-
-  guint time_id = g_timeout_add_seconds (2, (GSourceFunc)update_times, dlg);
-  g_object_set_data (G_OBJECT (dlg), "time-id", GINT_TO_POINTER(time_id));
-  update_times (dlg);
-
-#undef WIG
-
-  g_object_unref (conf);
-  g_object_unref (builder);
-
-  return dlg;
-}
-
--- a/src/datetime-prefs-locations.h
+++ b/src/datetime-prefs-locations.h
@@ -1,35 +0,0 @@
-/* -*- Mode: C; coding: utf-8; indent-tabs-mode: nil; tab-width: 2 -*-
-
-A dialog for setting time and date preferences.
-
-Copyright 2011 Canonical Ltd.
-
-Authors:
-    Michael Terry <michael.terry@canonical.com>
-
-This program is free software: you can redistribute it and/or modify it 
-under the terms of the GNU General Public License version 3, as published 
-by the Free Software Foundation.
-
-This program is distributed in the hope that it will be useful, but 
-WITHOUT ANY WARRANTY; without even the implied warranties of 
-MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR 
-PURPOSE.  See the GNU General Public License for more details.
-
-You should have received a copy of the GNU General Public License along 
-with this program.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#ifndef __DATETIME_PREFS_LOCATIONS_H__
-#define __DATETIME_PREFS_LOCATIONS_H__
-
-#include <gtk/gtk.h>
-#include <timezonemap/cc-timezone-map.h>
-
-G_BEGIN_DECLS
-
-GtkWidget * datetime_setup_locations_dialog (CcTimezoneMap * map);
-
-G_END_DECLS
-
-#endif
--- a/src/datetime-service.c
+++ b/src/datetime-service.c
@@ -35,9 +35,6 @@
 #include <libdbusmenu-glib/client.h>
 #include <libdbusmenu-glib/menuitem.h>
 
-#include <geoclue/geoclue-master.h>
-#include <geoclue/geoclue-master-client.h>
-
 #include <time.h>
 #include <libecal/libecal.h>
 #include <libical/ical.h>
@@ -66,12 +63,9 @@
 #endif
 
 static gboolean update_appointment_menu_items (gpointer user_data);
-static void update_location_menu_items (void);
 static void day_timer_reset (void);
 static gboolean get_greeter_mode (void);
 
-static void quick_set_tz (DbusmenuMenuitem * menuitem, guint timestamp, gpointer user_data);
-
 static IndicatorService * service = NULL;
 static GMainLoop * mainloop = NULL;
 static DbusmenuServer * server = NULL;
@@ -86,7 +80,6 @@
 static DbusmenuMenuitem * locations_separator = NULL;
 static DbusmenuMenuitem * add_appointment = NULL;
 static DbusmenuMenuitem * appointments[MAX_APPOINTMENT_MENUITEMS];
-static GSList           * location_menu_items = NULL;
 static GList            * comp_instances = NULL;
 static gboolean           updating_appointments = FALSE;
 static time_t             start_time_appointments = (time_t) 0;
@@ -95,9 +88,7 @@
 static GList            * appointment_sources = NULL;
 
 
-/* Our 2 important timezones */
 static gchar 			* current_timezone = NULL;
-static gchar 			* geo_timezone = NULL;
 
 struct comp_instance {
         ECalComponent *comp;
@@ -106,150 +97,6 @@
         ESource *source;
 };
 
-/**
- * A temp struct used by update_location_menu_items() for pruning duplicates and sorting.
- */
-struct TimeLocation
-{
-	gint32 offset;
-	gchar * zone;
-	gchar * name;
-	gboolean visible;
-};
-static void
-time_location_free (struct TimeLocation * loc)
-{
-	g_free (loc->name);
-	g_free (loc->zone);
-	g_free (loc);
-}
-static struct TimeLocation*
-time_location_new (const char * zone, const char * name, gboolean visible, time_t now)
-{
-	struct TimeLocation * loc = g_new (struct TimeLocation, 1);
-	GTimeZone * tz = g_time_zone_new (zone);
-	gint interval = g_time_zone_find_interval (tz, G_TIME_TYPE_UNIVERSAL, now);
-	loc->offset = g_time_zone_get_offset (tz, interval);
-	loc->zone = g_strdup (zone);
-	loc->name = g_strdup (name);
-	loc->visible = visible;
-	g_time_zone_unref (tz);
-	g_debug ("%s zone '%s' name '%s' offset is %d", G_STRLOC, zone, name, (int)loc->offset);
-	return loc;
-}
-static int
-time_location_compare (const struct TimeLocation * a, const struct TimeLocation * b)
-{
-	int ret = a->offset - b->offset; /* primary key */
-	if (!ret)
-		ret = g_strcmp0 (a->name, b->name); /* secondary key */
-	if (!ret)
-		ret = a->visible - b->visible; /* tertiary key */
-	g_debug ("%s comparing '%s' (%d) to '%s' (%d), returning %d", G_STRLOC, a->name, (int)a->offset, b->name, (int)b->offset, ret);
-	return ret;
-}
-static GSList*
-locations_add (GSList * locations, const char * zone, const char * name, gboolean visible, time_t now)
-{
-	struct TimeLocation * loc = time_location_new (zone, name, visible, now);
-
-	if (g_slist_find_custom (locations, loc, (GCompareFunc)time_location_compare) == NULL) {
-		g_debug ("%s Adding zone '%s', name '%s'", G_STRLOC, zone, name);
-		locations = g_slist_append (locations, loc);
-	} else {
-		g_debug("%s Skipping duplicate zone '%s' name '%s'", G_STRLOC, zone, name);
-		time_location_free (loc);
-	}
-	return locations;
-}
-
-/* Update the timezone entries */
-static void
-update_location_menu_items (void)
-{
-	/* if we're in greeter mode, don't bother */
-	if (locations_separator == NULL)
-		return;
-
-	/* remove the previous locations */
-	while (location_menu_items != NULL) {
-		DbusmenuMenuitem * item = DBUSMENU_MENUITEM(location_menu_items->data);
-		location_menu_items = g_slist_remove(location_menu_items, item);
-		dbusmenu_menuitem_child_delete(root, DBUSMENU_MENUITEM(item));
-		g_object_unref(G_OBJECT(item));
-	}
-
-	/***
-	****  Build a list of locations to add: use geo_timezone,
-	****  current_timezone, and SETTINGS_LOCATIONS_S, but omit duplicates.
-	***/
-
-	GSList * locations = NULL;
-	const time_t now = time(NULL);
-
-	/* maybe add geo_timezone */
-	if (geo_timezone != NULL) {
-		const gboolean visible = g_settings_get_boolean (conf, SETTINGS_SHOW_DETECTED_S);
-		gchar * name = get_current_zone_name (geo_timezone);
-		locations = locations_add (locations, geo_timezone, name, visible, now);
-		g_free (name);
-	}
-
-	/* maybe add current_timezone */
-	if (current_timezone != NULL) {
-		const gboolean visible = g_settings_get_boolean (conf, SETTINGS_SHOW_DETECTED_S);
-		gchar * name = get_current_zone_name (current_timezone);
-		locations = locations_add (locations, current_timezone, name, visible, now);
-		g_free (name);
-	}
-
-	/* maybe add the user-specified custom locations */
-	gchar ** user_locations = g_settings_get_strv (conf, SETTINGS_LOCATIONS_S);
-	if (user_locations != NULL) { 
-		gint i;
-		const guint location_count = g_strv_length (user_locations);
-		const gboolean visible = g_settings_get_boolean (conf, SETTINGS_SHOW_LOCATIONS_S);
-		g_debug ("%s Found %u user-specified locations", G_STRLOC, location_count);
-		for (i=0; i<location_count; i++) {
-			gchar * zone;
-			gchar * name;
-			split_settings_location (user_locations[i], &zone, &name);
-			locations = locations_add (locations, zone, name, visible, now);
-			g_free (name);
-			g_free (zone);
-		}
-		g_strfreev (user_locations);
-		user_locations = NULL;
-	}
-
-	/* finally create menuitems for each location */
-	gint offset = dbusmenu_menuitem_get_position (locations_separator, root)+1;
-	GSList * l;
-	gboolean have_visible_location = FALSE;
-	for (l=locations; l!=NULL; l=l->next) {
-		struct TimeLocation * loc = l->data;
-		g_debug("%s Adding location: zone '%s', name '%s'", G_STRLOC, loc->zone, loc->name);
-		DbusmenuMenuitem * item = dbusmenu_menuitem_new();
-		dbusmenu_menuitem_property_set      (item, DBUSMENU_MENUITEM_PROP_TYPE, TIMEZONE_MENUITEM_TYPE);
-		dbusmenu_menuitem_property_set      (item, TIMEZONE_MENUITEM_PROP_NAME, loc->name);
-		dbusmenu_menuitem_property_set      (item, TIMEZONE_MENUITEM_PROP_ZONE, loc->zone);
-		dbusmenu_menuitem_property_set_bool (item, TIMEZONE_MENUITEM_PROP_RADIO, FALSE);
-		dbusmenu_menuitem_property_set_bool (item, DBUSMENU_MENUITEM_PROP_ENABLED, TRUE);
-		dbusmenu_menuitem_property_set_bool (item, DBUSMENU_MENUITEM_PROP_VISIBLE, loc->visible);
-		dbusmenu_menuitem_child_add_position (root, item, offset++);
-		g_signal_connect(G_OBJECT(item), DBUSMENU_MENUITEM_SIGNAL_ITEM_ACTIVATED, G_CALLBACK(quick_set_tz), NULL);
-		location_menu_items = g_slist_append (location_menu_items, item);
-		if (loc->visible)
-			have_visible_location = TRUE;
-		time_location_free (loc);
-	}
-	g_slist_free (locations);
-	locations = NULL;
-
-	/* if there's at least one item being shown, show the separator too */
-	dbusmenu_menuitem_property_set_bool (locations_separator, DBUSMENU_MENUITEM_PROP_VISIBLE, have_visible_location);
-}
-
 /* Update the current timezone */
 static void
 update_current_timezone (void) {
@@ -266,69 +113,6 @@
 
 	g_debug("System timezone is: %s", current_timezone);
 
-	update_location_menu_items();
-
-	return;
-}
-
-static void
-quick_set_tz_cb (GObject *object, GAsyncResult *res, gpointer data)
-{
-  GError * error = NULL;
-  GVariant * answers = g_dbus_proxy_call_finish (G_DBUS_PROXY (object), res, &error);
-
-  if (error != NULL) {
-    g_warning("Could not set timezone using timedated: %s", error->message);
-    g_clear_error (&error);
-    return;
-  }
-
-  g_variant_unref (answers);
-}
-
-static void
-quick_set_tz_proxy_cb (GObject *object, GAsyncResult *res, gpointer zone)
-{
-	GError * error = NULL;
-
-	GDBusProxy * proxy = g_dbus_proxy_new_for_bus_finish (res, &error);
-
-	if (error != NULL) {
-		g_warning("Could not grab DBus proxy for timedated: %s", error->message);
-		g_clear_error (&error);
-		g_free (zone);
-		return;
-	}
-
-	g_dbus_proxy_call (proxy, "SetTimezone", g_variant_new ("(sb)", zone, TRUE),
-	                   G_DBUS_CALL_FLAGS_NONE, -1, NULL, quick_set_tz_cb, NULL);
-	g_free (zone);
-	g_object_unref (proxy);
-}
-
-static void
-quick_set_tz (DbusmenuMenuitem * menuitem, guint timestamp, gpointer user_data)
-{
-	const gchar * tz = dbusmenu_menuitem_property_get(menuitem, TIMEZONE_MENUITEM_PROP_ZONE);
-	g_debug("Quick setting timezone to: %s", tz);
-
-	g_return_if_fail(tz != NULL);
-
-	const gchar * name = dbusmenu_menuitem_property_get(menuitem, TIMEZONE_MENUITEM_PROP_NAME);
-
-	/* Set it in gsettings so we don't lose user's preferred name */
-	GSettings * conf = g_settings_new (SETTINGS_INTERFACE);
-	gchar * tz_full = g_strdup_printf ("%s %s", tz, name);
-	g_settings_set_string (conf, SETTINGS_TIMEZONE_NAME_S, tz_full);
-	g_free (tz_full);
-	g_object_unref (conf);
-
-	g_dbus_proxy_new_for_bus (G_BUS_TYPE_SYSTEM, G_DBUS_PROXY_FLAGS_NONE, NULL,
-	                          "org.freedesktop.timedate1",
-	                          "/org/freedesktop/timedate1",
-	                          "org.freedesktop.timedate1",
-	                          NULL, quick_set_tz_proxy_cb, g_strdup (tz));
-
 	return;
 }
 
@@ -989,13 +773,6 @@
 }
 
 static void
-show_locations_changed (void)
-{
-	/* Re-calculate */
-	update_location_menu_items();
-}
-
-static void
 time_format_changed (void)
 {
 	update_appointment_menu_items(NULL);
@@ -1035,11 +812,6 @@
 		dbusmenu_menuitem_property_set_bool (locations_separator, DBUSMENU_MENUITEM_PROP_VISIBLE, FALSE);
 		dbusmenu_menuitem_child_append(root, locations_separator);
 
-		update_location_menu_items();
-	
-		g_signal_connect (conf, "changed::" SETTINGS_SHOW_LOCATIONS_S, G_CALLBACK (show_locations_changed), NULL);
-		g_signal_connect (conf, "changed::" SETTINGS_SHOW_DETECTED_S, G_CALLBACK (show_locations_changed), NULL);
-		g_signal_connect (conf, "changed::" SETTINGS_LOCATIONS_S, G_CALLBACK (show_locations_changed), NULL);
 		g_signal_connect (conf, "changed::" SETTINGS_SHOW_EVENTS_S, G_CALLBACK (show_events_changed), NULL);
 		g_signal_connect (conf, "changed::" SETTINGS_TIME_FORMAT_S, G_CALLBACK (time_format_changed), NULL);
 
@@ -1197,177 +969,6 @@
 }
 
 
-/****
-*****  GEOCLUE
-****/
-
-static void geo_start (void);
-static void geo_stop (void);
-static void geo_create_client (GeoclueMaster * master, GeoclueMasterClient * client, gchar * path, GError * error, gpointer user_data);
-static void geo_client_invalid (GeoclueMasterClient * client, gpointer user_data);
-
-static GeoclueMaster * geo_master = NULL;
-static GeoclueMasterClient * geo_client = NULL;
-static GeoclueAddress * geo_address = NULL;
-
-static void
-geo_set_timezone (const gchar * timezone)
-{
-	if (geo_timezone != timezone) {
-		g_clear_pointer (&geo_timezone, g_free);
-		geo_timezone = g_strdup (timezone);
-		g_debug("Geoclue timezone is: %s", timezone ? timezone : "(Null)");
-		update_location_menu_items();
-	}
-}
-
-/* Callback from getting the address */
-static void
-geo_address_cb (GeoclueAddress * address, int timestamp, GHashTable * addy_data, GeoclueAccuracy * accuracy, GError * error, gpointer user_data)
-{
-	if (error == NULL) {
-		geo_set_timezone (g_hash_table_lookup (addy_data, "timezone"));
-	} else {
-		g_warning("Unable to get Geoclue address: %s", error->message);
-		g_clear_error (&error);
-	}
-}
-
-/* Clean up the reference we kept to the address and make sure to
-   drop the signals incase someone else has one. */
-static void
-geo_address_clean (void)
-{
-	if (geo_address != NULL) {
-		g_signal_handlers_disconnect_by_func (geo_address, geo_address_cb, NULL);
-		g_clear_object (&geo_address);
-	}
-}
-
-/* Clean up and remove all signal handlers from the client as we
-   unreference it as well. */
-static void
-geo_client_clean (void)
-{
-	if (geo_client != NULL) {
-		g_signal_handlers_disconnect_by_func (geo_client, geo_client_invalid, NULL);
-		g_clear_object (&geo_client);
-	}
-}
-
-/* Callback from creating the address */
-static void
-geo_create_address (GeoclueMasterClient * master, GeoclueAddress * address, GError * error, gpointer user_data)
-{
-	if (error != NULL) {
-		g_warning("Unable to create GeoClue address: %s", error->message);
-		g_clear_error (&error);
-		return;
-	}
-
-	/* We shouldn't have created a new address if we already had one
-	   so this is a warning.  But, it really is only a mem-leak so we
-	   don't need to error out. */
-	g_warn_if_fail(geo_address == NULL);
-	geo_address_clean();
-
-	g_debug("Created Geoclue Address");
-	geo_address = g_object_ref (address);
-
-	geoclue_address_get_address_async (geo_address, geo_address_cb, NULL);
-
-	g_signal_connect (address, "address-changed", G_CALLBACK(geo_address_cb), NULL);
-}
-
-/* Callback from setting requirements */
-static void
-geo_req_set (GeoclueMasterClient * master, GError * error, gpointer user_data)
-{
-	if (error != NULL) {
-		g_warning("Unable to set Geoclue requirements: %s", error->message);
-		g_clear_error (&error);
-	}
-}
-
-/* Client is killing itself rather oddly */
-static void
-geo_client_invalid (GeoclueMasterClient * client, gpointer user_data)
-{
-	g_warning("Master client invalid, rebuilding.");
-	geo_stop ();
-	geo_start ();
-}
-
-static void
-geo_stop (void)
-{
-	geo_set_timezone (NULL);
-
-	geo_address_clean ();
-	geo_client_clean ();
-	g_clear_object (&geo_master);
-}
-
-static void
-geo_start (void)
-{
-	g_warn_if_fail (geo_master == NULL);
-
-	g_clear_object (&geo_master);
-	geo_master = geoclue_master_get_default();
-	geoclue_master_create_client_async (geo_master, geo_create_client, NULL);
-}
-
-/* Callback from creating the client */
-static void
-geo_create_client (GeoclueMaster * master, GeoclueMasterClient * client, gchar * path, GError * error, gpointer user_data)
-{
-	g_debug("Created Geoclue client at: %s", path);
-
-	geo_client = client;
-
-	if (error != NULL) {
-		g_warning("Unable to get a GeoClue client!  '%s'  Geolocation based timezone support will not be available.", error->message);
-		g_clear_error (&error);
-		return;
-	}
-
-	if (client == NULL) {
-		g_warning(_("Unable to get a GeoClue client!  Geolocation based timezone support will not be available."));
-		return;
-	}
-
-	g_object_ref (geo_client);
-
-	/* New client, make sure we don't have an address hanging on */
-	geo_address_clean();
-
-	geoclue_master_client_set_requirements_async(geo_client,
-	                                             GEOCLUE_ACCURACY_LEVEL_REGION,
-	                                             0,
-	                                             FALSE,
-	                                             GEOCLUE_RESOURCE_ALL,
-	                                             geo_req_set,
-	                                             NULL);
-
-	geoclue_master_client_create_address_async(geo_client, geo_create_address, NULL);
-
-	g_signal_connect(client, "invalidated", G_CALLBACK(geo_client_invalid), NULL);
-}
-
-static void
-on_use_geoclue_changed_cb (GSettings * settings, gchar * key, gpointer unused G_GNUC_UNUSED)
-{
-	geo_stop ();
-
-	if (g_settings_get_boolean (conf, SETTINGS_SHOW_DETECTED_S))
-		geo_start ();
-}
-
-/****
-*****
-****/
-
 static gboolean
 get_greeter_mode (void)
 {
@@ -1447,8 +1048,6 @@
 
 	/* Set up GSettings */
 	conf = g_settings_new(SETTINGS_INTERFACE);
-	g_signal_connect (conf, "changed::show-auto-detected-location",
-                          G_CALLBACK(on_use_geoclue_changed_cb), NULL);
 	// TODO Add a signal handler to catch other gsettings changes and respond to them
 
 	/* Build our list of appointment calendar sources.
@@ -1474,10 +1073,6 @@
 	/* Cache the timezone */
 	update_current_timezone();
 
-	/* Setup geoclue */
-	if (g_settings_get_boolean (conf, SETTINGS_SHOW_DETECTED_S))
-		geo_start ();
-
 	/* Setup dbus interface */
 	dbus = g_object_new(DATETIME_INTERFACE_TYPE, NULL);
 
@@ -1515,7 +1110,5 @@
 
 	icaltimezone_free_builtin_timezones();
 
-	geo_stop ();
-
 	return 0;
 }
--- a/src/dbus-shared.h
+++ b/src/dbus-shared.h
@@ -38,5 +38,4 @@
 
 #define TIMEZONE_MENUITEM_TYPE             "timezone-item"	
 #define TIMEZONE_MENUITEM_PROP_ZONE        "timezone-zone"	
-#define TIMEZONE_MENUITEM_PROP_NAME        "timezone-name"
 #define TIMEZONE_MENUITEM_PROP_RADIO       "timezone-radio"
--- a/src/indicator-datetime.c
+++ b/src/indicator-datetime.c
@@ -1130,9 +1130,6 @@
 timezone_update_labels (indicator_item_t * mi_data)
 {
 	const gchar * zone = dbusmenu_menuitem_property_get(mi_data->mi, TIMEZONE_MENUITEM_PROP_ZONE);
-	const gchar * name = dbusmenu_menuitem_property_get(mi_data->mi, TIMEZONE_MENUITEM_PROP_NAME);
-
-	gtk_label_set_text(GTK_LABEL(mi_data->label), name);
 
 	/* Show current time in that zone on the right */
 	GTimeZone * tz = g_time_zone_new(zone);
@@ -1181,8 +1178,6 @@
 		}
 	} else if (!g_strcmp0(prop, TIMEZONE_MENUITEM_PROP_ZONE)) {
 		timezone_update_labels(mi_data);
-	} else if (!g_strcmp0(prop, TIMEZONE_MENUITEM_PROP_NAME)) {
-		timezone_update_labels(mi_data);
 	} else if (!g_strcmp0(prop, TIMEZONE_MENUITEM_PROP_RADIO)) {
 		gtk_check_menu_item_set_active(GTK_CHECK_MENU_ITEM(mi_data->gmi), g_variant_get_boolean(value));
 	}
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -54,8 +54,6 @@
 if BUILD_CCPANEL
 libindicator_datetime_la_SOURCES =\
 	datetime-prefs.c \
-	datetime-prefs-locations.c \
-	datetime-prefs-locations.h \
 	timedate1.c \
 	timedate1.h \
 	utils.c \
--- a/src/settings-shared.h
+++ b/src/settings-shared.h
@@ -32,10 +32,6 @@
 #define SETTINGS_SHOW_CALENDAR_S        "show-calendar"
 #define SETTINGS_SHOW_WEEK_NUMBERS_S    "show-week-numbers"
 #define SETTINGS_SHOW_EVENTS_S          "show-events"
-#define SETTINGS_SHOW_LOCATIONS_S       "show-locations"
-#define SETTINGS_SHOW_DETECTED_S        "show-auto-detected-location"
-#define SETTINGS_LOCATIONS_S            "locations"
-#define SETTINGS_TIMEZONE_NAME_S        "timezone-name"
 
 enum {
 	SETTINGS_TIME_LOCALE = 0,
--- a/src/utils.c
+++ b/src/utils.c
@@ -51,73 +51,6 @@
 	return TRUE;
 }
 
-void
-split_settings_location (const gchar * location, gchar ** zone, gchar ** name)
-{
-  gchar * location_dup = g_strdup (location);
-  gchar * first = strchr (location_dup, ' ');
-
-  if (first) {
-    first[0] = 0;
-  }
-
-  if (zone) {
-    *zone = location_dup;
-  }
-
-  if (name) {
-    gchar * after = first ? g_strstrip (first + 1) : NULL;
-    if (after == NULL || after[0] == 0) {
-      /* Make up name from zone */
-      gchar * chr = strrchr (location_dup, '/');
-      after = g_strdup (chr ? chr + 1 : location_dup);
-      while ((chr = strchr (after, '_')) != NULL) { /* and turn underscores to spaces */
-        *chr = ' ';
-      }
-      *name = after;
-    }
-    else {
-      *name = g_strdup (after);
-    }
-  }
-}
-
-gchar *
-get_current_zone_name (const gchar * location)
-{
-  gchar * new_zone, * new_name;
-  gchar * old_zone, * old_name;
-  gchar * rv;
-
-  split_settings_location (location, &new_zone, &new_name);
-
-  GSettings * conf = g_settings_new (SETTINGS_INTERFACE);
-  gchar * tz_name = g_settings_get_string (conf, SETTINGS_TIMEZONE_NAME_S);
-  split_settings_location (tz_name, &old_zone, &old_name);
-  g_free (tz_name);
-  g_object_unref (conf);
-
-  // new_name is always just a sanitized version of a timezone.
-  // old_name is potentially a saved "pretty" version of a timezone name from
-  // geonames.  So we prefer to use it if available and the zones match.
-
-  if (g_strcmp0 (old_zone, new_zone) == 0) {
-    rv = old_name;
-    old_name = NULL;
-  }
-  else {
-    rv = new_name;
-    new_name = NULL;
-  }
-
-  g_free (new_zone);
-  g_free (old_zone);
-  g_free (new_name);
-  g_free (old_name);
-
-  return rv;
-}
-
 gchar *
 read_timezone ()
 {
--- a/src/utils.h
+++ b/src/utils.h
@@ -28,8 +28,6 @@
 G_BEGIN_DECLS
 
 gboolean is_locale_12h (void);
-void split_settings_location (const gchar * location, gchar ** zone, gchar ** name);
-gchar * get_current_zone_name (const gchar * location);
 gchar * read_timezone ();
 gchar * generate_format_string_full (gboolean show_day, gboolean show_date);
 gchar * generate_format_string_at_time (GDateTime * time);
