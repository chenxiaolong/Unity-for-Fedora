=== modified file 'cmake/CompizGSettings.cmake'
--- cmake/CompizGSettings.cmake	2012-07-29 03:23:28 +0000
+++ cmake/CompizGSettings.cmake	2012-09-01 07:19:22 +0000
@@ -63,6 +63,7 @@
     find_program (PKG_CONFIG_TOOL pkg-config)
     find_program (GLIB_COMPILE_SCHEMAS glib-compile-schemas)
     mark_as_advanced (FORCE PKG_CONFIG_TOOL)
+    mark_as_advanced (GLIB_COMPILE_SCHEMAS)
 
     # find out where schemas need to go if we are installing them systemwide
     execute_process (COMMAND ${PKG_CONFIG_TOOL} glib-2.0 --variable prefix  OUTPUT_VARIABLE GSETTINGS_GLIB_PREFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
@@ -107,12 +108,16 @@
 
 function (add_gsettings_schema_to_recompilation_list _target_name_for_schema)
 
+    find_program (GLIB_COMPILE_SCHEMAS glib-compile-schemas)
+    mark_as_advanced (GLIB_COMPILE_SCHEMAS)
+
     get_property (GSETTINGS_LOCAL_COMPILE_TARGET_SET
 		  GLOBAL
 		  PROPERTY GSETTINGS_LOCAL_COMPILE_TARGET_SET
 		  SET)
 
-    if (NOT GSETTINGS_LOCAL_COMPILE_TARGET_SET)
+    if (NOT GSETTINGS_LOCAL_COMPILE_TARGET_SET AND
+	GLIB_COMPILE_SCHEMAS)
 
 	add_custom_command (OUTPUT ${CMAKE_BINARY_DIR}/generated/glib-2.0/schemas/gschemas.compiled
 			   COMMAND ${GLIB_COMPILE_SCHEMAS} --targetdir=${CMAKE_BINARY_DIR}/generated/glib-2.0/schemas/
@@ -127,7 +132,8 @@
 		      PROPERTY GSETTINGS_LOCAL_COMPILE_TARGET_SET
 		      TRUE)
 
-    endif (NOT GSETTINGS_LOCAL_COMPILE_TARGET_SET)
+    endif (NOT GSETTINGS_LOCAL_COMPILE_TARGET_SET AND
+	   GLIB_COMPILE_SCHEMAS)
 
     add_dependencies (compiz_gsettings_compile_local
 		      ${_target_name_for_schema})

=== modified file 'gtk/window-decorator/CMakeLists.txt'
--- gtk/window-decorator/CMakeLists.txt	2012-05-24 00:55:17 +0000
+++ gtk/window-decorator/CMakeLists.txt	2012-09-01 07:19:22 +0000
@@ -23,6 +23,32 @@
 	${COMPIZ_LINK_DIRS}
     )
 
+    add_library (gtk_window_decorator_settings_interface STATIC
+                 ${CMAKE_CURRENT_SOURCE_DIR}/gwd-settings-interface.c)
+
+    add_library (gtk_window_decorator_settings STATIC
+                 ${CMAKE_CURRENT_SOURCE_DIR}/gwd-settings.c)
+
+    add_library (gtk_window_decorator_settings_storage_interface STATIC
+                 ${CMAKE_CURRENT_SOURCE_DIR}/gwd-settings-storage-interface.c)
+
+    add_library (gtk_window_decorator_settings_storage_xproperty_interface STATIC
+                 ${CMAKE_CURRENT_SOURCE_DIR}/gwd-settings-xproperty-interface.c)
+
+    add_library (gtk_window_decorator_settings_writable_interface STATIC
+                 ${CMAKE_CURRENT_SOURCE_DIR}/gwd-settings-writable-interface.c)
+
+    add_library (gtk_window_decorator_settings_notified_interface
+                 ${CMAKE_CURRENT_SOURCE_DIR}/gwd-settings-notified-interface.c)
+
+    set (GTK_WINDOW_DECORATOR_ADDITIONAL_LIBRARIES
+         gtk_window_decorator_settings_notified_interface
+         gtk_window_decorator_settings_interface
+         gtk_window_decorator_settings_writable_interface
+         gtk_window_decorator_settings
+         gtk_window_decorator_settings_storage_interface
+         gtk_window_decorator_settings_storage_xproperty_interface)
+
     if (USE_GCONF)
         set (gwd_schema ${CMAKE_CURRENT_BINARY_DIR}/gwd.schemas)
         compiz_translate_xml (
@@ -30,8 +56,45 @@
 	    ${gwd_schema}
 	)
 	compiz_install_gconf_schema (${CMAKE_CURRENT_BINARY_DIR}/gwd.schemas ${SCHEMADIR})
+        add_library (gtk_window_decorator_settings_storage_gconf STATIC
+                     ${CMAKE_CURRENT_SOURCE_DIR}/gwd-settings-storage-gconf.c)
+        list (APPEND GTK_WINDOW_DECORATOR_ADDITIONAL_LIBRARIES
+              gtk_window_decorator_settings_storage_gconf)
     endif (USE_GCONF)
 
+    if (USE_GSETTINGS)
+        add_definitions (-DUSE_GSETTINGS)
+        add_library (gtk_window_decorator_settings_storage_gsettings STATIC
+                     ${CMAKE_CURRENT_SOURCE_DIR}/gwd-settings-storage-gsettings.c)
+
+        compiz_pkg_check_modules (GSETTINGS gio-2.0 glib-2.0)
+
+        target_link_libraries (gtk_window_decorator_settings_storage_gsettings
+                               ${GSETTINGS_LIBRARIES})
+
+        list (APPEND GTK_WINDOW_DECORATOR_ADDITIONAL_LIBRARIES
+              gtk_window_decorator_settings_storage_gsettings)
+
+        set (_gwd_gschema_name org.compiz.gwd)
+        set (_gwd_gschema_filename ${_gwd_gschema_name}.gschema.xml)
+        set (_gwd_gschema_filepath ${CMAKE_CURRENT_SOURCE_DIR}/${_gwd_gschema_filename})
+        set (_gwd_gschema_generated_location ${CMAKE_BINARY_DIR}/generated/glib-2.0/schemas/${_gwd_gschema_filename})
+        set (_gwd_gschema_dest ${CMAKE_INSTALL_PREFIX}/share/glib-2.0/schemas/)
+
+        add_custom_command (OUTPUT ${_gwd_gschema_generated_location}
+                            COMMAND cp -r ${_gwd_gschema_filepath} ${_gwd_gschema_generated_location}
+                            DEPENDS ${_gwd_gschema_filepath}
+                            VERBATIM)
+
+        add_custom_target (compiz_gwd_gsettings_org_compiz_gwd_schema ALL
+                           DEPENDS ${_gwd_gschema_generated_location})
+
+        add_gsettings_schema_to_recompilation_list (compiz_gwd_gsettings_org_compiz_gwd_schema)
+
+        compiz_install_gsettings_schema (${_gwd_gschema_generated_location}
+                                         ${_gwd_gschema_dest})
+    endif (USE_GSETTINGS)
+
     add_executable (gtk-window-decorator
 	gtk-window-decorator.c
 	blurprops.c
@@ -50,6 +113,8 @@
 	style.c
 	wnck.c
 	decorator.c
+        ${CMAKE_CURRENT_SOURCE_DIR}/gwd-settings-xproperty-storage.c
+        ${CMAKE_CURRENT_SOURCE_DIR}/gwd-settings-notified.c
 	${gwd_schema}
     )
 
@@ -62,11 +127,12 @@
 
     target_link_libraries (
 	gtk-window-decorator
-	decoration
+        decoration
 	${GTK_WINDOW_DECORATOR_LIBRARIES}
 	${GCONF_LIBRARIES}
 	${DBUS_GLIB_LIBRARIES}
 	${metacitylibs}
+	${GTK_WINDOW_DECORATOR_ADDITIONAL_LIBRARIES}
     )
 
     install (
@@ -74,6 +140,9 @@
 	DESTINATION ${exec_prefix}
     )
 
+    if (COMPIZ_BUILD_TESTING)
+	add_subdirectory (tests)
+    endif (COMPIZ_BUILD_TESTING)
 
 endif (USE_GTK)
 

=== modified file 'gtk/window-decorator/blurprops.c'
--- gtk/window-decorator/blurprops.c	2011-02-21 09:53:08 +0000
+++ gtk/window-decorator/blurprops.c	2012-09-01 07:19:22 +0000
@@ -37,14 +37,17 @@
     Display *xdisplay = GDK_DISPLAY_XDISPLAY (gdk_display_get_default ());
     long    *data = NULL;
     int     size = 0;
+    gint    blur_type;
+
+    g_object_get (settings, "blur", &blur_type, NULL);
     
-    if (settings->blur_type != BLUR_TYPE_ALL)
+    if (blur_type != BLUR_TYPE_ALL)
     {
 	bottom_region = NULL;
 	left_region   = NULL;
 	right_region  = NULL;
 	
-	if (settings->blur_type != BLUR_TYPE_TITLEBAR)
+	if (blur_type != BLUR_TYPE_TITLEBAR)
 	    top_region = NULL;
     }
 

=== modified file 'gtk/window-decorator/cairo.c'
--- gtk/window-decorator/cairo.c	2012-08-05 11:26:41 +0000
+++ gtk/window-decorator/cairo.c	2012-09-01 07:19:22 +0000
@@ -354,7 +354,7 @@
     {
 	decor_color_t *title_color = _title_color;
 
-	alpha = settings->decoration_alpha + 0.3;
+	alpha = decoration_alpha + 0.3;
 
 	fill_rounded_rectangle (cr,
 				x1 + 0.5,
@@ -386,7 +386,7 @@
     }
     else
     {
-	alpha = settings->decoration_alpha;
+	alpha = decoration_alpha;
 
 	fill_rounded_rectangle (cr,
 				x1 + 0.5,

=== modified file 'gtk/window-decorator/decorator.c'
--- gtk/window-decorator/decorator.c	2012-05-27 11:25:24 +0000
+++ gtk/window-decorator/decorator.c	2012-09-01 07:19:22 +0000
@@ -118,7 +118,11 @@
 static const PangoFontDescription *
 get_titlebar_font (decor_frame_t *frame)
 {
-    if (settings->use_system_font)
+    const gchar *titlebar_font;
+    g_object_get (settings, "titlebar-font", &titlebar_font, NULL);
+
+    /* Using system font */
+    if (!titlebar_font)
 	return NULL;
     else
 	return frame->titlebar_font;
@@ -773,12 +777,12 @@
     /* create shadow from opaque decoration
      * FIXME: Should not modify settings value
      * like this */
-    save_decoration_alpha = settings->decoration_alpha;
-    settings->decoration_alpha = 1.0;
+    save_decoration_alpha = decoration_alpha;
+    decoration_alpha = 1.0;
 
     (*d.draw) (&d);
 
-    settings->decoration_alpha = save_decoration_alpha;
+    decoration_alpha = save_decoration_alpha;
 
     XRenderFillRectangle (xdisplay, PictOpSrc, picture, &white,
 			  c->left_space,
@@ -1034,45 +1038,25 @@
 cairo_get_shadow (decor_frame_t *d, decor_shadow_options_t *opts, gboolean active)
 {
     if (active)
-    {
-	memcpy (opts->shadow_color, settings->active_shadow_color, sizeof (settings->active_shadow_color));
-	opts->shadow_radius = settings->active_shadow_radius;
-	opts->shadow_offset_x = settings->active_shadow_offset_x;
-	opts->shadow_offset_y = settings->active_shadow_offset_y;
-	opts->shadow_opacity = settings->active_shadow_opacity;
-    }
-    /* TODO: Inactive shadows */
+	g_object_get (settings, "active-shadow", &opts, NULL);
     else
-    {
-	memcpy (opts->shadow_color, settings->inactive_shadow_color, sizeof (settings->inactive_shadow_color));
-	opts->shadow_radius = settings->inactive_shadow_radius;
-	opts->shadow_offset_x = settings->inactive_shadow_offset_x;
-	opts->shadow_offset_y = settings->inactive_shadow_offset_y;
-	opts->shadow_opacity = settings->inactive_shadow_opacity;
-    }
+	g_object_get (settings, "inactive-shadow", &opts, NULL);
 }
 
 void
 meta_get_shadow (decor_frame_t *frame, decor_shadow_options_t *opts, gboolean active)
 {
+    decor_shadow_options_t *setting_opts = NULL;
+
     if (active)
-    {
-	memcpy (opts->shadow_color, settings->active_shadow_color, sizeof (settings->active_shadow_color));
-	opts->shadow_radius = settings->active_shadow_radius;
-	opts->shadow_offset_x = settings->active_shadow_offset_x;
-	opts->shadow_offset_y = settings->active_shadow_offset_y;
-	opts->shadow_opacity = settings->active_shadow_opacity;
-    }
-    /* TODO: Inactive shadows */
+	g_object_get (settings, "active-shadow", &setting_opts, NULL);
     else
+	g_object_get (settings, "inactive-shadow", &setting_opts, NULL);
+
+    if (setting_opts)
     {
-	memcpy (opts->shadow_color, settings->inactive_shadow_color, sizeof (settings->inactive_shadow_color));
-	opts->shadow_radius = settings->inactive_shadow_radius;
-	opts->shadow_offset_x = settings->inactive_shadow_offset_x;
-	opts->shadow_offset_y = settings->inactive_shadow_offset_y;
-	opts->shadow_opacity = settings->inactive_shadow_opacity;
+	memcpy (opts, setting_opts, sizeof (decor_shadow_options_t));
     }
-
 }
 
 int

=== modified file 'gtk/window-decorator/events.c'
--- gtk/window-decorator/events.c	2012-07-30 08:50:38 +0000
+++ gtk/window-decorator/events.c	2012-09-01 07:19:22 +0000
@@ -85,8 +85,11 @@
 {
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
     guint   state = d->button_states[button];
-
-    if (settings->use_tooltips)
+    gboolean use_tooltips = FALSE;
+
+    g_object_get (settings, "use-tooltips", &use_tooltips, NULL);
+
+    if (use_tooltips)
 	handle_tooltip_event (win, gtkwd_event, gtkwd_type, state, tooltip);
 
     if (d->frame_window && gtkwd_type == GEnterNotify)
@@ -417,7 +420,11 @@
 handle_mouse_wheel_title_event (WnckWindow   *win,
 				unsigned int button)
 {
-    switch (settings->wheel_action) {
+    gint wheel_action = WHEEL_ACTION_NONE;
+
+    g_object_get (settings, "mouse-wheel-action", &wheel_action, NULL);
+
+    switch (wheel_action) {
     case WHEEL_ACTION_SHADE:
 	if (button == 4)
 	{
@@ -442,6 +449,7 @@
 {
     static Window last_button_xwindow = None;
     static Time	  last_button_time = 0;
+    gint	  titlebar_action = 0;
 
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
@@ -466,7 +474,8 @@
 	    dist (gtkwd_event->x, gtkwd_event->y,
 		  last_button_x, last_button_y) < DOUBLE_CLICK_DISTANCE)
 	{
-	    handle_title_button_event (win, settings->double_click_action,
+	    g_object_get (settings, "titlebar-double-click-action", &titlebar_action, NULL);
+	    handle_title_button_event (win, titlebar_action,
 				       gtkwd_event);
 
 	    last_button_num	= 0;
@@ -490,12 +499,14 @@
     }
     else if (gtkwd_event->button == 2)
     {
-	handle_title_button_event (win, settings->middle_click_action,
+	g_object_get (settings, "titlebar-middle-click-action", &titlebar_action, NULL);
+	handle_title_button_event (win, titlebar_action,
 				   gtkwd_event);
     }
     else if (gtkwd_event->button == 3)
     {
-	handle_title_button_event (win, settings->right_click_action,
+	g_object_get (settings, "titlebar-right-click-action", &titlebar_action, NULL);
+	handle_title_button_event (win, titlebar_action,
 				   gtkwd_event);
     }
     else if (gtkwd_event->button == 4 ||
@@ -511,7 +522,7 @@
 		    decor_event      *gtkwd_event,
 		    decor_event_type gtkwd_type)
 {
-
+    gint    titlebar_action = 0;
     decor_t *d = g_object_get_data (G_OBJECT (win), "decor");
 
     if (d->frame_window && gtkwd_type == GEnterNotify)
@@ -564,11 +575,13 @@
 	restack_window (win, Above);
 	break;
     case 2:
-	handle_title_button_event (win, settings->middle_click_action,
+	g_object_get (settings, "titlebar-middle-click-action", &titlebar_action, NULL);
+	handle_title_button_event (win, titlebar_action,
 				   gtkwd_event);
 	break;
     case 3:
-	handle_title_button_event (win, settings->right_click_action,
+	g_object_get (settings, "titlebar-right-click-action", &titlebar_action, NULL);
+	handle_title_button_event (win, titlebar_action,
 				   gtkwd_event);
 	break;
     }
@@ -982,7 +995,7 @@
 	    
 	    if (screen)
 	    {
-		if (shadow_property_changed (screen))
+		if (gwd_process_decor_shadow_property_update ())
 		    decorations_changed (screen);
 	    }
 	}

=== modified file 'gtk/window-decorator/frames.c'
--- gtk/window-decorator/frames.c	2011-10-13 09:53:38 +0000
+++ gtk/window-decorator/frames.c	2012-09-01 07:19:22 +0000
@@ -42,11 +42,13 @@
     update_style (frame->style_window_rgba);
     update_style (frame->style_window_rgb);
 
-    gchar *str = settings->font;
-
-    set_frame_scale (frame, str);
-
-    str = NULL;
+    const gchar *titlebar_font = NULL;
+
+    g_object_get (settings, "titlebar-font", &titlebar_font, NULL);
+
+    set_frame_scale (frame, titlebar_font);
+
+    titlebar_font = NULL;
 
     frame_update_titlebar_font (frame);
 

=== modified file 'gtk/window-decorator/gtk-window-decorator.c'
--- gtk/window-decorator/gtk-window-decorator.c	2012-05-10 15:40:25 +0000
+++ gtk/window-decorator/gtk-window-decorator.c	2012-09-01 07:19:22 +0000
@@ -24,13 +24,25 @@
  */
 
 #include "gtk-window-decorator.h"
+#include "gwd-settings-writable-interface.h"
+#include "gwd-settings.h"
+#include "gwd-settings-notified-interface.h"
+#include "gwd-settings-notified.h"
+
+GWDSettingsNotified *notified;
+GWDSettingsWritable *writable;
+GWDSettings	    *settings;
+
+gdouble decoration_alpha = 0.5;
+#ifdef USE_METACITY
+MetaButtonLayout meta_button_layout;
+gboolean	 meta_button_layout_set = FALSE;
+#endif
 
 gboolean minimal = FALSE;
 
 #define SWITCHER_SPACE 40
 
-guint cmdline_options = 0;
-
 GdkPixmap *decor_normal_pixmap = NULL;
 GdkPixmap *decor_active_pixmap = NULL;
 
@@ -126,8 +138,6 @@
 XRenderPictFormat *xformat_rgba;
 XRenderPictFormat *xformat_rgb;
 
-decor_settings_t *settings;
-
 const gchar * window_type_frames[WINDOW_TYPE_FRAMES_NUM] = {
     "normal", "modal_dialog", "dialog", "menu", "utility"
 };
@@ -147,59 +157,17 @@
     GList	  *windows, *win;
     decor_frame_t *bare_p, *switcher_p;
 
-#ifdef USE_METACITY
-    char       *meta_theme = NULL;
-    MetaTheme  *theme = NULL;
-#endif
+    const char *option_meta_theme = NULL;
+    gint       option_blur_type = 0;
 
     program_name = argv[0];
 
-    settings = malloc (sizeof (decor_settings_t));
-
-    if (!settings)
-	return 1;
-
     gtk_init (&argc, &argv);
 
     bindtextdomain (GETTEXT_PACKAGE, LOCALEDIR);
     bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
     textdomain (GETTEXT_PACKAGE);
 
-    settings->blur_type = BLUR_TYPE_NONE;
-    settings->use_system_font = FALSE;
-
-    settings->active_shadow_radius   = SHADOW_RADIUS;
-    settings->active_shadow_opacity  = SHADOW_OPACITY;
-    settings->active_shadow_color[0] = SHADOW_COLOR_RED;
-    settings->active_shadow_color[1] = SHADOW_COLOR_GREEN;
-    settings->active_shadow_color[2] = SHADOW_COLOR_BLUE;
-    settings->active_shadow_offset_x = SHADOW_OFFSET_X;
-    settings->active_shadow_offset_y = SHADOW_OFFSET_Y;
-    settings->inactive_shadow_radius   = SHADOW_RADIUS;
-    settings->inactive_shadow_opacity  = SHADOW_OPACITY;
-    settings->inactive_shadow_color[0] = SHADOW_COLOR_RED;
-    settings->inactive_shadow_color[1] = SHADOW_COLOR_GREEN;
-    settings->inactive_shadow_color[2] = SHADOW_COLOR_BLUE;
-    settings->inactive_shadow_offset_x = SHADOW_OFFSET_X;
-    settings->inactive_shadow_offset_y = SHADOW_OFFSET_Y;
-    settings->decoration_alpha = 0.5;
-    settings->use_tooltips = TRUE;
-
-#ifdef USE_METACITY
-
-    settings->meta_opacity              = META_OPACITY;
-    settings->meta_shade_opacity        = META_SHADE_OPACITY;
-    settings->meta_active_opacity       = META_ACTIVE_OPACITY;
-    settings->meta_active_shade_opacity = META_ACTIVE_SHADE_OPACITY;
-
-    settings->meta_button_layout_set = FALSE;
-#endif
-
-    settings->font = strdup ("Sans Bold 12");
-
-    settings->mutter_draggable_border_width = 10;
-    settings->mutter_attach_modal_dialogs = FALSE;
-
     for (i = 0; i < argc; i++)
     {
 	if (strcmp (argv[i], "--minimal") == 0)
@@ -215,41 +183,17 @@
 	    if (argc > ++i)
 	    {
 		if (strcmp (argv[i], "titlebar") == 0)
-		    settings->blur_type = BLUR_TYPE_TITLEBAR;
+		    option_blur_type = BLUR_TYPE_TITLEBAR;
 		else if (strcmp (argv[i], "all") == 0)
-		    settings->blur_type = BLUR_TYPE_ALL;
+		    option_blur_type = BLUR_TYPE_ALL;
 	    }
-	    cmdline_options |= CMDLINE_BLUR;
 	}
 
 #ifdef USE_METACITY
-	else if (strcmp (argv[i], "--opacity") == 0)
-	{
-	    if (argc > ++i)
-		settings->meta_opacity = atof (argv[i]);
-	    cmdline_options |= CMDLINE_OPACITY;
-	}
-	else if (strcmp (argv[i], "--no-opacity-shade") == 0)
-	{
-	    settings->meta_shade_opacity = FALSE;
-	    cmdline_options |= CMDLINE_OPACITY_SHADE;
-	}
-	else if (strcmp (argv[i], "--active-opacity") == 0)
-	{
-	    if (argc > ++i)
-		settings->meta_active_opacity = atof (argv[i]);
-	    cmdline_options |= CMDLINE_ACTIVE_OPACITY;
-	}
-	else if (strcmp (argv[i], "--no-active-opacity-shade") == 0)
-	{
-	    settings->meta_active_shade_opacity = FALSE;
-	    cmdline_options |= CMDLINE_ACTIVE_OPACITY_SHADE;
-	}
 	else if (strcmp (argv[i], "--metacity-theme") == 0)
 	{
 	    if (argc > ++i)
-		meta_theme = argv[i];
-	    cmdline_options |= CMDLINE_THEME;
+		option_meta_theme = argv[i];
 	}
 #endif
 
@@ -261,10 +205,6 @@
 		     "[--blur none|titlebar|all] "
 
 #ifdef USE_METACITY
-		     "[--opacity OPACITY] "
-		     "[--no-opacity-shade] "
-		     "[--active-opacity OPACITY] "
-		     "[--no-active-opacity-shade] "
 		     "[--metacity-theme THEME] "
 #endif
 
@@ -344,46 +284,33 @@
 
     initialize_decorations ();
 
-    if (!init_settings (screen))
-    {
-	free (settings);
+    notified = gwd_settings_notified_impl_new (screen);
+
+    if (!notified)
+	return 1;
+
+    writable = GWD_SETTINGS_WRITABLE_INTERFACE (gwd_settings_impl_new (option_blur_type != BLUR_TYPE_NONE ? &option_blur_type : NULL,
+								       option_meta_theme ? &option_meta_theme : NULL,
+								       notified));
+
+    if (!writable)
+    {
+	g_object_unref (notified);
+	return 1;
+    }
+
+    settings = GWD_SETTINGS_INTERFACE (writable);
+
+    gwd_settings_writable_freeze_updates (writable);
+
+    if (!init_settings (writable,
+			screen))
+    {
+	g_object_unref (writable);
 	fprintf (stderr, "%s: Failed to get necessary gtk settings\n", argv[0]);
 	return 1;
     }
 
-    theme_draw_window_decoration    = draw_window_decoration;
-    theme_calc_decoration_size	    = calc_decoration_size;
-    theme_update_border_extents	    = update_border_extents;
-    theme_get_event_window_position = get_event_window_position;
-    theme_get_button_position       = get_button_position;
-    theme_get_title_scale	    = get_title_scale;
-    theme_get_shadow                = cairo_get_shadow;
-
-#ifdef USE_METACITY
-    if (meta_theme)
-    {
-	meta_theme_set_current (meta_theme, TRUE);
-
-	theme = meta_theme_get_current ();
-
-	if (!theme)
-	    g_warning ("specified a theme that does not exist! falling back to cairo decoration\n");
-    }
-    else
-	theme = meta_theme_get_current ();
-
-    if (theme)
-    {
-	theme_draw_window_decoration    = meta_draw_window_decoration;
-	theme_calc_decoration_size	    = meta_calc_decoration_size;
-	theme_update_border_extents	    = meta_update_border_extents;
-	theme_get_event_window_position = meta_get_event_window_position;
-	theme_get_button_position	    = meta_get_button_position;
-	theme_get_title_scale	    = meta_get_title_scale;
-	theme_get_shadow            = meta_get_shadow;
-    }
-#endif
-
     for (i = 0; i < 3; i++)
     {
 	for (j = 0; j < 3; j++)
@@ -402,6 +329,8 @@
 
     if (!create_tooltip_window ())
     {
+	g_object_unref (writable);
+
 	free (settings);
 	fprintf (stderr, "%s, Couldn't create tooltip window\n", argv[0]);
 	return 1;
@@ -445,16 +374,19 @@
  	connect_screen (screen);
     }
 
+    decor_set_dm_check_hint (xdisplay, gdk_screen_get_number (gdkscreen),
+			     WINDOW_DECORATION_TYPE_PIXMAP |
+			     WINDOW_DECORATION_TYPE_WINDOW);
+
+    /* Update the decorations based on the settings */
+    gwd_settings_writable_thaw_updates (writable);
+
     /* Keep the default, bare and switcher decorations around
      * since otherwise they will be spuriously recreated */
 
     bare_p = gwd_get_decor_frame ("bare");
     switcher_p = gwd_get_decor_frame ("switcher");
 
-    decor_set_dm_check_hint (xdisplay, gdk_screen_get_number (gdkscreen),
-			     WINDOW_DECORATION_TYPE_PIXMAP |
-			     WINDOW_DECORATION_TYPE_WINDOW);
-
     update_default_decorations (gdkscreen);
 
     gtk_main ();
@@ -481,9 +413,7 @@
     gwd_decor_frame_unref (bare_p);
     gwd_decor_frame_unref (switcher_p);
 
-    g_free (settings->font);
-
-    free (settings);
+    fini_settings ();
 
     return 0;
 }

=== modified file 'gtk/window-decorator/gtk-window-decorator.h'
--- gtk/window-decorator/gtk-window-decorator.h	2012-05-27 04:32:55 +0000
+++ gtk/window-decorator/gtk-window-decorator.h	2012-09-01 07:19:22 +0000
@@ -109,6 +109,8 @@
 #include <metacity-private/theme.h>
 #endif
 
+#include "gwd-settings-interface.h"
+
 #define METACITY_GCONF_DIR "/apps/metacity/general"
 #define MUTTER_GCONF_DIR "/apps/mutter/general"
 
@@ -223,72 +225,28 @@
 
 #define PROP_MOTIF_WM_HINT_ELEMENTS 3
 
+typedef struct _GWDSettingsWritable GWDSettingsWritable;
+typedef struct _GWDSettingsNotified GWDSettingsNotified;
+
 typedef struct {
 unsigned long flags;
 unsigned long functions;
 unsigned long decorations;
 } MwmHints;
 
-enum {
-    CLICK_ACTION_NONE,
-    CLICK_ACTION_SHADE,
-    CLICK_ACTION_MAXIMIZE,
-    CLICK_ACTION_MINIMIZE,
-    CLICK_ACTION_RAISE,
-    CLICK_ACTION_LOWER,
-    CLICK_ACTION_MENU
-};
-
-enum {
-    WHEEL_ACTION_NONE,
-    WHEEL_ACTION_SHADE
-};
-
-typedef struct _decor_settings {
-    int double_click_action;
-    int middle_click_action;
-    int right_click_action;
-    int wheel_action;
-    gdouble active_shadow_radius;
-    gdouble active_shadow_opacity;
-    gushort active_shadow_color[3];
-    gint    active_shadow_offset_x;
-    gint    active_shadow_offset_y;
-    gdouble inactive_shadow_radius;
-    gdouble inactive_shadow_opacity;
-    gushort inactive_shadow_color[3];
-    gint    inactive_shadow_offset_x;
-    gint    inactive_shadow_offset_y;
-#ifdef USE_METACITY
-    double   meta_opacity;
-    gboolean meta_shade_opacity;
-    double   meta_active_opacity;
-    gboolean meta_active_shade_opacity;
-
-    gboolean         meta_button_layout_set;
-    MetaButtonLayout meta_button_layout;
-#endif
-    double		    decoration_alpha;
-    gboolean		    use_system_font;
-    gint		    blur_type;
-    gchar		    *font;
-    guint    mutter_draggable_border_width;
-    gboolean mutter_attach_modal_dialogs;
-    gboolean use_tooltips;
-} decor_settings_t;
-
-#define DOUBLE_CLICK_ACTION_DEFAULT CLICK_ACTION_MAXIMIZE
-#define MIDDLE_CLICK_ACTION_DEFAULT CLICK_ACTION_LOWER
-#define RIGHT_CLICK_ACTION_DEFAULT  CLICK_ACTION_MENU
-#define WHEEL_ACTION_DEFAULT        WHEEL_ACTION_NONE
-
 extern gboolean minimal;
-extern decor_settings_t *settings;
-
 
 #define SWITCHER_SPACE 40
 
-extern guint cmdline_options;
+extern GWDSettingsNotified *notified;
+extern GWDSettings	   *settings;
+extern GWDSettingsWritable *writable;
+
+extern gdouble decoration_alpha;
+#ifdef USE_METACITY
+extern MetaButtonLayout   meta_button_layout;
+extern gboolean	          meta_button_layout_set;
+#endif
 
 extern Atom frame_input_window_atom;
 extern Atom frame_output_window_atom;
@@ -532,10 +490,6 @@
 extern GSList *draw_list;
 extern guint  draw_idle_id;
 
-#define BLUR_TYPE_NONE     0
-#define BLUR_TYPE_TITLEBAR 1
-#define BLUR_TYPE_ALL      2
-
 /* switcher */
 extern Window     switcher_selected_window;
 extern GtkWidget  *switcher_label;
@@ -672,9 +626,6 @@
 int
 update_shadow (void);
 
-gboolean
-shadow_property_changed (WnckScreen *screen);
-
 void
 update_titlebar_font ();
 
@@ -1181,7 +1132,7 @@
 
 void
 set_frame_scale (decor_frame_t *frame,
-		 gchar	       *font_str);
+		 const gchar *font_str);
 
 void
 set_frames_scales (gpointer key,
@@ -1189,6 +1140,12 @@
 		   gpointer user_data);
 
 gboolean
-init_settings (WnckScreen *screen);
+init_settings (GWDSettingsWritable *writable, WnckScreen *screen);
+
+void
+fini_settings ();
+
+gboolean
+gwd_process_decor_shadow_property_update ();
 
 #endif

=== added file 'gtk/window-decorator/gwd-settings-interface.c'
--- gtk/window-decorator/gwd-settings-interface.c	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-interface.c	2012-09-01 07:19:22 +0000
@@ -0,0 +1,162 @@
+#include "gwd-settings-interface.h"
+
+const gboolean USE_TOOLTIPS_DEFAULT = FALSE;
+
+const gdouble ACTIVE_SHADOW_RADIUS_DEFAULT = 8.0;
+const gdouble ACTIVE_SHADOW_OPACITY_DEFAULT = 0.5;
+const gint    ACTIVE_SHADOW_OFFSET_X_DEFAULT = 1;
+const gint    ACTIVE_SHADOW_OFFSET_Y_DEFAULT = 1;
+const gchar   *ACTIVE_SHADOW_COLOR_DEFAULT = "#00000000";
+
+const gdouble INACTIVE_SHADOW_RADIUS_DEFAULT = 8.0;
+const gdouble INACTIVE_SHADOW_OPACITY_DEFAULT = 0/5;
+const gint    INACTIVE_SHADOW_OFFSET_X_DEFAULT = 1;
+const gint    INACTIVE_SHADOW_OFFSET_Y_DEFAULT = 1;
+const gchar   *INACTIVE_SHADOW_COLOR_DEFAULT = "#00000000";
+
+const guint   DRAGGABLE_BORDER_WIDTH_DEFAULT = 7;
+const gboolean ATTACH_MODAL_DIALOGS_DEFAULT = FALSE;
+const gint    BLUR_TYPE_DEFAULT = BLUR_TYPE_NONE;
+
+const gchar   *METACITY_THEME_DEFAULT = "Adwaita";
+const gdouble METACITY_ACTIVE_OPACITY_DEFAULT = 1.0;
+const gdouble METACITY_INACTIVE_OPACITY_DEFAULT = 0.75;
+const gboolean METACITY_ACTIVE_SHADE_OPACITY_DEFAULT = TRUE;
+const gboolean METACITY_INACTIVE_SHADE_OPACITY_DEFAULT = TRUE;
+
+const gchar *  METACITY_BUTTON_LAYOUT_DEFAULT = ":minimize,maximize,close";
+
+const guint DOUBLE_CLICK_ACTION_DEFAULT = CLICK_ACTION_MAXIMIZE;
+const guint MIDDLE_CLICK_ACTION_DEFAULT = CLICK_ACTION_LOWER;
+const guint RIGHT_CLICK_ACTION_DEFAULT = CLICK_ACTION_MENU;
+const guint WHEEL_ACTION_DEFAULT = WHEEL_ACTION_NONE;
+
+const gchar * TITLEBAR_FONT_DEFAULT = "Sans 12";
+
+static void gwd_settings_interface_default_init (GWDSettingsInterface *settings_interface);
+
+G_DEFINE_INTERFACE (GWDSettings, gwd_settings_interface, G_TYPE_OBJECT);
+
+static void gwd_settings_interface_default_init (GWDSettingsInterface *settings_interface)
+{
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_pointer ("active-shadow",
+							       "Active Shadow",
+							       "Active Shadow Settings",
+							       G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_pointer ("inactive-shadow",
+							       "Inactive Shadow",
+							       "Inactive Shadow",
+							       G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_boolean ("use-tooltips",
+							       "Use Tooltips",
+							       "Use Tooltips Setting",
+							       USE_TOOLTIPS_DEFAULT,
+							       G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_int ("draggable-border-width",
+							   "Draggable Border Width",
+							   "Draggable Border Width Setting",
+							   0,
+							   64,
+							   DRAGGABLE_BORDER_WIDTH_DEFAULT,
+							   G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_boolean ("attach-modal-dialogs",
+							       "Attach modal dialogs",
+							       "Attach modal dialogs setting",
+							       ATTACH_MODAL_DIALOGS_DEFAULT,
+							       G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_int ("blur",
+							   "Blur Type",
+							   "Blur type property",
+							   BLUR_TYPE_NONE,
+							   BLUR_TYPE_ALL,
+							   BLUR_TYPE_NONE,
+							   G_PARAM_READABLE |
+							   G_PARAM_WRITABLE |
+							   G_PARAM_CONSTRUCT_ONLY));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_string ("metacity-theme",
+							      "Metacity Theme",
+							      "Metacity Theme Setting",
+							      METACITY_THEME_DEFAULT,
+							      G_PARAM_READABLE |
+							      G_PARAM_WRITABLE |
+							      G_PARAM_CONSTRUCT_ONLY));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_double ("metacity-active-opacity",
+							      "Metacity Active Opacity",
+							      "Metacity Active Opacity",
+							      0.0,
+							      1.0,
+							      METACITY_ACTIVE_OPACITY_DEFAULT,
+							      G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_double ("metacity-inactive-opacity",
+							      "Metacity Inactive Opacity",
+							      "Metacity Inactive Opacity",
+							      0.0,
+							      1.0,
+							      METACITY_INACTIVE_OPACITY_DEFAULT,
+							      G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_boolean ("metacity-active-shade-opacity",
+							      "Metacity Active Shade Opacity",
+							      "Metacity Active Shade Opacity",
+							      METACITY_ACTIVE_SHADE_OPACITY_DEFAULT,
+							      G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_boolean ("metacity-inactive-shade-opacity",
+							      "Metacity Inactive Shade Opacity",
+							      "Metacity Inactive Shade Opacity",
+							      METACITY_INACTIVE_SHADE_OPACITY_DEFAULT,
+							      G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_string ("metacity-button-layout",
+							      "Metacity Button Layout",
+							      "Metacity Button Layout",
+							      METACITY_BUTTON_LAYOUT_DEFAULT,
+							      G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_int ("titlebar-double-click-action",
+							   "Titlebar Action Double Click",
+							   "Titlebar Action Double Click",
+							   CLICK_ACTION_NONE,
+							   CLICK_ACTION_MENU,
+							   CLICK_ACTION_MAXIMIZE,
+							   G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_int ("titlebar-middle-click-action",
+							   "Titlebar Action Middle Click",
+							   "Titlebar Action Middle Click",
+							   CLICK_ACTION_NONE,
+							   CLICK_ACTION_MENU,
+							   CLICK_ACTION_LOWER,
+							   G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_int ("titlebar-right-click-action",
+							   "Titlebar Action Right Click",
+							   "Titlebar Action Right Click",
+							   CLICK_ACTION_NONE,
+							   CLICK_ACTION_MENU,
+							   CLICK_ACTION_MENU,
+							   G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_int ("mouse-wheel-action",
+							   "Mouse Wheel Action",
+							   "Mouse Wheel Action",
+							   WHEEL_ACTION_NONE,
+							   WHEEL_ACTION_SHADE,
+							   WHEEL_ACTION_SHADE,
+							   G_PARAM_READABLE));
+    g_object_interface_install_property (settings_interface,
+					 g_param_spec_string ("titlebar-font",
+							      "Titlebar Font",
+							      "Titlebar Font",
+							      TITLEBAR_FONT_DEFAULT,
+							      G_PARAM_READABLE));
+}

=== added file 'gtk/window-decorator/gwd-settings-interface.h'
--- gtk/window-decorator/gwd-settings-interface.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-interface.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,102 @@
+/*
+ * Copyright © 2010 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_SETTINGS_INTERFACE_H
+#define _COMPIZ_GWD_SETTINGS_INTERFACE_H
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define GWD_SETTINGS_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
+								 GWD_TYPE_SETTINGS_INTERFACE, \
+								 GWDSettings))
+#define GWD_SETTINGS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE(obj, \
+								       GWD_TYPE_SETTINGS_INTERFACE, \
+								       GWDSettingsInterface))
+#define GWD_TYPE_SETTINGS_INTERFACE (gwd_settings_interface_get_type ())
+
+typedef struct _GWDSettings GWDSettings;
+typedef struct _GWDSettingsInterface GWDSettingsInterface;
+
+struct _GWDSettingsInterface
+{
+    GTypeInterface parent;
+};
+
+enum
+{
+    BLUR_TYPE_NONE = 0,
+    BLUR_TYPE_TITLEBAR = 1,
+    BLUR_TYPE_ALL = 2
+};
+
+enum
+{
+    CLICK_ACTION_NONE,
+    CLICK_ACTION_SHADE,
+    CLICK_ACTION_MAXIMIZE,
+    CLICK_ACTION_MINIMIZE,
+    CLICK_ACTION_RAISE,
+    CLICK_ACTION_LOWER,
+    CLICK_ACTION_MENU
+};
+
+enum {
+    WHEEL_ACTION_NONE,
+    WHEEL_ACTION_SHADE
+};
+
+extern const gboolean USE_TOOLTIPS_DEFAULT;
+
+extern const gdouble ACTIVE_SHADOW_RADIUS_DEFAULT;
+extern const gdouble ACTIVE_SHADOW_OPACITY_DEFAULT;
+extern const gint    ACTIVE_SHADOW_OFFSET_X_DEFAULT;
+extern const gint    ACTIVE_SHADOW_OFFSET_Y_DEFAULT;
+extern const gchar   *ACTIVE_SHADOW_COLOR_DEFAULT;
+
+extern const gdouble INACTIVE_SHADOW_RADIUS_DEFAULT;
+extern const gdouble INACTIVE_SHADOW_OPACITY_DEFAULT;
+extern const gint    INACTIVE_SHADOW_OFFSET_X_DEFAULT;
+extern const gint    INACTIVE_SHADOW_OFFSET_Y_DEFAULT;
+extern const gchar   *INACTIVE_SHADOW_COLOR_DEFAULT;
+
+extern const guint   DRAGGABLE_BORDER_WIDTH_DEFAULT;
+extern const gboolean ATTACH_MODAL_DIALOGS_DEFAULT;
+extern const gint    BLUR_TYPE_DEFAULT;
+
+extern const gchar   *METACITY_THEME_DEFAULT;
+extern const gdouble METACITY_ACTIVE_OPACITY_DEFAULT;
+extern const gdouble METACITY_INACTIVE_OPACITY_DEFAULT;
+extern const gboolean METACITY_ACTIVE_SHADE_OPACITY_DEFAULT;
+extern const gboolean METACITY_INACTIVE_SHADE_OPACITY_DEFAULT;
+
+extern const gchar *  METACITY_BUTTON_LAYOUT_DEFAULT;
+
+extern const guint DOUBLE_CLICK_ACTION_DEFAULT;
+extern const guint MIDDLE_CLICK_ACTION_DEFAULT;
+extern const guint RIGHT_CLICK_ACTION_DEFAULT;
+extern const guint WHEEL_ACTION_DEFAULT;
+
+extern const gchar * TITLEBAR_FONT_DEFAULT;
+
+GType gwd_settings_interface_get_type (void);
+
+G_END_DECLS
+
+#endif

=== added file 'gtk/window-decorator/gwd-settings-notified-interface.c'
--- gtk/window-decorator/gwd-settings-notified-interface.c	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-notified-interface.c	2012-09-01 07:19:22 +0000
@@ -0,0 +1,37 @@
+#include "gwd-settings-notified-interface.h"
+
+static void gwd_settings_notified_interface_default_init (GWDSettingsNotifiedInterface *settings_interface);
+
+G_DEFINE_INTERFACE (GWDSettingsNotified, gwd_settings_notified_interface, G_TYPE_OBJECT);
+
+static void gwd_settings_notified_interface_default_init (GWDSettingsNotifiedInterface *settings_interface)
+{
+}
+
+gboolean
+gwd_settings_notified_update_decorations (GWDSettingsNotified *notified)
+{
+    GWDSettingsNotifiedInterface *iface = GWD_SETTINGS_NOTIFIED_GET_INTERFACE (notified);
+    return (*iface->update_decorations) (notified);
+}
+
+gboolean
+gwd_settings_notified_update_frames (GWDSettingsNotified *notified)
+{
+    GWDSettingsNotifiedInterface *iface = GWD_SETTINGS_NOTIFIED_GET_INTERFACE (notified);
+    return (*iface->update_frames) (notified);
+}
+
+gboolean
+gwd_settings_notified_update_metacity_theme (GWDSettingsNotified *notified)
+{
+    GWDSettingsNotifiedInterface *iface = GWD_SETTINGS_NOTIFIED_GET_INTERFACE (notified);
+    return (*iface->update_metacity_theme) (notified);
+}
+
+gboolean
+gwd_settings_notified_metacity_button_layout (GWDSettingsNotified *notified)
+{
+    GWDSettingsNotifiedInterface *iface = GWD_SETTINGS_NOTIFIED_GET_INTERFACE (notified);
+    return (*iface->update_metacity_button_layout) (notified);
+}

=== added file 'gtk/window-decorator/gwd-settings-notified-interface.h'
--- gtk/window-decorator/gwd-settings-notified-interface.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-notified-interface.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,63 @@
+/*
+ * Copyright © 2010 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_SETTINGS_NOTIFIED_INTERFACE_H
+#define _COMPIZ_GWD_SETTINGS_NOTIFIED_INTERFACE_H
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define GWD_SETTINGS_NOTIFIED_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
+					      GWD_TYPE_SETTINGS_NOTIFIED_INTERFACE, \
+					      GWDSettingsNotified))
+#define GWD_SETTINGS_NOTIFIED_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE(obj, \
+										GWD_TYPE_SETTINGS_NOTIFIED_INTERFACE, \
+										GWDSettingsNotifiedInterface))
+#define GWD_TYPE_SETTINGS_NOTIFIED_INTERFACE (gwd_settings_notified_interface_get_type ())
+
+typedef struct _GWDSettingsNotified GWDSettingsNotified;
+typedef struct _GWDSettingsNotifiedInterface GWDSettingsNotifiedInterface;
+
+struct _GWDSettingsNotifiedInterface
+{
+    GTypeInterface parent;
+
+    gboolean (*update_decorations) (GWDSettingsNotified *notified);
+    gboolean (*update_frames) (GWDSettingsNotified *notified);
+    gboolean (*update_metacity_theme) (GWDSettingsNotified *notified);
+    gboolean (*update_metacity_button_layout) (GWDSettingsNotified *notified);
+};
+
+gboolean
+gwd_settings_notified_update_decorations (GWDSettingsNotified *notified);
+
+gboolean
+gwd_settings_notified_update_frames (GWDSettingsNotified *notified);
+
+gboolean
+gwd_settings_notified_update_metacity_theme (GWDSettingsNotified *notified);
+
+gboolean
+gwd_settings_notified_metacity_button_layout (GWDSettingsNotified *notified);
+
+GType gwd_settings_notified_interface_get_type (void);
+
+G_END_DECLS
+
+#endif

=== added file 'gtk/window-decorator/gwd-settings-notified.c'
--- gtk/window-decorator/gwd-settings-notified.c	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-notified.c	2012-09-01 07:19:22 +0000
@@ -0,0 +1,264 @@
+#include <glib-object.h>
+
+#include "gwd-settings-notified-interface.h"
+#include "gwd-settings-notified.h"
+
+#include "gtk-window-decorator.h"
+
+#define GWD_SETTINGS_NOTIFIED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GWD_TYPE_SETTINGS_NOTIFIED, GWDSettingsNotifiedImpl));
+#define GWD_SETTINGS_NOTIFIED_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GWD_TYPE_SETTINGS_NOTIFIED, GWDSettingsNotifiedImplClass));
+#define GWD_IS_MOCK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GWD_TYPE_SETTINGS_NOTIFIED));
+#define GWD_IS_MOCK_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_TYPE ((obj), GWD_TYPE_SETTINGS_NOTIFIED));
+#define GWD_SETTINGS_NOTIFIED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GWD_TYPE_SETTINGS_NOTIFIED, GWDSettingsNotifiedImplClass));
+
+typedef struct _GWDSettingsNotifiedImpl
+{
+    GObject parent;
+} GWDSettingsNotifiedImpl;
+
+typedef struct _GWDSettingsNotifiedImplClass
+{
+    GObjectClass parent_class;
+} GWDSettingsNotifiedImplClass;
+
+enum
+{
+    GWD_SETTINGS_NOTIFIED_IMPL_PROPERTY_WNCK_SCREEN = 1
+};
+
+static void gwd_settings_notified_impl_interface_init (GWDSettingsNotifiedInterface *interface);
+
+G_DEFINE_TYPE_WITH_CODE (GWDSettingsNotifiedImpl, gwd_settings_notified_impl, G_TYPE_OBJECT,
+			 G_IMPLEMENT_INTERFACE (GWD_TYPE_SETTINGS_NOTIFIED_INTERFACE,
+						gwd_settings_notified_impl_interface_init))
+
+#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GWD_TYPE_SETTINGS_NOTIFIED, GWDSettingsNotifiedImplPrivate))
+
+typedef struct _GWDSettingsNotifiedImplPrivate
+{
+    WnckScreen *screen;
+} GWDSettingsNotifiedImplPrivate;
+
+static gboolean
+gwd_settings_notified_impl_update_decorations (GWDSettingsNotified *notified)
+{
+    GWDSettingsNotifiedImplPrivate *priv = GET_PRIVATE (notified);
+    decorations_changed (priv->screen);
+    return TRUE;
+}
+
+void
+set_frame_scale (decor_frame_t *frame,
+		 const gchar   *font_str)
+{
+    gfloat	  scale = 1.0f;
+
+    gwd_decor_frame_ref (frame);
+
+    if (frame->titlebar_font)
+	pango_font_description_free (frame->titlebar_font);
+
+    frame->titlebar_font = pango_font_description_from_string (font_str);
+
+    scale = (*theme_get_title_scale) (frame);
+
+    pango_font_description_set_size (frame->titlebar_font,
+				     MAX (pango_font_description_get_size (frame->titlebar_font) * scale, 1));
+
+    gwd_decor_frame_unref (frame);
+}
+
+void
+set_frames_scales (gpointer key,
+		   gpointer value,
+		   gpointer user_data)
+{
+    decor_frame_t *frame = (decor_frame_t *) value;
+    gchar	  *font_str = (gchar *) user_data;
+
+    gwd_decor_frame_ref (frame);
+
+    set_frame_scale (frame, font_str);
+
+    gwd_decor_frame_unref (frame);
+}
+
+static gboolean
+gwd_settings_notified_impl_update_frames (GWDSettingsNotified *notified)
+{
+    const gchar *titlebar_font = NULL;
+    g_object_get (settings, "titlebar-font", &titlebar_font, NULL);
+
+    gwd_frames_foreach (set_frames_scales, (gpointer) titlebar_font);
+    return TRUE;
+}
+
+static gboolean
+gwd_settings_notified_impl_update_metacity_theme (GWDSettingsNotified *notified)
+{
+#ifdef USE_METACITY
+    const gchar *meta_theme = NULL;
+    g_object_get (settings, "metacity-theme", &meta_theme, NULL);
+
+    if (meta_theme)
+    {
+	const gchar *theme = meta_theme;
+
+	if (theme)
+	{
+	    meta_theme_set_current (theme, TRUE);
+	    if (!meta_theme_get_current ())
+	    {
+		g_warning ("specified a theme that does not exist! falling back to cairo decoration\n");
+		meta_theme = NULL;
+	    }
+	}
+    }
+
+    if (meta_theme)
+    {
+	theme_draw_window_decoration	= meta_draw_window_decoration;
+	theme_calc_decoration_size	= meta_calc_decoration_size;
+	theme_update_border_extents	= meta_update_border_extents;
+	theme_get_event_window_position = meta_get_event_window_position;
+	theme_get_button_position	= meta_get_button_position;
+	theme_get_title_scale	    	= meta_get_title_scale;
+	theme_get_shadow		= meta_get_shadow;
+    }
+    else
+    {
+	theme_draw_window_decoration	= draw_window_decoration;
+	theme_calc_decoration_size	= calc_decoration_size;
+	theme_update_border_extents	= update_border_extents;
+	theme_get_event_window_position = get_event_window_position;
+	theme_get_button_position	= get_button_position;
+	theme_get_title_scale	    	= get_title_scale;
+	theme_get_shadow		= cairo_get_shadow;
+    }
+
+    return TRUE;
+#else
+    theme_draw_window_decoration    = draw_window_decoration;
+    theme_calc_decoration_size	    = calc_decoration_size;
+    theme_update_border_extents	    = update_border_extents;
+    theme_get_event_window_position = get_event_window_position;
+    theme_get_button_position	    = get_button_position;
+    theme_get_title_scale	    = get_title_scale;
+    theme_get_shadow		    = cairo_get_shadow;
+
+    return FALSE;
+#endif
+}
+
+static gboolean
+gwd_settings_notified_impl_update_metacity_button_layout (GWDSettingsNotified *notified)
+{
+    const gchar *button_layout;
+    g_object_get (settings, "metacity-button-layout", &button_layout, NULL);
+
+    if (button_layout)
+    {
+	meta_update_button_layout (button_layout);
+
+	meta_button_layout_set = TRUE;
+
+	return TRUE;
+    }
+
+    if (meta_button_layout_set)
+    {
+	meta_button_layout_set = FALSE;
+	return TRUE;
+    }
+
+    return FALSE;
+}
+
+static void gwd_settings_notified_impl_interface_init (GWDSettingsNotifiedInterface *interface)
+{
+    interface->update_decorations = gwd_settings_notified_impl_update_decorations;
+    interface->update_frames = gwd_settings_notified_impl_update_frames;
+    interface->update_metacity_button_layout = gwd_settings_notified_impl_update_metacity_button_layout;
+    interface->update_metacity_theme = gwd_settings_notified_impl_update_metacity_theme;
+}
+
+static void gwd_settings_notified_impl_dispose (GObject *object)
+{
+    GWDSettingsNotifiedImplPrivate *priv = GET_PRIVATE (object);
+
+    if (priv->screen)
+    {
+	g_object_unref (priv->screen);
+	priv->screen = NULL;
+    }
+}
+
+static void gwd_settings_notified_impl_finalize (GObject *object)
+{
+    G_OBJECT_CLASS (gwd_settings_notified_impl_parent_class)->finalize (object);
+}
+
+static void gwd_settings_notified_impl_set_property (GObject *object,
+						     guint   property_id,
+						     const GValue *value,
+						     GParamSpec *pspec)
+{
+    GWDSettingsNotifiedImplPrivate *priv = GET_PRIVATE (object);
+
+    switch (property_id)
+    {
+	case GWD_SETTINGS_NOTIFIED_IMPL_PROPERTY_WNCK_SCREEN:
+	    g_return_if_fail (!priv->screen);
+	    priv->screen = g_value_get_object (value);
+	    break;
+	default:
+	    break;
+    }
+}
+
+static void gwd_settings_notified_impl_class_init (GWDSettingsNotifiedImplClass *klass)
+{
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    g_type_class_add_private (klass, sizeof (GWDSettingsNotifiedImplPrivate));
+
+    object_class->dispose = gwd_settings_notified_impl_dispose;
+    object_class->finalize = gwd_settings_notified_impl_finalize;
+    object_class->set_property = gwd_settings_notified_impl_set_property;
+
+    g_object_class_install_property (object_class,
+				     GWD_SETTINGS_NOTIFIED_IMPL_PROPERTY_WNCK_SCREEN,
+				     g_param_spec_object ("wnck-screen",
+							  "WnckScreen",
+							  "A WnckScreen",
+							  WNCK_TYPE_SCREEN,
+							  G_PARAM_WRITABLE |
+							  G_PARAM_CONSTRUCT_ONLY));
+}
+
+void gwd_settings_notified_impl_init (GWDSettingsNotifiedImpl *self)
+{
+}
+
+GWDSettingsNotified *
+gwd_settings_notified_impl_new (WnckScreen *screen)
+{
+    static const guint gwd_settings_notified_impl_n_construction_properties = 1;
+    GValue wnck_screen_value = G_VALUE_INIT;
+
+    g_value_init (&wnck_screen_value, G_TYPE_OBJECT);
+    g_value_set_object (&wnck_screen_value, G_OBJECT (screen));
+
+    GParameter params[] =
+    {
+	{ "wnck-screen", wnck_screen_value }
+    };
+
+    GWDSettingsNotified *storage = GWD_SETTINGS_NOTIFIED_INTERFACE (g_object_newv (GWD_TYPE_SETTINGS_NOTIFIED,
+										   gwd_settings_notified_impl_n_construction_properties,
+										   params));
+
+    g_value_unset (&wnck_screen_value);
+
+    return storage;
+}

=== added file 'gtk/window-decorator/gwd-settings-notified.h'
--- gtk/window-decorator/gwd-settings-notified.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-notified.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,37 @@
+/*
+ * Copyright © 2012 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_SETTINGS_NOTIFIED_H
+#define _COMPIZ_GWD_SETTINGS_NOTIFIED_H
+
+#include <glib-object.h>
+
+typedef struct _GWDSettingsNotified GWDSettingsNotified;
+typedef struct _WnckScreen	    WnckScreen;
+
+G_BEGIN_DECLS
+
+#define GWD_TYPE_SETTINGS_NOTIFIED (gwd_settings_notified_impl_get_type ())
+GType gwd_settings_notified_impl_get_type ();
+
+GWDSettingsNotified *
+gwd_settings_notified_impl_new (WnckScreen *screen);
+
+G_END_DECLS
+
+#endif

=== added file 'gtk/window-decorator/gwd-settings-storage-gconf.c'
--- gtk/window-decorator/gwd-settings-storage-gconf.c	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-storage-gconf.c	2012-09-01 07:19:22 +0000
@@ -0,0 +1,387 @@
+#include <glib-object.h>
+#include <string.h>
+
+#include <gconf/gconf-client.h>
+
+#include "gwd-settings-writable-interface.h"
+#include "gwd-settings-storage-interface.h"
+#include "gwd-settings-storage-gconf.h"
+
+#define GWD_SETTINGS_STORAGE_GCONF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GWD_TYPE_SETTINGS_STORAGE_GCONF, GWDSettingsStorageGConf));
+#define GWD_SETTINGS_STORAGE_GCONF_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GWD_TYPE_SETTINGS_STORAGE_GCONF, GWDSettingsStorageGConfClass));
+#define GWD_IS_MOCK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GWD_TYPE_SETTINGS_STORAGE_GCONF));
+#define GWD_IS_MOCK_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_TYPE ((obj), GWD_TYPE_SETTINGS_STORAGE_GCONF));
+#define GWD_SETTINGS_STORAGE_GCONF_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GWD_TYPE_SETTINGS_STORAGE_GCONF, GWDSettingsStorageGConfClass));
+
+#define MUTTER_GCONF_DEF "/apps/mutter/general"
+#define METACITY_GCONF_DEF "/apps/metacity/general"
+#define COMPIZ_GCONF_DEF "/apps/gwd"
+
+const gchar * METACITY_GCONF_DIR = METACITY_GCONF_DEF;
+const gchar * MUTTER_GCONF_DIR = MUTTER_GCONF_DEF;
+const gchar * COMPIZ_GCONF_DIR = COMPIZ_GCONF_DEF;
+const gchar * COMPIZ_USE_SYSTEM_FONT_KEY = METACITY_GCONF_DEF "/titlebar_uses_system_font";
+const gchar * COMPIZ_TITLEBAR_FONT_KEY  = METACITY_GCONF_DEF "/titlebar_font";
+const gchar * COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY  = METACITY_GCONF_DEF "/action_double_click_titlebar";
+const gchar * COMPIZ_MIDDLE_CLICK_TITLEBAR_KEY  = METACITY_GCONF_DEF "/action_middle_click_titlebar";
+const gchar * COMPIZ_RIGHT_CLICK_TITLEBAR_KEY  = METACITY_GCONF_DEF "/action_right_click_titlebar";
+const gchar * MUTTER_DRAGGABLE_BORDER_WIDTH_KEY = MUTTER_GCONF_DEF "/draggable_border_width";
+const gchar * MUTTER_ATTACH_MODAL_DIALOGS_KEY = MUTTER_GCONF_DEF "/attach_modal_dialogs";
+const gchar * META_THEME_KEY = METACITY_GCONF_DEF "/theme";
+const gchar * META_BUTTON_LAYOUT_KEY = METACITY_GCONF_DEF "/button_layout";
+const gchar * COMPIZ_USE_META_THEME_KEY = COMPIZ_GCONF_DEF "/use_metacity_theme";
+const gchar * COMPIZ_META_THEME_OPACITY_KEY = COMPIZ_GCONF_DEF "/metacity_theme_opacity";
+const gchar * COMPIZ_META_THEME_ACTIVE_OPACITY_KEY = COMPIZ_GCONF_DEF "/metacity_theme_active_opacity";
+const gchar * COMPIZ_META_THEME_ACTIVE_OPACITY_SHADE_KEY = COMPIZ_GCONF_DEF "/metacity_theme_active_shade_opacity";
+const gchar * COMPIZ_META_THEME_OPACITY_SHADE_KEY = COMPIZ_GCONF_DEF "/metacity_theme_shade_opacity";
+const gchar * COMPIZ_BLUR_TYPE_KEY = COMPIZ_GCONF_DEF "/blur_type";
+const gchar * COMPIZ_WHEEL_ACTION_KEY = COMPIZ_GCONF_DEF "/mouse_wheel_action";
+const gchar * COMPIZ_USE_TOOLTIPS_KEY = COMPIZ_GCONF_DEF "/use_tooltips";
+
+typedef struct _GWDSettingsStorageGConf
+{
+    GObject parent;
+} GWDSettingsStorageGConf;
+
+typedef struct _GWDSettingsStorageGConfClass
+{
+    GObjectClass parent_class;
+} GWDSettingsStorageGConfClass;
+
+static void gwd_settings_storage_gconf_interface_init (GWDSettingsStorageInterface *interface);
+
+G_DEFINE_TYPE_WITH_CODE (GWDSettingsStorageGConf, gwd_settings_storage_gconf, G_TYPE_OBJECT,
+			 G_IMPLEMENT_INTERFACE (GWD_TYPE_SETTINGS_STORAGE_INTERFACE,
+						gwd_settings_storage_gconf_interface_init))
+
+#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GWD_TYPE_SETTINGS_STORAGE_GCONF, GWDSettingsStorageGConfPrivate))
+
+enum
+{
+    GWD_SETTINGS_STORAGE_GCONF_PROPERTY_WRITABLE_SETTINGS = 1
+};
+
+typedef struct _GWDSettingsStorageGConfPrivate
+{
+    GConfClient	        *client;
+    GWDSettingsWritable *writable;
+} GWDSettingsStorageGConfPrivate;
+
+gboolean gwd_settings_storage_gconf_update_use_tooltips (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGConf	   *storage = GWD_SETTINGS_STORAGE_GCONF (settings);
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (storage);
+
+    return gwd_settings_writable_use_tooltips_changed (priv->writable,
+						       gconf_client_get_bool (priv->client,
+									      COMPIZ_USE_TOOLTIPS_KEY,
+									      NULL));
+}
+
+gboolean gwd_settings_storage_gconf_update_draggable_border_width (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGConf	   *storage = GWD_SETTINGS_STORAGE_GCONF (settings);
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (storage);
+
+    return gwd_settings_writable_draggable_border_width_changed (priv->writable,
+								 gconf_client_get_int (priv->client,
+										       MUTTER_DRAGGABLE_BORDER_WIDTH_KEY,
+										       NULL));
+}
+
+gboolean gwd_settings_storage_gconf_update_attach_modal_dialogs (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGConf	   *storage = GWD_SETTINGS_STORAGE_GCONF (settings);
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (storage);
+
+    return gwd_settings_writable_attach_modal_dialogs_changed (priv->writable,
+							       gconf_client_get_bool (priv->client,
+										      MUTTER_ATTACH_MODAL_DIALOGS_KEY,
+										      NULL));
+}
+
+gboolean gwd_settings_storage_gconf_update_blur (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGConf	   *storage = GWD_SETTINGS_STORAGE_GCONF (settings);
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (storage);
+
+    gchar *value = gconf_client_get_string (priv->client,
+					    COMPIZ_BLUR_TYPE_KEY,
+					    NULL);
+
+    gboolean ret =  gwd_settings_writable_blur_changed (priv->writable, value);
+
+    if (value)
+	g_free (value);
+
+    return ret;
+}
+
+gboolean gwd_settings_storage_gconf_update_metacity_theme (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGConf	   *storage = GWD_SETTINGS_STORAGE_GCONF (settings);
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (storage);
+
+    gchar *theme = gconf_client_get_string (priv->client,
+					    META_THEME_KEY,
+					    NULL);
+
+    gboolean ret =  gwd_settings_writable_metacity_theme_changed (priv->writable,
+								  gconf_client_get_bool (priv->client,
+											 COMPIZ_USE_META_THEME_KEY,
+											 NULL),
+								  theme);
+
+    if (theme)
+	g_free (theme);
+
+    return ret;
+}
+
+gboolean gwd_settings_storage_gconf_update_opacity (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGConf	   *storage = GWD_SETTINGS_STORAGE_GCONF (settings);
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (storage);
+
+    return gwd_settings_writable_opacity_changed (priv->writable,
+						  gconf_client_get_float (priv->client,
+									  COMPIZ_META_THEME_ACTIVE_OPACITY_KEY,
+									  NULL),
+						  gconf_client_get_float (priv->client,
+									  COMPIZ_META_THEME_OPACITY_KEY,
+									  NULL),
+						  gconf_client_get_bool (priv->client,
+									 COMPIZ_META_THEME_ACTIVE_OPACITY_SHADE_KEY,
+									 NULL),
+						  gconf_client_get_bool (priv->client,
+									 COMPIZ_META_THEME_OPACITY_SHADE_KEY,
+									 NULL));
+}
+
+gboolean gwd_settings_storage_gconf_update_button_layout (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGConf	   *storage = GWD_SETTINGS_STORAGE_GCONF (settings);
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (storage);
+
+    gchar *button_layout = gconf_client_get_string (priv->client,
+						    META_BUTTON_LAYOUT_KEY,
+						    NULL);
+
+    gboolean ret =  gwd_settings_writable_button_layout_changed (priv->writable,
+							button_layout);
+
+    if (button_layout)
+	g_free (button_layout);
+
+    return ret;
+}
+
+gboolean gwd_settings_storage_gconf_update_font (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGConf	   *storage = GWD_SETTINGS_STORAGE_GCONF (settings);
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (storage);
+
+    gchar *font = gconf_client_get_string (priv->client,
+					   COMPIZ_TITLEBAR_FONT_KEY,
+					   NULL);
+
+    gboolean ret =  gwd_settings_writable_font_changed (priv->writable,
+							gconf_client_get_bool (priv->client,
+									       COMPIZ_USE_SYSTEM_FONT_KEY,
+									       NULL),
+							font);
+
+    if (font)
+	g_free (font);
+
+    return ret;
+}
+
+gboolean gwd_settings_storage_gconf_update_titlebar_actions (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGConf	   *storage = GWD_SETTINGS_STORAGE_GCONF (settings);
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (storage);
+
+    gchar *double_click_action = gconf_client_get_string (priv->client,
+							  COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY,
+							  NULL);
+    gchar *middle_click_action = gconf_client_get_string (priv->client,
+							  COMPIZ_MIDDLE_CLICK_TITLEBAR_KEY,
+							  NULL);
+    gchar *right_click_action = gconf_client_get_string (priv->client,
+							 COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY,
+							 NULL);
+    gchar *mouse_wheel_action = gconf_client_get_string (priv->client,
+							 COMPIZ_WHEEL_ACTION_KEY,
+							 NULL);
+
+    gboolean ret =  gwd_settings_writable_titlebar_actions_changed (priv->writable,
+								    double_click_action,
+								    middle_click_action,
+								    right_click_action,
+								    mouse_wheel_action);
+
+    if (double_click_action)
+	g_free (double_click_action);
+
+    if (middle_click_action)
+	g_free (middle_click_action);
+
+    if (right_click_action)
+	g_free (right_click_action);
+
+    if (mouse_wheel_action)
+	g_free (mouse_wheel_action);
+
+    return ret;
+}
+
+static void gwd_settings_storage_gconf_interface_init (GWDSettingsStorageInterface *interface)
+{
+    interface->update_use_tooltips = gwd_settings_storage_gconf_update_use_tooltips;
+    interface->update_draggable_border_width = gwd_settings_storage_gconf_update_draggable_border_width;
+    interface->update_attach_modal_dialogs = gwd_settings_storage_gconf_update_attach_modal_dialogs;
+    interface->update_blur = gwd_settings_storage_gconf_update_blur;
+    interface->update_metacity_theme = gwd_settings_storage_gconf_update_metacity_theme;
+    interface->update_opacity = gwd_settings_storage_gconf_update_opacity;
+    interface->update_button_layout = gwd_settings_storage_gconf_update_button_layout;
+    interface->update_font = gwd_settings_storage_gconf_update_font;
+    interface->update_titlebar_actions = gwd_settings_storage_gconf_update_titlebar_actions;
+}
+
+static void gwd_settings_storage_gconf_dispose (GObject *object)
+{
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (object);
+
+    G_OBJECT_CLASS (gwd_settings_storage_gconf_parent_class)->dispose (object);
+
+    if (priv->client)
+	g_object_unref (priv->client);
+
+    if (priv->writable)
+	g_object_unref (priv->writable);
+}
+
+static void gwd_settings_storage_gconf_finalize (GObject *object)
+{
+    G_OBJECT_CLASS (gwd_settings_storage_gconf_parent_class)->finalize (object);
+}
+
+static void gwd_settings_storage_gconf_set_property (GObject *object,
+						     guint   property_id,
+						     const GValue *value,
+						     GParamSpec *pspec)
+{
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (object);
+
+    switch (property_id)
+    {
+	case GWD_SETTINGS_STORAGE_GCONF_PROPERTY_WRITABLE_SETTINGS:
+	    g_return_if_fail (!priv->writable);
+	    priv->writable = g_value_get_pointer (value);
+	    break;
+	default:
+	    break;
+    }
+}
+
+static void gwd_settings_storage_gconf_class_init (GWDSettingsStorageGConfClass *klass)
+{
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    g_type_class_add_private (klass, sizeof (GWDSettingsStorageGConfPrivate));
+
+    object_class->dispose = gwd_settings_storage_gconf_dispose;
+    object_class->finalize = gwd_settings_storage_gconf_finalize;
+    object_class->set_property = gwd_settings_storage_gconf_set_property;
+
+    g_object_class_install_property (object_class,
+				     GWD_SETTINGS_STORAGE_GCONF_PROPERTY_WRITABLE_SETTINGS,
+				     g_param_spec_pointer ("writable-settings",
+							   "GWDSettingsWritable",
+							   "An object that implements GWDSettingsWritable",
+							   G_PARAM_WRITABLE |
+							   G_PARAM_CONSTRUCT_ONLY));
+}
+
+static void
+value_changed (GConfClient *client,
+	       const gchar *key,
+	       GConfValue  *value,
+	       void        *data)
+{
+    GWDSettingsStorage      *storage = GWD_SETTINGS_STORAGE_INTERFACE (data);
+
+    if (strcmp (key, COMPIZ_USE_SYSTEM_FONT_KEY) == 0 ||
+	strcmp (key, COMPIZ_TITLEBAR_FONT_KEY) == 0)
+	gwd_settings_storage_update_font (storage);
+    else if (strcmp (key, COMPIZ_TITLEBAR_FONT_KEY) == 0)
+	gwd_settings_storage_update_font (storage);
+    else if (strcmp (key, COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY) == 0 ||
+	     strcmp (key, COMPIZ_MIDDLE_CLICK_TITLEBAR_KEY) == 0 ||
+	     strcmp (key, COMPIZ_RIGHT_CLICK_TITLEBAR_KEY) == 0 ||
+	     strcmp (key, COMPIZ_WHEEL_ACTION_KEY) == 0)
+	gwd_settings_storage_update_titlebar_actions (storage);
+    else if (strcmp (key, COMPIZ_BLUR_TYPE_KEY) == 0)
+	gwd_settings_storage_update_blur (storage);
+    else if (strcmp (key, COMPIZ_USE_META_THEME_KEY) == 0 ||
+	     strcmp (key, META_THEME_KEY) == 0)
+	gwd_settings_storage_update_metacity_theme (storage);
+    else if (strcmp (key, META_BUTTON_LAYOUT_KEY) == 0)
+	gwd_settings_storage_update_button_layout (storage);
+    else if (strcmp (key, COMPIZ_META_THEME_OPACITY_KEY)	       == 0 ||
+	     strcmp (key, COMPIZ_META_THEME_OPACITY_SHADE_KEY)	       == 0 ||
+	     strcmp (key, COMPIZ_META_THEME_ACTIVE_OPACITY_KEY)        == 0 ||
+	     strcmp (key, COMPIZ_META_THEME_ACTIVE_OPACITY_SHADE_KEY)  == 0)
+	gwd_settings_storage_update_opacity (storage);
+    else if (strcmp (key, MUTTER_DRAGGABLE_BORDER_WIDTH_KEY) == 0)
+	gwd_settings_storage_update_draggable_border_width (storage);
+    else if (strcmp (key, MUTTER_ATTACH_MODAL_DIALOGS_KEY) == 0)
+	gwd_settings_storage_update_attach_modal_dialogs (storage);
+    else if (strcmp (key, COMPIZ_USE_TOOLTIPS_KEY) == 0)
+	gwd_settings_storage_update_use_tooltips (storage);
+}
+
+void gwd_settings_storage_gconf_init (GWDSettingsStorageGConf *self)
+{
+    GWDSettingsStorageGConfPrivate *priv = GET_PRIVATE (self);
+
+    priv->client = gconf_client_get_default ();
+
+    gconf_client_add_dir (priv->client,
+			  COMPIZ_GCONF_DIR,
+			  GCONF_CLIENT_PRELOAD_ONELEVEL,
+			  NULL);
+
+    gconf_client_add_dir (priv->client,
+			  METACITY_GCONF_DIR,
+			  GCONF_CLIENT_PRELOAD_ONELEVEL,
+			  NULL);
+
+    gconf_client_add_dir (priv->client,
+			  MUTTER_GCONF_DIR,
+			  GCONF_CLIENT_PRELOAD_ONELEVEL,
+			  NULL);
+
+    g_signal_connect (G_OBJECT (priv->client),
+		      "value_changed",
+		      G_CALLBACK (value_changed),
+		      self);
+}
+
+GWDSettingsStorage *
+gwd_settings_storage_gconf_new (GWDSettingsWritable *writable)
+{
+    GValue writable_value = G_VALUE_INIT;
+    g_value_init (&writable_value, G_TYPE_POINTER);
+
+    g_value_set_pointer (&writable_value, writable);
+
+    GParameter param[] =
+    {
+	{ "writable-settings", writable_value }
+    };
+
+    GWDSettingsStorage *storage = GWD_SETTINGS_STORAGE_INTERFACE (g_object_newv (GWD_TYPE_SETTINGS_STORAGE_GCONF, 1, param));
+    return storage;
+}

=== added file 'gtk/window-decorator/gwd-settings-storage-gconf.h'
--- gtk/window-decorator/gwd-settings-storage-gconf.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-storage-gconf.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,55 @@
+/*
+ * Copyright © 2012 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_SETTINGS_STORAGE_GCONF_H
+#define _COMPIZ_GWD_SETTINGS_STORAGE_GCONF_H
+
+#include <glib-object.h>
+
+typedef struct _GWDSettingsWritable GWDSettingsWritable;
+typedef struct _GWDSettingsStorage  GWDSettingsStorage;
+
+G_BEGIN_DECLS
+
+#define GWD_TYPE_SETTINGS_STORAGE_GCONF (gwd_settings_storage_gconf_get_type ())
+GType gwd_settings_storage_gconf_get_type ();
+
+GWDSettingsStorage *
+gwd_settings_storage_gconf_new (GWDSettingsWritable *writableSettings);
+
+extern const gchar * ORG_COMPIZ_GWD_KEY_USE_TOOLTIPS;
+extern const gchar * ORG_COMPIZ_GWD_KEY_BLUR_TYPE;
+extern const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_OPACITY;
+extern const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_OPACITY;
+extern const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_SHADE_OPACITY;
+extern const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_SHADE_OPACITY;
+extern const gchar * ORG_COMPIZ_GWD_KEY_USE_METACITY_THEME;
+extern const gchar * ORG_COMPIZ_GWD_KEY_MOUSE_WHEEL_ACTION;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_DOUBLE_CLICK_TITLEBAR;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_MIDDLE_CLICK_TITLEBAR;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_RIGHT_CLICK_TITLEBAR;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_THEME;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_USES_SYSTEM_FONT;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_FONT;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_BUTTON_LAYOUT;
+extern const gchar * ORG_GNOME_MUTTER_ATTACH_MODAL_DIALOGS;
+extern const gchar * ORG_GNOME_MUTTER_DRAGGABLE_BORDER_WIDTH;
+
+G_END_DECLS
+
+#endif

=== added file 'gtk/window-decorator/gwd-settings-storage-gsettings.c'
--- gtk/window-decorator/gwd-settings-storage-gsettings.c	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-storage-gsettings.c	2012-09-01 07:19:22 +0000
@@ -0,0 +1,522 @@
+#include <glib-object.h>
+
+#include <gio/gio.h>
+
+#include <string.h>
+
+#include "gwd-settings-writable-interface.h"
+#include "gwd-settings-storage-interface.h"
+#include "gwd-settings-storage-gsettings.h"
+
+const gchar * ORG_COMPIZ_GWD = "org.compiz.gwd";
+const gchar * ORG_GNOME_MUTTER = "org.gnome.mutter";
+const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES = "org.gnome.desktop.wm.preferences";
+
+const gchar * ORG_COMPIZ_GWD_KEY_USE_TOOLTIPS = "use-tooltips";
+const gchar * ORG_COMPIZ_GWD_KEY_BLUR_TYPE = "blur-type";
+const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_OPACITY = "metacity-theme-active-opacity";
+const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_OPACITY = "metacity-theme-inactive-opacity";
+const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_SHADE_OPACITY = "metacity-theme-active-shade-opacity";
+const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_SHADE_OPACITY = "metacity-theme-inactive-shade-opacity";
+const gchar * ORG_COMPIZ_GWD_KEY_USE_METACITY_THEME = "use-metacity-theme";
+const gchar * ORG_COMPIZ_GWD_KEY_MOUSE_WHEEL_ACTION = "mouse-wheel-action";
+const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_DOUBLE_CLICK_TITLEBAR = "action-double-click-titlebar";
+const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_MIDDLE_CLICK_TITLEBAR = "action-middle-click-titlebar";
+const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_RIGHT_CLICK_TITLEBAR = "action-right-click-titlebar";
+const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_THEME = "theme";
+const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_USES_SYSTEM_FONT = "titlebar-uses-system-font";
+const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_FONT = "titlebar-font";
+const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_BUTTON_LAYOUT = "button-layout";
+const gchar * ORG_GNOME_MUTTER_ATTACH_MODAL_DIALOGS = "attach-modal-dialogs";
+const gchar * ORG_GNOME_MUTTER_DRAGGABLE_BORDER_WIDTH = "draggable-border-width";
+
+#define GWD_SETTINGS_STORAGE_GSETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GWD_TYPE_SETTINGS_STORAGE_GSETTINGS, GWDSettingsStorageGSettings));
+#define GWD_SETTINGS_STORAGE_GSETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GWD_TYPE_SETTINGS_STORAGE_GSETTINGS, GWDSettingsStorageGSettingsClass));
+#define GWD_IS_MOCK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GWD_TYPE_SETTINGS_STORAGE_GSETTINGS));
+#define GWD_IS_MOCK_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_TYPE ((obj), GWD_TYPE_SETTINGS_STORAGE_GSETTINGS));
+#define GWD_SETTINGS_STORAGE_GSETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GWD_TYPE_SETTINGS_STORAGE_GSETTINGS, GWDSettingsStorageGSettingsClass));
+
+typedef struct _GWDSettingsStorageGSettings
+{
+    GObject parent;
+} GWDSettingsStorageGSettings;
+
+typedef struct _GWDSettingsStorageGSettingsClass
+{
+    GObjectClass parent_class;
+} GWDSettingsStorageGSettingsClass;
+
+static void gwd_settings_storage_gsettings_interface_init (GWDSettingsStorageInterface *interface);
+
+G_DEFINE_TYPE_WITH_CODE (GWDSettingsStorageGSettings, gwd_settings_storage_gsettings, G_TYPE_OBJECT,
+			 G_IMPLEMENT_INTERFACE (GWD_TYPE_SETTINGS_STORAGE_INTERFACE,
+						gwd_settings_storage_gsettings_interface_init))
+
+#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GWD_TYPE_SETTINGS_STORAGE_GSETTINGS, GWDSettingsStorageGSettingsPrivate))
+
+enum
+{
+    GWD_SETTINGS_STORAGE_GSETTINGS_PROPERTY_DESKTOP_GSETTINGS = 1,
+    GWD_SETTINGS_STORAGE_GSETTINGS_PROPERTY_MUTTER_GSETTINGS  = 2,
+    GWD_SETTINGS_STORAGE_GSETTINGS_PROPERTY_GWD_GSETTINGS     = 3,
+    GWD_SETTINGS_STORAGE_GSETTINGS_PROPERTY_WRITABLE_SETTINGS = 4
+};
+
+const guint GWD_SETTINGS_STORAGE_GSETTINGS_N_CONSTRUCTION_PARAMS = 4;
+
+typedef struct _GWDSettingsStorageGSettingsPrivate
+{
+    GSettings *desktop;
+    GSettings *mutter;
+    GSettings *gwd;
+    GWDSettingsWritable *writable;
+} GWDSettingsStorageGSettingsPrivate;
+
+gboolean gwd_settings_storage_gsettings_update_use_tooltips (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGSettings	       *storage = GWD_SETTINGS_STORAGE_GSETTINGS (settings);
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (storage);
+
+    if (!priv->gwd)
+	return FALSE;
+
+    return gwd_settings_writable_use_tooltips_changed (priv->writable,
+						       g_settings_get_boolean (priv->gwd,
+									       ORG_COMPIZ_GWD_KEY_USE_TOOLTIPS));
+}
+
+gboolean gwd_settings_storage_gsettings_update_draggable_border_width (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGSettings	       *storage = GWD_SETTINGS_STORAGE_GSETTINGS (settings);
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (storage);
+
+    if (!priv->mutter)
+	return FALSE;
+
+    return gwd_settings_writable_draggable_border_width_changed (priv->writable,
+								 g_settings_get_int (priv->mutter,
+										     ORG_GNOME_MUTTER_DRAGGABLE_BORDER_WIDTH));
+}
+
+gboolean gwd_settings_storage_gsettings_update_attach_modal_dialogs (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGSettings	       *storage = GWD_SETTINGS_STORAGE_GSETTINGS (settings);
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (storage);
+
+    if (!priv->gwd)
+	return FALSE;
+
+    return gwd_settings_writable_attach_modal_dialogs_changed (priv->writable,
+							       g_settings_get_boolean (priv->mutter,
+										       ORG_GNOME_MUTTER_ATTACH_MODAL_DIALOGS));
+}
+
+gboolean gwd_settings_storage_gsettings_update_blur (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGSettings	       *storage = GWD_SETTINGS_STORAGE_GSETTINGS (settings);
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (storage);
+
+    if (!priv->gwd)
+	return FALSE;
+
+    return gwd_settings_writable_blur_changed (priv->writable,
+					       g_settings_get_string (priv->gwd,
+								      ORG_COMPIZ_GWD_KEY_BLUR_TYPE));
+}
+
+gboolean gwd_settings_storage_gsettings_update_metacity_theme (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGSettings	       *storage = GWD_SETTINGS_STORAGE_GSETTINGS (settings);
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (storage);
+
+    if (!priv->gwd)
+	return FALSE;
+
+    if (!priv->desktop)
+	return FALSE;
+
+    return gwd_settings_writable_metacity_theme_changed (priv->writable,
+							 g_settings_get_boolean (priv->gwd,
+										 ORG_COMPIZ_GWD_KEY_USE_METACITY_THEME),
+							 g_settings_get_string (priv->desktop,
+										ORG_GNOME_DESKTOP_WM_PREFERENCES_THEME));
+}
+
+gboolean gwd_settings_storage_gsettings_update_opacity (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGSettings	       *storage = GWD_SETTINGS_STORAGE_GSETTINGS (settings);
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (storage);
+
+    if (!priv->gwd)
+	return FALSE;
+
+    return gwd_settings_writable_opacity_changed (priv->writable,
+						  g_settings_get_double (priv->gwd,
+									 ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_OPACITY),
+						  g_settings_get_double (priv->gwd,
+									 ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_OPACITY),
+						  g_settings_get_boolean (priv->gwd,
+									  ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_SHADE_OPACITY),
+						  g_settings_get_boolean (priv->gwd,
+									  ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_SHADE_OPACITY));
+}
+
+gboolean gwd_settings_storage_gsettings_update_button_layout (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGSettings	       *storage = GWD_SETTINGS_STORAGE_GSETTINGS (settings);
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (storage);
+
+    if (!priv->desktop)
+	return FALSE;
+
+    return gwd_settings_writable_button_layout_changed (priv->writable,
+							g_settings_get_string (priv->desktop,
+									       ORG_GNOME_DESKTOP_WM_PREFERENCES_BUTTON_LAYOUT));
+}
+
+gboolean gwd_settings_storage_gsettings_update_font (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGSettings	       *storage = GWD_SETTINGS_STORAGE_GSETTINGS (settings);
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (storage);
+
+    if (!priv->desktop)
+	return FALSE;
+
+    return gwd_settings_writable_font_changed (priv->writable,
+					       g_settings_get_boolean (priv->desktop,
+								       ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_USES_SYSTEM_FONT),
+					       g_settings_get_string (priv->desktop,
+								      ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_FONT));
+}
+
+static gchar *
+translate_dashes_to_underscores (const gchar *original)
+{
+    gint i = 0;
+    gchar *copy = g_strdup (original);
+
+    if (!copy)
+	return NULL;
+
+    for (; i < strlen (copy); ++i)
+    {
+	if (copy[i] == '-')
+	    copy[i] = '_';
+    }
+
+    return copy;
+}
+
+gboolean gwd_settings_storage_gsettings_update_titlebar_actions (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageGSettings	       *storage = GWD_SETTINGS_STORAGE_GSETTINGS (settings);
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (storage);
+
+    if (!priv->desktop)
+	return FALSE;
+
+    if (!priv->gwd)
+	return FALSE;
+
+    gchar *double_click_action = translate_dashes_to_underscores (g_settings_get_string (priv->desktop,
+											 ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_DOUBLE_CLICK_TITLEBAR));
+    gchar *middle_click_action = translate_dashes_to_underscores (g_settings_get_string (priv->desktop,
+											 ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_MIDDLE_CLICK_TITLEBAR));
+    gchar *right_click_action = translate_dashes_to_underscores (g_settings_get_string (priv->desktop,
+											 ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_RIGHT_CLICK_TITLEBAR));
+
+    return gwd_settings_writable_titlebar_actions_changed (priv->writable,
+							   double_click_action,
+							   middle_click_action,
+							   right_click_action,
+							   g_settings_get_string (priv->gwd,
+										  ORG_COMPIZ_GWD_KEY_MOUSE_WHEEL_ACTION));
+
+    if (double_click_action)
+	g_free (double_click_action);
+
+    if (middle_click_action)
+	g_free (middle_click_action);
+
+    if (right_click_action)
+	g_free (right_click_action);
+}
+
+static void gwd_settings_storage_gsettings_interface_init (GWDSettingsStorageInterface *interface)
+{
+    interface->update_use_tooltips = gwd_settings_storage_gsettings_update_use_tooltips;
+    interface->update_draggable_border_width = gwd_settings_storage_gsettings_update_draggable_border_width;
+    interface->update_attach_modal_dialogs = gwd_settings_storage_gsettings_update_attach_modal_dialogs;
+    interface->update_blur = gwd_settings_storage_gsettings_update_blur;
+    interface->update_metacity_theme = gwd_settings_storage_gsettings_update_metacity_theme;
+    interface->update_opacity = gwd_settings_storage_gsettings_update_opacity;
+    interface->update_button_layout = gwd_settings_storage_gsettings_update_button_layout;
+    interface->update_font = gwd_settings_storage_gsettings_update_font;
+    interface->update_titlebar_actions = gwd_settings_storage_gsettings_update_titlebar_actions;
+}
+
+static void gwd_settings_storage_gsettings_set_property (GObject *object,
+						     guint   property_id,
+						     const GValue  *value,
+						     GParamSpec *pspec)
+{
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (object);
+
+    switch (property_id)
+    {
+	case GWD_SETTINGS_STORAGE_GSETTINGS_PROPERTY_DESKTOP_GSETTINGS:
+	    if (priv->desktop)
+		g_object_unref (priv->desktop);
+
+	    priv->desktop = g_value_dup_object (value);
+	    break;
+	case GWD_SETTINGS_STORAGE_GSETTINGS_PROPERTY_MUTTER_GSETTINGS:
+	    if (priv->mutter)
+		g_object_unref (priv->mutter);
+
+	    priv->mutter = g_value_dup_object (value);
+	    break;
+	case GWD_SETTINGS_STORAGE_GSETTINGS_PROPERTY_GWD_GSETTINGS:
+	    if (priv->gwd)
+		g_object_unref (priv->gwd);
+
+	    priv->gwd = g_value_dup_object (value);
+	    break;
+	case GWD_SETTINGS_STORAGE_GSETTINGS_PROPERTY_WRITABLE_SETTINGS:
+	    priv->writable = g_value_get_pointer (value);
+	    break;
+	default:
+	    g_assert_not_reached ();
+    }
+}
+
+static void gwd_settings_storage_gsettings_dispose (GObject *object)
+{
+    GWDSettingsStorageGSettingsPrivate *priv = GET_PRIVATE (object);
+
+    G_OBJECT_CLASS (gwd_settings_storage_gsettings_parent_class)->dispose (object);
+
+    if (priv->desktop)
+	g_object_unref (priv->desktop);
+
+    if (priv->mutter)
+	g_object_unref (priv->mutter);
+
+    if (priv->gwd)
+	g_object_unref (priv->gwd);
+}
+
+static void gwd_settings_storage_gsettings_finalize (GObject *object)
+{
+    G_OBJECT_CLASS (gwd_settings_storage_gsettings_parent_class)->finalize (object);
+}
+
+static void gwd_settings_storage_gsettings_class_init (GWDSettingsStorageGSettingsClass *klass)
+{
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    g_type_class_add_private (klass, sizeof (GWDSettingsStorageGSettingsPrivate));
+
+    object_class->dispose = gwd_settings_storage_gsettings_dispose;
+    object_class->finalize = gwd_settings_storage_gsettings_finalize;
+    object_class->set_property = gwd_settings_storage_gsettings_set_property;
+
+    GParamSpec * properties[] =
+    {
+	NULL,
+	g_param_spec_object ("desktop-gsettings",
+			     ORG_GNOME_DESKTOP_WM_PREFERENCES,
+			     "GSettings Object for org.gnome.desktop.wm.preferences",
+			     G_TYPE_SETTINGS,
+			     G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY),
+	g_param_spec_object ("mutter-gsettings",
+			     ORG_GNOME_MUTTER,
+			     "GSettings Object for org.gnome.mutter",
+			     G_TYPE_SETTINGS,
+			     G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY),
+	g_param_spec_object ("gwd-gsettings",
+			     ORG_COMPIZ_GWD,
+			     "GSettings Object for org.compiz.gwd",
+			     G_TYPE_SETTINGS,
+			     G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY),
+	g_param_spec_pointer ("writable-settings",
+			      "GWDWritableSettings",
+			      "A GWDWritableSettings object",
+			      G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY)
+    };
+
+    g_object_class_install_properties (object_class,
+				       sizeof (properties) / sizeof (properties[0]),
+				       properties);
+}
+
+void gwd_settings_storage_gsettings_init (GWDSettingsStorageGSettings *self)
+{
+}
+
+GWDSettingsStorage *
+gwd_settings_storage_gsettings_new (GSettings *desktop,
+				    GSettings *mutter,
+				    GSettings *gwd,
+				    GWDSettingsWritable *writable)
+{
+    static const guint gwd_settings_storage_gsettings_n_construction_params = 4;
+
+    GValue desktop_value = G_VALUE_INIT;
+    GValue mutter_value = G_VALUE_INIT;
+    GValue gwd_value = G_VALUE_INIT;
+    GValue writable_value = G_VALUE_INIT;
+
+    g_return_val_if_fail (writable != NULL, NULL);
+
+    g_value_init (&desktop_value, G_TYPE_OBJECT);
+    g_value_init (&mutter_value, G_TYPE_OBJECT);
+    g_value_init (&gwd_value, G_TYPE_OBJECT);
+    g_value_init (&writable_value, G_TYPE_POINTER);
+
+    g_value_take_object (&desktop_value, desktop);
+    g_value_take_object (&mutter_value, mutter);
+    g_value_take_object (&gwd_value, gwd);
+    g_value_set_pointer (&writable_value, writable);
+
+    GParameter param[] =
+    {
+	{ "desktop-gsettings", desktop_value },
+	{ "mutter-gsettings", mutter_value },
+	{ "gwd-gsettings", gwd_value },
+	{ "writable-settings", writable_value }
+    };
+
+    GWDSettingsStorage *storage = GWD_SETTINGS_STORAGE_INTERFACE (g_object_newv (GWD_TYPE_SETTINGS_STORAGE_GSETTINGS,
+										 gwd_settings_storage_gsettings_n_construction_params,
+										 param));
+
+    g_value_unset (&desktop_value);
+    g_value_unset (&mutter_value);
+    g_value_unset (&gwd_value);
+    g_value_unset (&writable_value);
+
+    return storage;
+}
+
+/* Factory methods */
+
+static gpointer
+list_all_schemas (gpointer data)
+{
+    return (gpointer) g_settings_list_schemas ();
+}
+
+static inline GSettings *
+get_settings_no_abort (const gchar *schema)
+{
+    static GOnce get_settings_once = G_ONCE_INIT;
+
+    g_once (&get_settings_once, list_all_schemas, NULL);
+
+    const gchar * const * schemas = (const gchar * const *) get_settings_once.retval;
+    guint                        i = 0;
+
+    for (; schemas[i]; i++)
+	if (g_strcmp0 (schema, schemas[i]) == 0)
+	    return g_settings_new (schema);
+
+    return NULL;
+}
+
+static void
+org_compiz_gwd_settings_changed (GSettings   *settings,
+				 const gchar *key,
+				 gpointer    user_data)
+{
+    GWDSettingsStorage *storage = GWD_SETTINGS_STORAGE_INTERFACE (user_data);
+
+    if (strcmp (key, ORG_COMPIZ_GWD_KEY_MOUSE_WHEEL_ACTION) == 0)
+	gwd_settings_storage_update_titlebar_actions (storage);
+    else if (strcmp (key, ORG_COMPIZ_GWD_KEY_BLUR_TYPE) == 0)
+	gwd_settings_storage_update_blur (storage);
+    else if (strcmp (key, ORG_COMPIZ_GWD_KEY_USE_METACITY_THEME) == 0)
+	gwd_settings_storage_update_metacity_theme (storage);
+    else if (strcmp (key, ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_OPACITY)	     == 0 ||
+	     strcmp (key, ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_SHADE_OPACITY)  == 0 ||
+	     strcmp (key, ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_OPACITY)          == 0 ||
+	     strcmp (key, ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_SHADE_OPACITY)    == 0)
+	gwd_settings_storage_update_opacity (storage);
+    else if (strcmp (key, ORG_COMPIZ_GWD_KEY_USE_TOOLTIPS) == 0)
+	gwd_settings_storage_update_use_tooltips (storage);
+}
+
+void
+gwd_connect_org_compiz_gwd_settings (GSettings		*settings,
+				     GWDSettingsStorage *storage)
+{
+    g_signal_connect (settings, "changed", (GCallback) org_compiz_gwd_settings_changed, storage);
+}
+
+GSettings *
+gwd_get_org_compiz_gwd_settings ()
+{
+    return get_settings_no_abort (ORG_COMPIZ_GWD);
+}
+
+static void
+org_gnome_mutter_settings_changed (GSettings   *settings,
+				   const gchar *key,
+				   gpointer    user_data)
+{
+    GWDSettingsStorage *storage = GWD_SETTINGS_STORAGE_INTERFACE (user_data);
+
+    if (strcmp (key, ORG_GNOME_MUTTER_DRAGGABLE_BORDER_WIDTH) == 0)
+	gwd_settings_storage_update_draggable_border_width (storage);
+    else if (strcmp (key, ORG_GNOME_MUTTER_ATTACH_MODAL_DIALOGS) == 0)
+	gwd_settings_storage_update_attach_modal_dialogs (storage);
+}
+
+void
+gwd_connect_org_gnome_mutter_settings (GSettings	  *settings,
+				       GWDSettingsStorage *storage)
+{
+    g_signal_connect (settings, "changed", (GCallback) org_gnome_mutter_settings_changed, storage);
+}
+
+GSettings *
+gwd_get_org_gnome_mutter_settings ()
+{
+    return get_settings_no_abort (ORG_GNOME_MUTTER);
+}
+
+static void
+org_gnome_desktop_wm_keybindings_settings_changed (GSettings   *settings,
+						   const gchar *key,
+						   gpointer    user_data)
+{
+    GWDSettingsStorage *storage = GWD_SETTINGS_STORAGE_INTERFACE (user_data);
+
+    if (strcmp (key, ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_USES_SYSTEM_FONT) == 0 ||
+	strcmp (key, ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_FONT) == 0)
+	gwd_settings_storage_update_font (storage);
+    else if (strcmp (key, ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_FONT) == 0)
+	gwd_settings_storage_update_font (storage);
+    else if (strcmp (key, ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_DOUBLE_CLICK_TITLEBAR) == 0 ||
+	     strcmp (key, ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_MIDDLE_CLICK_TITLEBAR) == 0 ||
+	     strcmp (key, ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_RIGHT_CLICK_TITLEBAR) == 0)
+	gwd_settings_storage_update_titlebar_actions (storage);
+    else if (strcmp (key, ORG_GNOME_DESKTOP_WM_PREFERENCES_THEME) == 0)
+	gwd_settings_storage_update_metacity_theme (storage);
+    else if (strcmp (key, ORG_GNOME_DESKTOP_WM_PREFERENCES_BUTTON_LAYOUT) == 0)
+	gwd_settings_storage_update_button_layout (storage);
+}
+
+void
+gwd_connect_org_gnome_desktop_wm_preferences_settings (GSettings	  *settings,
+						       GWDSettingsStorage *storage)
+{
+    g_signal_connect (settings, "changed",
+		      (GCallback) org_gnome_desktop_wm_keybindings_settings_changed, storage);
+}
+
+GSettings *
+gwd_get_org_gnome_desktop_wm_preferences_settings ()
+{
+    return get_settings_no_abort (ORG_GNOME_DESKTOP_WM_PREFERENCES);
+}

=== added file 'gtk/window-decorator/gwd-settings-storage-gsettings.h'
--- gtk/window-decorator/gwd-settings-storage-gsettings.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-storage-gsettings.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,84 @@
+/*
+ * Copyright © 2012 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_SETTINGS_STORAGE_GSETTINGS_H
+#define _COMPIZ_GWD_SETTINGS_STORAGE_GSETTINGS_H
+
+#include <glib-object.h>
+
+typedef struct _GWDSettingsWritable GWDSettingsWritable;
+typedef struct _GWDSettingsStorage  GWDSettingsStorage;
+typedef struct _GSettings	    GSettings;
+
+G_BEGIN_DECLS
+
+#define GWD_TYPE_SETTINGS_STORAGE_GSETTINGS (gwd_settings_storage_gsettings_get_type ())
+GType gwd_settings_storage_gsettings_get_type ();
+
+GWDSettingsStorage *
+gwd_settings_storage_gsettings_new (GSettings *orgGNOMEDesktopSettings,
+				    GSettings *mutterSettings,
+				    GSettings *gwdSettings,
+				    GWDSettingsWritable *writableSettings);
+
+void
+gwd_connect_org_compiz_gwd_settings (GSettings		*settings,
+				     GWDSettingsStorage *storage);
+
+GSettings *
+gwd_get_org_compiz_gwd_settings ();
+
+void
+gwd_connect_org_gnome_mutter_settings (GSettings	  *settings,
+				       GWDSettingsStorage *storage);
+
+GSettings *
+gwd_get_org_gnome_mutter_settings ();
+
+void
+gwd_connect_org_gnome_desktop_wm_preferences_settings (GSettings	  *settings,
+						       GWDSettingsStorage *storage);
+
+GSettings *
+gwd_get_org_gnome_desktop_wm_preferences_settings ();
+
+extern const gchar * ORG_COMPIZ_GWD;
+extern const gchar * ORG_GNOME_MUTTER;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES;
+
+extern const gchar * ORG_COMPIZ_GWD_KEY_USE_TOOLTIPS;
+extern const gchar * ORG_COMPIZ_GWD_KEY_BLUR_TYPE;
+extern const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_OPACITY;
+extern const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_OPACITY;
+extern const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_SHADE_OPACITY;
+extern const gchar * ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_SHADE_OPACITY;
+extern const gchar * ORG_COMPIZ_GWD_KEY_USE_METACITY_THEME;
+extern const gchar * ORG_COMPIZ_GWD_KEY_MOUSE_WHEEL_ACTION;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_DOUBLE_CLICK_TITLEBAR;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_MIDDLE_CLICK_TITLEBAR;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_RIGHT_CLICK_TITLEBAR;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_THEME;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_USES_SYSTEM_FONT;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_FONT;
+extern const gchar * ORG_GNOME_DESKTOP_WM_PREFERENCES_BUTTON_LAYOUT;
+extern const gchar * ORG_GNOME_MUTTER_ATTACH_MODAL_DIALOGS;
+extern const gchar * ORG_GNOME_MUTTER_DRAGGABLE_BORDER_WIDTH;
+
+G_END_DECLS
+
+#endif

=== added file 'gtk/window-decorator/gwd-settings-storage-interface.c'
--- gtk/window-decorator/gwd-settings-storage-interface.c	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-storage-interface.c	2012-09-01 07:19:22 +0000
@@ -0,0 +1,63 @@
+#include "gwd-settings-storage-interface.h"
+
+static void gwd_settings_storage_interface_default_init (GWDSettingsStorageInterface *settings_interface);
+
+G_DEFINE_INTERFACE (GWDSettingsStorage, gwd_settings_storage_interface, G_TYPE_OBJECT);
+
+static void gwd_settings_storage_interface_default_init (GWDSettingsStorageInterface *settings_interface)
+{
+}
+
+gboolean gwd_settings_storage_update_use_tooltips (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageInterface *interface = GWD_SETTINGS_STORAGE_GET_INTERFACE (settings);
+    return (*interface->update_use_tooltips) (settings);
+}
+
+gboolean gwd_settings_storage_update_draggable_border_width (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageInterface *interface = GWD_SETTINGS_STORAGE_GET_INTERFACE (settings);
+    return (*interface->update_draggable_border_width) (settings);
+}
+
+gboolean gwd_settings_storage_update_attach_modal_dialogs (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageInterface *interface = GWD_SETTINGS_STORAGE_GET_INTERFACE (settings);
+    return (*interface->update_attach_modal_dialogs) (settings);
+}
+
+gboolean gwd_settings_storage_update_blur (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageInterface *interface = GWD_SETTINGS_STORAGE_GET_INTERFACE (settings);
+    return (*interface->update_blur) (settings);
+}
+
+gboolean gwd_settings_storage_update_metacity_theme (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageInterface *interface = GWD_SETTINGS_STORAGE_GET_INTERFACE (settings);
+    return (*interface->update_metacity_theme) (settings);
+}
+
+gboolean gwd_settings_storage_update_opacity (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageInterface *interface = GWD_SETTINGS_STORAGE_GET_INTERFACE (settings);
+    return (*interface->update_opacity) (settings);
+}
+
+gboolean gwd_settings_storage_update_button_layout (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageInterface *interface = GWD_SETTINGS_STORAGE_GET_INTERFACE (settings);
+    return (*interface->update_button_layout) (settings);
+}
+
+gboolean gwd_settings_storage_update_font (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageInterface *interface = GWD_SETTINGS_STORAGE_GET_INTERFACE (settings);
+    return (*interface->update_font) (settings);
+}
+
+gboolean gwd_settings_storage_update_titlebar_actions (GWDSettingsStorage *settings)
+{
+    GWDSettingsStorageInterface *interface = GWD_SETTINGS_STORAGE_GET_INTERFACE (settings);
+    return (*interface->update_titlebar_actions) (settings);
+}

=== added file 'gtk/window-decorator/gwd-settings-storage-interface.h'
--- gtk/window-decorator/gwd-settings-storage-interface.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-storage-interface.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,66 @@
+/*
+ * Copyright © 2010 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_SETTINGS_STORAGE_INTERFACE_H
+#define _COMPIZ_GWD_SETTINGS_STORAGE_INTERFACE_H
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define GWD_SETTINGS_STORAGE_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
+					     GWD_TYPE_SETTINGS_STORAGE_INTERFACE, \
+					     GWDSettingsStorage))
+#define GWD_SETTINGS_STORAGE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE(obj, \
+										GWD_TYPE_SETTINGS_STORAGE_INTERFACE, \
+										GWDSettingsStorageInterface))
+#define GWD_TYPE_SETTINGS_STORAGE_INTERFACE (gwd_settings_storage_interface_get_type ())
+
+typedef struct _GWDSettingsStorage GWDSettingsStorage;
+typedef struct _GWDSettingsStorageInterface GWDSettingsStorageInterface;
+
+struct _GWDSettingsStorageInterface
+{
+    GTypeInterface parent;
+
+    gboolean (*update_use_tooltips) (GWDSettingsStorage *settings);
+    gboolean (*update_draggable_border_width) (GWDSettingsStorage *settings);
+    gboolean (*update_attach_modal_dialogs) (GWDSettingsStorage *settings);
+    gboolean (*update_blur) (GWDSettingsStorage *settings);
+    gboolean (*update_metacity_theme) (GWDSettingsStorage *settings);
+    gboolean (*update_opacity) (GWDSettingsStorage *settings);
+    gboolean (*update_button_layout) (GWDSettingsStorage *settings);
+    gboolean (*update_font) (GWDSettingsStorage *settings);
+    gboolean (*update_titlebar_actions) (GWDSettingsStorage *settings);
+};
+
+gboolean gwd_settings_storage_update_use_tooltips (GWDSettingsStorage *settings);
+gboolean gwd_settings_storage_update_draggable_border_width (GWDSettingsStorage *settings);
+gboolean gwd_settings_storage_update_attach_modal_dialogs (GWDSettingsStorage *settings);
+gboolean gwd_settings_storage_update_blur (GWDSettingsStorage *settings);
+gboolean gwd_settings_storage_update_metacity_theme (GWDSettingsStorage *settings);
+gboolean gwd_settings_storage_update_opacity (GWDSettingsStorage *settings);
+gboolean gwd_settings_storage_update_button_layout (GWDSettingsStorage *settings);
+gboolean gwd_settings_storage_update_font (GWDSettingsStorage *settings);
+gboolean gwd_settings_storage_update_titlebar_actions (GWDSettingsStorage *settings);
+
+GType gwd_settings_storage_interface_get_type (void);
+
+G_END_DECLS
+
+#endif

=== added file 'gtk/window-decorator/gwd-settings-writable-interface.c'
--- gtk/window-decorator/gwd-settings-writable-interface.c	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-writable-interface.c	2012-09-01 07:19:22 +0000
@@ -0,0 +1,134 @@
+#include "gwd-settings-writable-interface.h"
+
+static void gwd_settings_writable_interface_default_init (GWDSettingsWritableInterface *settings_interface);
+
+G_DEFINE_INTERFACE (GWDSettingsWritable, gwd_settings_writable_interface, G_TYPE_OBJECT);
+
+static void gwd_settings_writable_interface_default_init (GWDSettingsWritableInterface *settings_interface)
+{
+}
+
+void
+gwd_settings_writable_freeze_updates (GWDSettingsWritable *settings)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    (*iface->freeze_updates) (settings);
+}
+
+void
+gwd_settings_writable_thaw_updates (GWDSettingsWritable *settings)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    (*iface->thaw_updates) (settings);
+}
+
+gboolean
+gwd_settings_writable_shadow_property_changed (GWDSettingsWritable *settings,
+					       gdouble     active_shadow_radius,
+					       gdouble     active_shadow_opacity,
+					       gdouble     active_shadow_offset_x,
+					       gdouble     active_shadow_offset_y,
+					       const gchar *active_shadow_color,
+					       gdouble     inactive_shadow_radius,
+					       gdouble     inactive_shadow_opacity,
+					       gdouble     inactive_shadow_offset_x,
+					       gdouble     inactive_shadow_offset_y,
+					       const gchar *inactive_shadow_color)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    return (*iface->shadow_property_changed) (settings,
+					      active_shadow_radius,
+					      active_shadow_opacity,
+					      active_shadow_offset_x,
+					      active_shadow_offset_y,
+					      active_shadow_color,
+					      inactive_shadow_radius,
+					      inactive_shadow_opacity,
+					      inactive_shadow_offset_x,
+					      inactive_shadow_offset_y,
+					      inactive_shadow_color);
+}
+
+gboolean
+gwd_settings_writable_use_tooltips_changed (GWDSettingsWritable *settings,
+					    gboolean    use_tooltips)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    return (*iface->use_tooltips_changed) (settings, use_tooltips);
+}
+
+gboolean
+gwd_settings_writable_draggable_border_width_changed (GWDSettingsWritable *settings,
+						      gint	 draggable_border_width)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    return (*iface->draggable_border_width_changed) (settings, draggable_border_width);
+}
+
+gboolean
+gwd_settings_writable_attach_modal_dialogs_changed (GWDSettingsWritable *settings,
+						    gboolean    attach_modal_dialogs)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    return (*iface->attach_modal_dialogs_changed) (settings, attach_modal_dialogs);
+}
+
+gboolean
+gwd_settings_writable_blur_changed (GWDSettingsWritable *settings,
+				    const gchar         *blur_type)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    return (*iface->blur_changed) (settings, blur_type);
+}
+
+gboolean
+gwd_settings_writable_metacity_theme_changed (GWDSettingsWritable *settings,
+					      gboolean	 use_metacity_theme,
+					      const gchar *metacity_theme)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    return (*iface->metacity_theme_changed) (settings, use_metacity_theme, metacity_theme);
+}
+
+gboolean
+gwd_settings_writable_opacity_changed (GWDSettingsWritable *settings,
+				       gdouble active_opacity,
+				       gdouble inactive_opacity,
+				       gboolean active_shade_opacity,
+				       gboolean inactive_shade_opacity)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    return (*iface->opacity_changed) (settings, active_opacity, inactive_opacity, active_shade_opacity, inactive_shade_opacity);
+}
+
+gboolean
+gwd_settings_writable_button_layout_changed (GWDSettingsWritable *settings,
+					     const gchar *button_layout)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    return (*iface->button_layout_changed) (settings, button_layout);
+}
+
+gboolean
+gwd_settings_writable_font_changed (GWDSettingsWritable *settings,
+				    gboolean		titlebar_uses_system_font,
+				    const gchar		*titlebar_font)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    return (*iface->font_changed) (settings, titlebar_uses_system_font, titlebar_font);
+}
+
+gboolean
+gwd_settings_writable_titlebar_actions_changed (GWDSettingsWritable *settings,
+						const gchar	   *action_double_click_titlebar,
+						const gchar	   *action_middle_click_titlebar,
+						const gchar	   *action_right_click_titlebar,
+						const gchar	   *mouse_wheel_action)
+{
+    GWDSettingsWritableInterface *iface = GWD_SETTINGS_WRITABLE_GET_INTERFACE (settings);
+    return (*iface->titlebar_actions_changed) (settings,
+					       action_double_click_titlebar,
+					       action_middle_click_titlebar,
+					       action_right_click_titlebar,
+					       mouse_wheel_action);
+}

=== added file 'gtk/window-decorator/gwd-settings-writable-interface.h'
--- gtk/window-decorator/gwd-settings-writable-interface.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-writable-interface.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,142 @@
+/*
+ * Copyright © 2010 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_SETTINGS_WRITABLE_INTERFACE_H
+#define _COMPIZ_GWD_SETTINGS_WRITABLE_INTERFACE_H
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define GWD_SETTINGS_WRITABLE_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
+					      GWD_TYPE_WRITABLE_SETTINGS_INTERFACE, \
+					      GWDSettingsWritable))
+#define GWD_SETTINGS_WRITABLE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE(obj, \
+										GWD_TYPE_WRITABLE_SETTINGS_INTERFACE, \
+										GWDSettingsWritableInterface))
+#define GWD_TYPE_WRITABLE_SETTINGS_INTERFACE (gwd_settings_writable_interface_get_type ())
+
+typedef struct _GWDSettingsWritable GWDSettingsWritable;
+typedef struct _GWDSettingsWritableInterface GWDSettingsWritableInterface;
+
+struct _GWDSettingsWritableInterface
+{
+    GTypeInterface parent;
+
+    void     (*freeze_updates) (GWDSettingsWritable *settings);
+    void     (*thaw_updates)   (GWDSettingsWritable *settings);
+    gboolean (*shadow_property_changed) (GWDSettingsWritable *settings,
+					 gdouble     active_shadow_radius,
+					 gdouble     active_shadow_opacity,
+					 gdouble     active_shadow_offset_x,
+					 gdouble     active_shadow_offset_y,
+					 const gchar *active_shadow_color,
+					 gdouble     inactive_shadow_radius,
+					 gdouble     inactive_shadow_opacity,
+					 gdouble     inactive_shadow_offset_x,
+					 gdouble     inactive_shadow_offset_y,
+					 const gchar *inactive_shadow_color);
+    gboolean (*use_tooltips_changed) (GWDSettingsWritable *settings, gboolean new_value);
+    gboolean (*draggable_border_width_changed) (GWDSettingsWritable *settings, gint new_value);
+    gboolean (*attach_modal_dialogs_changed) (GWDSettingsWritable *settings, gboolean new_value);
+    gboolean (*blur_changed) (GWDSettingsWritable *settings, const gchar *type);
+    gboolean (*metacity_theme_changed) (GWDSettingsWritable *settings, gboolean use_metacity_theme, const gchar *metacity_theme);
+    gboolean (*opacity_changed) (GWDSettingsWritable *settings,
+				 gdouble active_opacity,
+				 gdouble inactive_opacity,
+				 gboolean active_shade_opacity,
+				 gboolean inactive_shade_opacity);
+    gboolean (*button_layout_changed) (GWDSettingsWritable *settings, const gchar *button_layout);
+    gboolean (*font_changed) (GWDSettingsWritable *settings,
+			      gboolean		  titlebar_uses_system_font,
+			      const gchar	  *titlebar_font);
+    gboolean (*titlebar_actions_changed) (GWDSettingsWritable *settings,
+					  const gchar	      *action_double_click_titlebar,
+					  const gchar	      *action_middle_click_titlebar,
+					  const gchar	      *action_right_click_titlebar,
+					  const gchar	      *mouse_wheel_action);
+};
+
+void
+gwd_settings_writable_freeze_updates (GWDSettingsWritable *settings);
+
+void
+gwd_settings_writable_thaw_updates (GWDSettingsWritable *settings);
+
+gboolean
+gwd_settings_writable_shadow_property_changed (GWDSettingsWritable *settings,
+					       gdouble     active_shadow_radius,
+					       gdouble     active_shadow_opacity,
+					       gdouble     active_shadow_offset_x,
+					       gdouble     active_shadow_offset_y,
+					       const gchar *active_shadow_color,
+					       gdouble     inactive_shadow_radius,
+					       gdouble     inactive_shadow_opacity,
+					       gdouble     inactive_shadow_offset_x,
+					       gdouble     inactive_shadow_offset_y,
+					       const gchar *inactive_shadow_color);
+
+gboolean
+gwd_settings_writable_use_tooltips_changed (GWDSettingsWritable *settings,
+					    gboolean    use_tooltips);
+
+gboolean
+gwd_settings_writable_draggable_border_width_changed (GWDSettingsWritable *settings,
+						      gint	 draggable_border_width);
+
+gboolean
+gwd_settings_writable_attach_modal_dialogs_changed (GWDSettingsWritable *settings,
+						    gboolean    attach_modal_dialogs);
+
+gboolean
+gwd_settings_writable_blur_changed (GWDSettingsWritable *settings,
+				    const gchar *blur_type);
+
+gboolean
+gwd_settings_writable_metacity_theme_changed (GWDSettingsWritable *settings,
+					      gboolean	 use_metacity_theme,
+					      const gchar *metacity_theme);
+
+gboolean
+gwd_settings_writable_opacity_changed (GWDSettingsWritable *settings,
+				       gdouble active_opacity,
+				       gdouble inactive_opacity,
+				       gboolean active_shade_opacity,
+				       gboolean inactive_shade_opacity);
+
+gboolean
+gwd_settings_writable_button_layout_changed (GWDSettingsWritable *settings,
+					     const gchar *button_layout);
+
+gboolean
+gwd_settings_writable_font_changed (GWDSettingsWritable *settings,
+				    gboolean		titlebar_uses_system_font,
+				    const gchar		*titlebar_font);
+
+gboolean
+gwd_settings_writable_titlebar_actions_changed (GWDSettingsWritable *settings,
+						const gchar	   *action_double_click_titlebar,
+						const gchar	   *action_middle_click_titlebar,
+						const gchar	   *action_right_click_titlebar,
+						const gchar	   *mouse_wheel_action);
+
+GType gwd_settings_writable_interface_get_type (void);
+
+G_END_DECLS
+
+#endif

=== added file 'gtk/window-decorator/gwd-settings-xproperty-interface.c'
--- gtk/window-decorator/gwd-settings-xproperty-interface.c	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-xproperty-interface.c	2012-09-01 07:19:22 +0000
@@ -0,0 +1,16 @@
+#include "gwd-settings-xproperty-interface.h"
+
+static void gwd_settings_xproperty_storage_interface_default_init (GWDSettingsXPropertyStorageInterface *settings_interface);
+
+G_DEFINE_INTERFACE (GWDSettingsXPropertyStorage, gwd_settings_xproperty_storage_interface, G_TYPE_OBJECT);
+
+static void gwd_settings_xproperty_storage_interface_default_init (GWDSettingsXPropertyStorageInterface *settings_interface)
+{
+}
+
+gboolean
+gwd_settings_xproperty_storage_update_all (GWDSettingsXPropertyStorage *storage)
+{
+    GWDSettingsXPropertyStorageInterface *iface = GWD_SETTINGS_XPROPERTY_STORAGE_GET_INTERFACE (storage);
+    return (*iface->update_all) (storage);
+}

=== added file 'gtk/window-decorator/gwd-settings-xproperty-interface.h'
--- gtk/window-decorator/gwd-settings-xproperty-interface.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-xproperty-interface.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,51 @@
+/*
+ * Copyright © 2010 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_SETTINGS_XPROPERTY_STORAGE_INTERFACE_H
+#define _COMPIZ_GWD_SETTINGS_XPROPERTY_STORAGE_INTERFACE_H
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define GWD_SETTINGS_XPROPERTY_STORAGE_INTERFACE(obj) (G_TYPE_CHECK_INSTANCE_CAST (obj, \
+										   GWD_TYPE_XPROPERTY_SETTINGS_STORAGE_INTERFACE, \
+										   GWDSettingsXPropertyStorage))
+#define GWD_SETTINGS_XPROPERTY_STORAGE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE(obj, \
+											 GWD_TYPE_XPROPERTY_SETTINGS_STORAGE_INTERFACE, \
+											 GWDSettingsXPropertyStorageInterface))
+#define GWD_TYPE_XPROPERTY_SETTINGS_STORAGE_INTERFACE (gwd_settings_xproperty_storage_interface_get_type ())
+
+typedef struct _GWDSettingsXPropertyStorage GWDSettingsXPropertyStorage;
+typedef struct _GWDSettingsXPropertyStorageInterface GWDSettingsXPropertyStorageInterface;
+
+struct _GWDSettingsXPropertyStorageInterface
+{
+    GTypeInterface parent;
+
+    gboolean (*update_all) (GWDSettingsXPropertyStorage *storage);
+};
+
+gboolean
+gwd_settings_xproperty_storage_update_all (GWDSettingsXPropertyStorage *storage);
+
+GType gwd_settings_xproperty_storage_interface_get_type (void);
+
+G_END_DECLS
+
+#endif

=== added file 'gtk/window-decorator/gwd-settings-xproperty-storage.c'
--- gtk/window-decorator/gwd-settings-xproperty-storage.c	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-xproperty-storage.c	2012-09-01 07:19:22 +0000
@@ -0,0 +1,261 @@
+#include <glib-object.h>
+#include <string.h>
+
+#include "gtk-window-decorator.h"
+
+#include "gwd-settings-writable-interface.h"
+#include "gwd-settings-xproperty-interface.h"
+#include "gwd-settings-xproperty-storage.h"
+
+#define GWD_SETTINGS_STORAGE_XPROP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GWD_TYPE_SETTINGS_STORAGE_XPROP, GWDSettingsStorageXProp));
+#define GWD_SETTINGS_STORAGE_XPROP_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GWD_TYPE_SETTINGS_STORAGE_XPROP, GWDSettingsStorageXPropClass));
+#define GWD_IS_MOCK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GWD_TYPE_SETTINGS_STORAGE_XPROP));
+#define GWD_IS_MOCK_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_TYPE ((obj), GWD_TYPE_SETTINGS_STORAGE_XPROP));
+#define GWD_SETTINGS_STORAGE_XPROP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GWD_TYPE_SETTINGS_STORAGE_XPROP, GWDSettingsStorageXPropClass));
+
+typedef struct _GWDSettingsStorageXProp
+{
+    GObject parent;
+} GWDSettingsStorageXProp;
+
+typedef struct _GWDSettingsStorageXPropClass
+{
+    GObjectClass parent_class;
+} GWDSettingsStorageXPropClass;
+
+static void gwd_settings_storage_xprop_interface_init (GWDSettingsXPropertyStorageInterface *interface);
+
+G_DEFINE_TYPE_WITH_CODE (GWDSettingsStorageXProp, gwd_settings_storage_xprop, G_TYPE_OBJECT,
+			 G_IMPLEMENT_INTERFACE (GWD_TYPE_XPROPERTY_SETTINGS_STORAGE_INTERFACE,
+						gwd_settings_storage_xprop_interface_init))
+
+#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GWD_TYPE_SETTINGS_STORAGE_XPROP, GWDSettingsStorageXPropPrivate))
+
+enum
+{
+    GWD_SETTINGS_STORAGE_XPROP_PROPERTY_WRITABLE_SETTINGS = 1,
+    GWD_SETTINGS_STORAGE_XPROP_PROPERTY_DISPLAY = 2,
+    GWD_SETTINGS_STORAGE_XPROP_PROPERTY_ROOT = 3
+};
+
+typedef struct _GWDSettingsStorageXPropPrivate
+{
+    Display *xdpy;
+    Window  root;
+    GWDSettingsWritable *writable;
+
+} GWDSettingsStorageXPropPrivate;
+
+static gboolean gwd_settings_storage_xprop_update_all (GWDSettingsXPropertyStorage *storage)
+{
+    GWDSettingsStorageXProp *xprop = GWD_SETTINGS_STORAGE_XPROP (storage);
+    GWDSettingsStorageXPropPrivate *priv = GET_PRIVATE (xprop);
+
+    Atom actual;
+    int  result, format;
+    unsigned long n, left;
+    unsigned char *prop_data;
+    XTextProperty shadow_color_xtp;
+
+    gdouble aradius;
+    gdouble aopacity;
+    gint ax_off;
+    gint ay_off;
+    char *active_shadow_color = NULL;
+
+    gdouble iradius;
+    gdouble iopacity;
+    gint ix_off;
+    gint iy_off;
+    char *inactive_shadow_color = NULL;
+
+    result = XGetWindowProperty (priv->xdpy, priv->root, compiz_shadow_info_atom,
+				 0, 32768, 0, XA_INTEGER, &actual,
+				 &format, &n, &left, &prop_data);
+
+    if (result != Success)
+	return FALSE;
+
+    if (n == 8)
+    {
+	long *data      = (long *) prop_data;
+	aradius  = data[0];
+	aopacity = data[1];
+	ax_off      = data[2];
+	ay_off      = data[3];
+
+	iradius  = data[4];
+	iopacity = data[5];
+	ix_off      = data[6];
+	iy_off      = data[7];
+	/* Radius and Opacity are multiplied by 1000 to keep precision,
+	 * divide by that much to get our real radius and opacity
+	 */
+	aradius /= 1000;
+	aopacity /= 1000;
+	iradius /= 1000;
+	iopacity /= 1000;
+
+	XFree (prop_data);
+    }
+    else
+    {
+	XFree (prop_data);
+	return FALSE;
+    }
+
+    result = XGetTextProperty (priv->xdpy, priv->root, &shadow_color_xtp,
+			       compiz_shadow_color_atom);
+
+    if (shadow_color_xtp.value)
+    {
+	int  ret_count = 0;
+	char **t_data = NULL;
+
+	XTextPropertyToStringList (&shadow_color_xtp, &t_data, &ret_count);
+
+	if (ret_count == 2)
+	{
+	    active_shadow_color = strdup (t_data[0]);
+	    inactive_shadow_color = strdup (t_data[1]);
+
+	    XFree (shadow_color_xtp.value);
+	    if (t_data)
+		XFreeStringList (t_data);
+	}
+	else
+	{
+	    XFree (shadow_color_xtp.value);
+	    return FALSE;
+	}
+    }
+
+    return gwd_settings_writable_shadow_property_changed (priv->writable,
+							  (gdouble) MAX (0.0, MIN (aradius, 48.0)),
+							  (gdouble) MAX (0.0, MIN (aopacity, 6.0)),
+							  (gdouble) MAX (-16, MIN (ax_off, 16)),
+							  (gdouble) MAX (-16, MIN (ay_off, 16)),
+							  active_shadow_color,
+							  (gdouble) MAX (0.0, MIN (iradius, 48.0)),
+							  (gdouble) MAX (0.0, MIN (iopacity, 6.0)),
+							  (gdouble) MAX (-16, MIN (ix_off, 16)),
+							  (gdouble) MAX (-16, MIN (iy_off, 16)),
+							  inactive_shadow_color);
+}
+
+static void gwd_settings_storage_xprop_interface_init (GWDSettingsXPropertyStorageInterface *interface)
+{
+    interface->update_all = gwd_settings_storage_xprop_update_all;
+}
+
+static void gwd_settings_storage_xprop_dispose (GObject *object)
+{
+    GWDSettingsStorageXPropPrivate *priv = GET_PRIVATE (object);
+
+    G_OBJECT_CLASS (gwd_settings_storage_xprop_parent_class)->dispose (object);
+
+    if (priv->writable)
+	g_object_unref (priv->writable);
+}
+
+static void gwd_settings_storage_xprop_finalize (GObject *object)
+{
+    G_OBJECT_CLASS (gwd_settings_storage_xprop_parent_class)->finalize (object);
+}
+
+static void gwd_settings_storage_xprop_set_property (GObject *object,
+						     guint   property_id,
+						     const GValue *value,
+						     GParamSpec *pspec)
+{
+    GWDSettingsStorageXPropPrivate *priv = GET_PRIVATE (object);
+
+    switch (property_id)
+    {
+	case GWD_SETTINGS_STORAGE_XPROP_PROPERTY_WRITABLE_SETTINGS:
+	    g_return_if_fail (!priv->writable);
+	    priv->writable = g_value_get_pointer (value);
+	    break;
+	case GWD_SETTINGS_STORAGE_XPROP_PROPERTY_DISPLAY:
+	    g_return_if_fail (!priv->xdpy);
+	    priv->xdpy = (Display *) g_value_get_pointer (value);
+	    break;
+	case GWD_SETTINGS_STORAGE_XPROP_PROPERTY_ROOT:
+	    g_return_if_fail (!priv->root);
+	    priv->root = (Window) g_value_get_int (value);
+	    break;
+	default:
+	    break;
+    }
+}
+
+static void gwd_settings_storage_xprop_class_init (GWDSettingsStorageXPropClass *klass)
+{
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    g_type_class_add_private (klass, sizeof (GWDSettingsStorageXPropPrivate));
+
+    object_class->dispose = gwd_settings_storage_xprop_dispose;
+    object_class->finalize = gwd_settings_storage_xprop_finalize;
+    object_class->set_property = gwd_settings_storage_xprop_set_property;
+
+    g_object_class_install_property (object_class,
+				     GWD_SETTINGS_STORAGE_XPROP_PROPERTY_WRITABLE_SETTINGS,
+				     g_param_spec_pointer ("writable-settings",
+							   "GWDSettingsWritable",
+							   "An object that implements GWDSettingsWritable",
+							   G_PARAM_WRITABLE |
+							   G_PARAM_CONSTRUCT_ONLY));
+    g_object_class_install_property (object_class,
+				     GWD_SETTINGS_STORAGE_XPROP_PROPERTY_DISPLAY,
+				     g_param_spec_pointer ("display",
+							   "A Display",
+							   "An Xlib connection",
+							   G_PARAM_WRITABLE |
+							   G_PARAM_CONSTRUCT_ONLY));
+    g_object_class_install_property (object_class,
+				     GWD_SETTINGS_STORAGE_XPROP_PROPERTY_ROOT,
+				     g_param_spec_int ("root-window",
+						       "Root Window",
+						       "A Window which is the root window to store properties on",
+						       0,
+						       G_MAXINT32,
+						       0,
+						       G_PARAM_WRITABLE |
+						       G_PARAM_CONSTRUCT_ONLY));
+}
+
+void gwd_settings_storage_xprop_init (GWDSettingsStorageXProp *self)
+{
+}
+
+GWDSettingsXPropertyStorage *
+gwd_settings_storage_xprop_new (Display *dpy,
+				Window  root,
+				GWDSettingsWritable *writable)
+{
+    GValue display_value = G_VALUE_INIT;
+    GValue root_window_value = G_VALUE_INIT;
+    GValue writable_value = G_VALUE_INIT;
+    g_value_init (&display_value, G_TYPE_POINTER);
+    g_value_init (&root_window_value, G_TYPE_INT);
+    g_value_init (&writable_value, G_TYPE_POINTER);
+
+    g_value_set_pointer (&display_value, dpy);
+    g_value_set_int (&root_window_value, root);
+    g_value_set_pointer (&writable_value, writable);
+
+    static const guint gwd_settings_xprop_storage_n_construction_params = 3;
+
+    GParameter param[] =
+    {
+	{ "writable-settings", writable_value },
+	{ "display", display_value },
+	{ "root-window", root_window_value }
+    };
+
+    GWDSettingsXPropertyStorage *storage = GWD_SETTINGS_XPROPERTY_STORAGE_INTERFACE (g_object_newv (GWD_TYPE_SETTINGS_STORAGE_XPROP,
+												    gwd_settings_xprop_storage_n_construction_params,
+												    param));
+    return storage;
+}

=== added file 'gtk/window-decorator/gwd-settings-xproperty-storage.h'
--- gtk/window-decorator/gwd-settings-xproperty-storage.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings-xproperty-storage.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,39 @@
+/*
+ * Copyright © 2012 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_SETTINGS_STORAGE_XPROP_H
+#define _COMPIZ_GWD_SETTINGS_STORAGE_XPROP_H
+
+#include <glib-object.h>
+
+typedef struct _GWDSettingsWritable GWDSettingsWritable;
+typedef struct _GWDSettingsXPropertyStorage GWDSettingsXPropertyStorage;
+
+G_BEGIN_DECLS
+
+#define GWD_TYPE_SETTINGS_STORAGE_XPROP (gwd_settings_storage_xprop_get_type ())
+GType gwd_settings_storage_xprop_get_type ();
+
+GWDSettingsXPropertyStorage *
+gwd_settings_storage_xprop_new (Display *xdpy,
+				Window  root,
+				GWDSettingsWritable *writable);
+
+G_END_DECLS
+
+#endif

=== added file 'gtk/window-decorator/gwd-settings.c'
--- gtk/window-decorator/gwd-settings.c	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings.c	2012-09-01 07:19:22 +0000
@@ -0,0 +1,903 @@
+#include <glib-object.h>
+
+#include <stdlib.h>
+#include <stdio.h>
+
+#include "gwd-settings.h"
+#include "gwd-settings-interface.h"
+#include "gwd-settings-writable-interface.h"
+#include "gwd-settings-notified-interface.h"
+#include "decoration.h"
+
+#define GWD_SETTINGS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GWD_TYPE_SETTINGS_IMPL, GWDSettingsImpl))
+#define GWD_SETTINGS_IMPL_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GWD_TYPE_SETTINGS_IMPL, GWDSettingsImplClass))
+#define GWD_IS_SETTINGS_IMPL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GWD_TYPE_SETTINGS_IMPL))
+#define GWD_IS_SETTINGS_IMPL_CLASS(obj) (G_TYPE_CHECK_CLASS_TYPE ((obj), GWD_TYPE_SETTINGS_IMPL))
+#define GWD_SETTINGS_IMPL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GWD_TYPE_SETTINGS_IMPL, GWDSettingsImplClass))
+
+typedef struct _GWDSettingsImpl
+{
+    GObject parent;
+} GWDSettingsImpl;
+
+typedef struct _GWDSettingsImplClass
+{
+    GObjectClass parent_class;
+} GWDSettingsImplClass;
+
+static void gwd_settings_interface_init (GWDSettingsInterface *interface);
+static void gwd_settings_writable_interface_init (GWDSettingsWritableInterface *interface);
+
+G_DEFINE_TYPE_WITH_CODE (GWDSettingsImpl, gwd_settings_impl, G_TYPE_OBJECT,
+			 G_IMPLEMENT_INTERFACE (GWD_TYPE_SETTINGS_INTERFACE,
+						gwd_settings_interface_init)
+			 G_IMPLEMENT_INTERFACE (GWD_TYPE_WRITABLE_SETTINGS_INTERFACE,
+						gwd_settings_writable_interface_init))
+
+#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GWD_TYPE_SETTINGS_IMPL, GWDSettingsImplPrivate))
+
+enum
+{
+    GWD_SETTINGS_IMPL_PROPERTY_ACTIVE_SHADOW = 1,
+    GWD_SETTINGS_IMPL_PROPERTY_INACTIVE_SHADOW = 2,
+    GWD_SETTINGS_IMPL_PROPERTY_USE_TOOLTIPS = 3,
+    GWD_SETTINGS_IMPL_PROPERTY_DRAGGABLE_BORDER_WIDTH = 4,
+    GWD_SETTINGS_IMPL_PROPERTY_ATTACH_MODAL_DIALOGS = 5,
+    GWD_SETTINGS_IMPL_PROPERTY_BLUR_CHANGED = 6,
+    GWD_SETTINGS_IMPL_PROPERTY_METACITY_THEME = 7,
+    GWD_SETTINGS_IMPL_PROPERTY_ACTIVE_OPACITY = 8,
+    GWD_SETTINGS_IMPL_PROPERTY_INACTIVE_OPACITY = 9,
+    GWD_SETTINGS_IMPL_PROPERTY_ACTIVE_SHADE_OPACITY = 10,
+    GWD_SETTINGS_IMPL_PROPERTY_INACTIVE_SHADE_OPACITY = 11,
+    GWD_SETTINGS_IMPL_PROPERTY_BUTTON_LAYOUT = 12,
+    GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_ACTION_DOUBLE_CLICK = 13,
+    GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_ACTION_MIDDLE_CLICK = 14,
+    GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_ACTION_RIGHT_CLICK = 15,
+    GWD_SETTINGS_IMPL_PROPERTY_MOUSE_WHEEL_ACTION = 16,
+    GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_FONT = 17,
+    GWD_SETTINGS_IMPL_PROPERTY_CMDLINE_OPTIONS = 18,
+    GWD_SETTINGS_IMPL_PROPERTY_SETTINGS_NOTIFIED = 19
+};
+
+enum
+{
+    CMDLINE_BLUR = (1 << 0),
+    CMDLINE_THEME = (1 << 1)
+};
+
+/* Always N command line parameters + 2 for command line
+ * options enum & notified */
+const guint GWD_SETTINGS_IMPL_N_CONSTRUCTION_PARAMS = 4;
+
+typedef gboolean (*NotifyFunc) (GWDSettingsNotified *);
+
+typedef struct _GWDSettingsImplPrivate
+{
+    decor_shadow_options_t active_shadow;
+    decor_shadow_options_t inactive_shadow;
+    gboolean		   use_tooltips;
+    gint		   draggable_border_width;
+    gboolean		   attach_modal_dialogs;
+    gint		   blur_type;
+    gchar		   *metacity_theme;
+    gdouble		   metacity_active_opacity;
+    gdouble		   metacity_inactive_opacity;
+    gboolean		   metacity_active_shade_opacity;
+    gboolean		   metacity_inactive_shade_opacity;
+    gchar		   *metacity_button_layout;
+    gint		   titlebar_double_click_action;
+    gint		   titlebar_middle_click_action;
+    gint		   titlebar_right_click_action;
+    gint		   mouse_wheel_action;
+    gchar		   *titlebar_font;
+    guint		   cmdline_opts;
+    GWDSettingsNotified    *notified;
+    guint		   freeze_count;
+    GList		   *notify_funcs;
+} GWDSettingsImplPrivate;
+
+static void
+append_to_notify_funcs (GWDSettingsImpl *settings,
+			NotifyFunc	func)
+{
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings);
+
+    /* Remove if found, the new one will replace the old one */
+    GList *link = g_list_find (priv->notify_funcs, func);
+
+    if (link)
+	priv->notify_funcs = g_list_remove_link (priv->notify_funcs, link);
+
+    priv->notify_funcs = g_list_append (priv->notify_funcs, (gpointer) func);
+}
+
+static void
+invoke_notify_func (gpointer data,
+		    gpointer user_data)
+{
+    GWDSettingsNotified *notified = (GWDSettingsNotified *) user_data;
+    NotifyFunc	        func = (NotifyFunc) data;
+
+    (*func) (notified);
+}
+
+static void
+release_notify_funcs (GWDSettingsImpl *settings)
+{
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings);
+
+    if (priv->freeze_count)
+	return;
+
+    g_list_foreach (priv->notify_funcs, invoke_notify_func, priv->notified);
+    g_list_free (priv->notify_funcs);
+    priv->notify_funcs = NULL;
+}
+
+gboolean
+gwd_settings_shadow_property_changed (GWDSettingsWritable *settings,
+				      gdouble     active_shadow_radius,
+				      gdouble     active_shadow_opacity,
+				      gdouble     active_shadow_offset_x,
+				      gdouble     active_shadow_offset_y,
+				      const gchar *active_shadow_color,
+				      gdouble     inactive_shadow_radius,
+				      gdouble     inactive_shadow_opacity,
+				      gdouble     inactive_shadow_offset_x,
+				      gdouble     inactive_shadow_offset_y,
+				      const gchar *inactive_shadow_color)
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+
+    decor_shadow_options_t active_shadow, inactive_shadow;
+
+    unsigned int c[4];
+
+    active_shadow.shadow_radius = active_shadow_radius;
+    active_shadow.shadow_opacity = active_shadow_opacity;
+    active_shadow.shadow_offset_x = active_shadow_offset_x;
+    active_shadow.shadow_offset_y = active_shadow_offset_y;
+
+    if (sscanf (active_shadow_color,
+		"#%2x%2x%2x%2x",
+		&c[0], &c[1], &c[2], &c[3]) == 4)
+    {
+	active_shadow.shadow_color[0] = c[0] << 8 | c[0];
+	active_shadow.shadow_color[1] = c[1] << 8 | c[1];
+	active_shadow.shadow_color[2] = c[2] << 8 | c[2];
+    }
+    else
+	return FALSE;
+
+    if (sscanf (inactive_shadow_color,
+		"#%2x%2x%2x%2x",
+		&c[0], &c[1], &c[2], &c[3]) == 4)
+    {
+	inactive_shadow.shadow_color[0] = c[0] << 8 | c[0];
+	inactive_shadow.shadow_color[1] = c[1] << 8 | c[1];
+	inactive_shadow.shadow_color[2] = c[2] << 8 | c[2];
+    }
+    else
+	return FALSE;
+
+    inactive_shadow.shadow_radius = inactive_shadow_radius;
+    inactive_shadow.shadow_opacity = inactive_shadow_opacity;
+    inactive_shadow.shadow_offset_x = inactive_shadow_offset_x;
+    inactive_shadow.shadow_offset_y = inactive_shadow_offset_y;
+
+    gboolean changed = FALSE;
+
+    if (decor_shadow_options_cmp (&priv->inactive_shadow,
+				  &inactive_shadow))
+    {
+	changed |= TRUE;
+	priv->inactive_shadow = inactive_shadow;
+    }
+
+    if (decor_shadow_options_cmp (&priv->active_shadow,
+				  &active_shadow))
+    {
+	changed |= TRUE;
+	priv->active_shadow = active_shadow;
+    }
+
+    if (changed)
+    {
+	append_to_notify_funcs (settings_impl, gwd_settings_notified_update_decorations);
+	release_notify_funcs (settings_impl);
+    }
+
+    return changed;
+}
+
+gboolean
+gwd_settings_use_tooltips_changed (GWDSettingsWritable *settings,
+				   gboolean    use_tooltips)
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+
+    if (priv->use_tooltips != use_tooltips)
+    {
+	priv->use_tooltips = use_tooltips;
+	append_to_notify_funcs (settings_impl, gwd_settings_notified_update_decorations);
+	release_notify_funcs (settings_impl);
+	return TRUE;
+    }
+
+    return FALSE;
+}
+
+gboolean
+gwd_settings_draggable_border_width_changed (GWDSettingsWritable *settings,
+					     gint	 draggable_border_width)
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+
+    if (priv->draggable_border_width != draggable_border_width)
+    {
+	priv->draggable_border_width = draggable_border_width;
+	append_to_notify_funcs (settings_impl, gwd_settings_notified_update_decorations);
+	release_notify_funcs (settings_impl);
+	return TRUE;
+    }
+    else
+	return FALSE;
+}
+
+gboolean
+gwd_settings_attach_modal_dialogs_changed (GWDSettingsWritable *settings,
+					   gboolean    attach_modal_dialogs)
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+
+    if (priv->attach_modal_dialogs != attach_modal_dialogs)
+    {
+	priv->attach_modal_dialogs = attach_modal_dialogs;
+	append_to_notify_funcs (settings_impl, gwd_settings_notified_update_decorations);
+	release_notify_funcs (settings_impl);
+	return TRUE;
+    }
+    else
+	return FALSE;
+}
+
+gboolean
+gwd_settings_blur_changed (GWDSettingsWritable *settings,
+			   const gchar *type)
+
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+    gint new_type = -1;
+
+    if (priv->cmdline_opts & CMDLINE_BLUR)
+	return FALSE;
+
+    if (strcmp (type, "titlebar") == 0)
+	new_type = BLUR_TYPE_TITLEBAR;
+    else if (strcmp (type, "all") == 0)
+	new_type = BLUR_TYPE_ALL;
+    else if (strcmp (type, "none") == 0)
+	new_type = BLUR_TYPE_NONE;
+
+    if (new_type == -1)
+	return FALSE;
+
+    if (priv->blur_type != new_type)
+    {
+	priv->blur_type = new_type;
+	append_to_notify_funcs (settings_impl, gwd_settings_notified_update_decorations);
+	release_notify_funcs (settings_impl);
+	return TRUE;
+    }
+    else
+	return FALSE;
+}
+
+static void
+free_and_set_metacity_theme (GWDSettingsWritable *settings,
+			     const gchar	 *metacity_theme)
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+
+    if (priv->metacity_theme)
+	g_free (priv->metacity_theme);
+
+    priv->metacity_theme = g_strdup (metacity_theme);
+}
+
+gboolean
+gwd_settings_metacity_theme_changed (GWDSettingsWritable *settings,
+				     gboolean	 use_metacity_theme,
+				     const gchar *metacity_theme)
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+
+    if (priv->cmdline_opts & CMDLINE_THEME)
+	return FALSE;
+
+    if (!metacity_theme)
+	return FALSE;
+
+    if (use_metacity_theme)
+    {
+	if (g_strcmp0 (metacity_theme, priv->metacity_theme) == 0)
+	    return FALSE;
+
+	free_and_set_metacity_theme (settings, metacity_theme);
+    }
+    else
+	free_and_set_metacity_theme (settings, "");
+
+    append_to_notify_funcs (settings_impl, gwd_settings_notified_update_metacity_theme);
+    append_to_notify_funcs (settings_impl, gwd_settings_notified_update_decorations);
+    release_notify_funcs (settings_impl);
+
+    return TRUE;
+}
+
+gboolean
+gwd_settings_opacity_changed (GWDSettingsWritable *settings,
+			      gdouble inactive_opacity,
+			      gdouble active_opacity,
+			      gboolean inactive_shade_opacity,
+			      gboolean active_shade_opacity)
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+
+    if (priv->metacity_active_opacity == active_opacity &&
+	priv->metacity_inactive_opacity == inactive_opacity &&
+	priv->metacity_active_shade_opacity == active_shade_opacity &&
+	priv->metacity_inactive_shade_opacity == inactive_shade_opacity)
+	return FALSE;
+
+    priv->metacity_active_opacity = active_opacity;
+    priv->metacity_inactive_opacity = inactive_opacity;
+    priv->metacity_active_shade_opacity = active_shade_opacity;
+    priv->metacity_inactive_shade_opacity = inactive_shade_opacity;
+
+    append_to_notify_funcs (settings_impl, gwd_settings_notified_update_decorations);
+    release_notify_funcs (settings_impl);
+
+    return TRUE;
+}
+
+gboolean
+gwd_settings_button_layout_changed (GWDSettingsWritable *settings,
+				    const gchar *button_layout)
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+
+    if (!button_layout)
+	return FALSE;
+
+    if (g_strcmp0 (priv->metacity_button_layout, button_layout) == 0)
+	return FALSE;
+
+    if (priv->metacity_button_layout)
+	g_free (priv->metacity_button_layout);
+
+    priv->metacity_button_layout = g_strdup (button_layout);
+
+    append_to_notify_funcs (settings_impl, gwd_settings_notified_metacity_button_layout);
+    append_to_notify_funcs (settings_impl, gwd_settings_notified_update_decorations);
+    release_notify_funcs (settings_impl);
+
+    return TRUE;
+}
+
+gboolean
+gwd_settings_font_changed (GWDSettingsWritable *settings,
+			   gboolean		titlebar_uses_system_font,
+			   const gchar		*titlebar_font)
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+
+    if (!titlebar_font)
+	return FALSE;
+
+    const gchar *no_font = NULL;
+    const gchar *use_font = NULL;
+
+    if (titlebar_uses_system_font)
+	use_font = no_font;
+    else
+	use_font = titlebar_font;
+
+    if (g_strcmp0 (priv->titlebar_font, use_font) == 0)
+	return FALSE;
+
+    if (priv->titlebar_font)
+    {
+	g_free (priv->titlebar_font);
+	priv->titlebar_font = NULL;
+    }
+
+    priv->titlebar_font = use_font ? g_strdup (use_font) : NULL;
+
+    append_to_notify_funcs (settings_impl, gwd_settings_notified_update_decorations);
+    append_to_notify_funcs (settings_impl, gwd_settings_notified_update_frames);
+    release_notify_funcs (settings_impl);
+
+    return TRUE;
+}
+
+static gboolean
+get_click_action_value (const gchar *action,
+			gint	    *action_value,
+			gint	    default_value)
+{
+    if (!action_value)
+	return FALSE;
+
+    *action_value = -1;
+
+    if (strcmp (action, "toggle_shade") == 0)
+	*action_value = CLICK_ACTION_SHADE;
+    else if (strcmp (action, "toggle_maximize") == 0)
+	*action_value = CLICK_ACTION_MAXIMIZE;
+    else if (strcmp (action, "minimize") == 0)
+	*action_value = CLICK_ACTION_MINIMIZE;
+    else if (strcmp (action, "raise") == 0)
+	*action_value = CLICK_ACTION_RAISE;
+    else if (strcmp (action, "lower") == 0)
+	*action_value = CLICK_ACTION_LOWER;
+    else if (strcmp (action, "menu") == 0)
+	*action_value = CLICK_ACTION_MENU;
+    else if (strcmp (action, "none") == 0)
+	*action_value = CLICK_ACTION_NONE;
+
+    if (*action_value == -1)
+    {
+	*action_value = default_value;
+	return FALSE;
+    }
+
+    return TRUE;
+}
+
+static gboolean
+get_wheel_action_value (const gchar *action,
+			gint	    *action_value,
+			gint	    default_value)
+{
+    if (!action_value)
+	return FALSE;
+
+    *action_value = -1;
+
+    if (strcmp (action, "shade") == 0)
+	*action_value = WHEEL_ACTION_SHADE;
+    else if (strcmp (action, "none") == 0)
+	*action_value = WHEEL_ACTION_NONE;
+
+    if (*action_value == -1)
+    {
+	*action_value = default_value;
+	return FALSE;
+    }
+
+    return TRUE;
+}
+
+gboolean
+gwd_settings_actions_changed (GWDSettingsWritable *settings,
+			      const gchar	   *action_double_click_titlebar,
+			      const gchar	   *action_middle_click_titlebar,
+			      const gchar	   *action_right_click_titlebar,
+			      const gchar	   *mouse_wheel_action)
+{
+    GWDSettingsImpl *settings_impl = GWD_SETTINGS_IMPL (settings);
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (settings_impl);
+
+    gboolean ret = FALSE;
+
+    ret |= get_click_action_value (action_double_click_titlebar,
+				   &priv->titlebar_double_click_action,
+				   DOUBLE_CLICK_ACTION_DEFAULT);
+    ret |= get_click_action_value (action_middle_click_titlebar,
+				   &priv->titlebar_middle_click_action,
+				   MIDDLE_CLICK_ACTION_DEFAULT);
+    ret |= get_click_action_value (action_right_click_titlebar,
+				   &priv->titlebar_right_click_action,
+				   RIGHT_CLICK_ACTION_DEFAULT);
+    ret |= get_wheel_action_value (mouse_wheel_action,
+				   &priv->mouse_wheel_action,
+				   WHEEL_ACTION_DEFAULT);
+
+    return ret;
+}
+
+static void gwd_settings_freeze_updates (GWDSettingsWritable *writable)
+{
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (writable);
+    priv->freeze_count++;
+}
+
+static void gwd_settings_thaw_updates (GWDSettingsWritable *writable)
+{
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (writable);
+
+    if (priv->freeze_count)
+	priv->freeze_count--;
+
+    release_notify_funcs (GWD_SETTINGS_IMPL (writable));
+}
+
+static void gwd_settings_writable_interface_init (GWDSettingsWritableInterface *interface)
+{
+    interface->shadow_property_changed = gwd_settings_shadow_property_changed;
+    interface->use_tooltips_changed = gwd_settings_use_tooltips_changed;
+    interface->draggable_border_width_changed = gwd_settings_draggable_border_width_changed;
+    interface->attach_modal_dialogs_changed = gwd_settings_attach_modal_dialogs_changed;
+    interface->blur_changed = gwd_settings_blur_changed;
+    interface->metacity_theme_changed = gwd_settings_metacity_theme_changed;
+    interface->opacity_changed = gwd_settings_opacity_changed;
+    interface->button_layout_changed = gwd_settings_button_layout_changed;
+    interface->font_changed = gwd_settings_font_changed;
+    interface->titlebar_actions_changed = gwd_settings_actions_changed;
+    interface->freeze_updates = gwd_settings_freeze_updates;
+    interface->thaw_updates = gwd_settings_thaw_updates;
+}
+
+static void gwd_settings_interface_init (GWDSettingsInterface *interface)
+{
+}
+
+static void gwd_settings_dispose (GObject *object)
+{
+    G_OBJECT_CLASS (gwd_settings_impl_parent_class)->dispose (object);
+}
+
+static void gwd_settings_finalize (GObject *object)
+{
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (object);
+    G_OBJECT_CLASS (gwd_settings_impl_parent_class)->finalize (object);
+
+    if (priv->metacity_theme)
+    {
+	g_free (priv->metacity_theme);
+	priv->metacity_theme = NULL;
+    }
+
+    if (priv->metacity_button_layout)
+    {
+	g_free (priv->metacity_button_layout);
+	priv->metacity_button_layout = NULL;
+    }
+
+    if (priv->titlebar_font)
+    {
+	g_free (priv->titlebar_font);
+	priv->titlebar_font = NULL;
+    }
+
+    if (priv->notified)
+    {
+	g_object_unref (priv->notified);
+	priv->notified = NULL;
+    }
+}
+
+static void gwd_settings_set_property (GObject *object,
+					guint   property_id,
+					const GValue  *value,
+					GParamSpec *pspec)
+{
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (object);
+
+    switch (property_id)
+    {
+	case GWD_SETTINGS_IMPL_PROPERTY_CMDLINE_OPTIONS:
+	    priv->cmdline_opts = g_value_get_int (value);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_BLUR_CHANGED:
+	    priv->blur_type = g_value_get_int (value);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_METACITY_THEME:
+	    if (priv->metacity_theme)
+		g_free (priv->metacity_theme);
+
+	    priv->metacity_theme = g_value_dup_string (value);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_SETTINGS_NOTIFIED:
+	    g_return_if_fail (!priv->notified);
+	    priv->notified = (GWDSettingsNotified *) g_value_get_pointer (value);
+	default:
+	    break;
+    }
+}
+
+static void gwd_settings_get_property (GObject *object,
+					guint   property_id,
+					GValue  *value,
+					GParamSpec *pspec)
+{
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (object);
+
+    switch (property_id)
+    {
+	case GWD_SETTINGS_IMPL_PROPERTY_ACTIVE_SHADOW:
+	    g_value_set_pointer (value, &priv->active_shadow);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_INACTIVE_SHADOW:
+	    g_value_set_pointer (value, &priv->inactive_shadow);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_USE_TOOLTIPS:
+	    g_value_set_boolean (value, priv->use_tooltips);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_DRAGGABLE_BORDER_WIDTH:
+	    g_value_set_int (value, priv->draggable_border_width);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_ATTACH_MODAL_DIALOGS:
+	    g_value_set_boolean (value, priv->attach_modal_dialogs);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_BLUR_CHANGED:
+	    g_value_set_int (value, priv->blur_type);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_METACITY_THEME:
+	    g_value_set_string (value, priv->metacity_theme);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_ACTIVE_OPACITY:
+	    g_value_set_double (value, priv->metacity_active_opacity);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_INACTIVE_OPACITY:
+	    g_value_set_double (value, priv->metacity_inactive_opacity);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_ACTIVE_SHADE_OPACITY:
+	    g_value_set_boolean (value, priv->metacity_active_shade_opacity);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_INACTIVE_SHADE_OPACITY:
+	    g_value_set_boolean (value, priv->metacity_inactive_shade_opacity);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_BUTTON_LAYOUT:
+	    g_value_set_string (value, priv->metacity_button_layout);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_ACTION_DOUBLE_CLICK:
+	    g_value_set_int (value, priv->titlebar_double_click_action);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_ACTION_MIDDLE_CLICK:
+	    g_value_set_int (value, priv->titlebar_middle_click_action);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_ACTION_RIGHT_CLICK:
+	    g_value_set_int (value, priv->titlebar_right_click_action);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_MOUSE_WHEEL_ACTION:
+	    g_value_set_int (value, priv->mouse_wheel_action);
+	    break;
+	case GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_FONT:
+	    g_value_set_string (value, priv->titlebar_font);
+	    break;
+	default:
+	    G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
+	    break;
+    }
+}
+
+static void gwd_settings_impl_class_init (GWDSettingsImplClass *klass)
+{
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    g_type_class_add_private (klass, sizeof (GWDSettingsImplPrivate));
+
+    object_class->dispose = gwd_settings_dispose;
+    object_class->finalize = gwd_settings_finalize;
+    object_class->get_property = gwd_settings_get_property;
+    object_class->set_property = gwd_settings_set_property;
+
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_ACTIVE_SHADOW,
+				      "active-shadow");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_INACTIVE_SHADOW,
+				      "inactive-shadow");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_USE_TOOLTIPS,
+				      "use-tooltips");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_DRAGGABLE_BORDER_WIDTH,
+				      "draggable-border-width");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_ATTACH_MODAL_DIALOGS,
+				      "attach-modal-dialogs");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_BLUR_CHANGED,
+				      "blur");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_METACITY_THEME,
+				      "metacity-theme");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_ACTIVE_OPACITY,
+				      "metacity-active-opacity");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_INACTIVE_OPACITY,
+				      "metacity-inactive-opacity");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_ACTIVE_SHADE_OPACITY,
+				      "metacity-active-shade-opacity");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_INACTIVE_SHADE_OPACITY,
+				      "metacity-inactive-shade-opacity");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_BUTTON_LAYOUT,
+				      "metacity-button-layout");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_ACTION_DOUBLE_CLICK,
+				      "titlebar-double-click-action");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_ACTION_MIDDLE_CLICK,
+				      "titlebar-middle-click-action");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_ACTION_RIGHT_CLICK,
+				      "titlebar-right-click-action");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_MOUSE_WHEEL_ACTION,
+				      "mouse-wheel-action");
+    g_object_class_override_property (object_class,
+				      GWD_SETTINGS_IMPL_PROPERTY_TITLEBAR_FONT,
+				      "titlebar-font");
+    g_object_class_install_property (object_class,
+				     GWD_SETTINGS_IMPL_PROPERTY_CMDLINE_OPTIONS,
+				     g_param_spec_int ("cmdline-options",
+						       "Command line options",
+						       "Which options were specified on the command line",
+						       0,
+						       G_MAXINT32,
+						       0,
+						       G_PARAM_READABLE |
+						       G_PARAM_WRITABLE |
+						       G_PARAM_CONSTRUCT_ONLY));
+    g_object_class_install_property (object_class,
+				     GWD_SETTINGS_IMPL_PROPERTY_SETTINGS_NOTIFIED,
+				     g_param_spec_pointer ("settings-notified",
+							   "GWDSettingsNotified",
+							   "A GWDSettingsNotified which will be updated",
+							   G_PARAM_WRITABLE |
+							   G_PARAM_CONSTRUCT_ONLY));
+}
+
+static void gwd_settings_impl_init (GWDSettingsImpl *self)
+{
+    GWDSettingsImplPrivate *priv = GET_PRIVATE (self);
+
+    priv->use_tooltips = USE_TOOLTIPS_DEFAULT;
+    priv->active_shadow.shadow_radius = ACTIVE_SHADOW_RADIUS_DEFAULT;
+    priv->active_shadow.shadow_opacity = ACTIVE_SHADOW_OPACITY_DEFAULT;
+    priv->active_shadow.shadow_offset_x = ACTIVE_SHADOW_OFFSET_X_DEFAULT;
+    priv->active_shadow.shadow_offset_y = ACTIVE_SHADOW_OFFSET_Y_DEFAULT;
+    priv->active_shadow.shadow_color[0] = 0;
+    priv->active_shadow.shadow_color[1] = 0;
+    priv->active_shadow.shadow_color[2] = 0;
+    priv->inactive_shadow.shadow_radius = INACTIVE_SHADOW_RADIUS_DEFAULT;
+    priv->inactive_shadow.shadow_opacity = INACTIVE_SHADOW_OPACITY_DEFAULT;
+    priv->inactive_shadow.shadow_offset_x = INACTIVE_SHADOW_OFFSET_X_DEFAULT;
+    priv->inactive_shadow.shadow_offset_y = INACTIVE_SHADOW_OFFSET_Y_DEFAULT;
+    priv->inactive_shadow.shadow_color[0] = 0;
+    priv->inactive_shadow.shadow_color[1] = 0;
+    priv->inactive_shadow.shadow_color[2] = 0;
+    priv->draggable_border_width  = DRAGGABLE_BORDER_WIDTH_DEFAULT;
+    priv->attach_modal_dialogs = ATTACH_MODAL_DIALOGS_DEFAULT;
+    priv->blur_type = BLUR_TYPE_DEFAULT;
+    priv->metacity_theme = g_strdup (METACITY_THEME_DEFAULT);
+    priv->metacity_active_opacity = METACITY_ACTIVE_OPACITY_DEFAULT;
+    priv->metacity_inactive_opacity = METACITY_INACTIVE_OPACITY_DEFAULT;
+    priv->metacity_active_shade_opacity = METACITY_ACTIVE_SHADE_OPACITY_DEFAULT;
+    priv->metacity_inactive_shade_opacity = METACITY_INACTIVE_SHADE_OPACITY_DEFAULT;
+    priv->metacity_button_layout = g_strdup (METACITY_BUTTON_LAYOUT_DEFAULT);
+    priv->titlebar_double_click_action = DOUBLE_CLICK_ACTION_DEFAULT;
+    priv->titlebar_middle_click_action = MIDDLE_CLICK_ACTION_DEFAULT;
+    priv->titlebar_right_click_action = RIGHT_CLICK_ACTION_DEFAULT;
+    priv->mouse_wheel_action = WHEEL_ACTION_DEFAULT;
+    priv->titlebar_font = g_strdup (TITLEBAR_FONT_DEFAULT);
+    priv->cmdline_opts = 0;
+    priv->notified = NULL;
+    priv->freeze_count = 0;
+}
+
+static gboolean
+set_blur_construction_value (gint	*blur,
+			     GParameter *params,
+			     GValue	*blur_value)
+{
+    if (blur)
+    {
+	g_value_set_int (blur_value, *blur);
+
+	params->name = "blur";
+	params->value = *blur_value;
+
+	return TRUE;
+    }
+
+    return FALSE;
+}
+
+static gboolean
+set_metacity_theme_construction_value (const gchar **metacity_theme,
+				       GParameter *params,
+				       GValue	  *metacity_theme_value)
+{
+    if (metacity_theme)
+    {
+	g_value_set_string (metacity_theme_value, *metacity_theme);
+
+	params->name = "metacity-theme";
+	params->value = *metacity_theme_value;
+
+	return TRUE;
+    }
+
+    return FALSE;
+}
+
+static guint
+set_flag_and_increment (guint n_param, guint *flags, guint flag)
+{
+    if (!flags)
+	return n_param;
+
+    *flags |= flag;
+    return n_param + 1;
+}
+
+GWDSettings *
+gwd_settings_impl_new (gint *blur,
+		       const gchar **metacity_theme,
+		       GWDSettingsNotified *notified)
+{
+    int    n_param = 0;
+    guint    cmdline_opts = 0;
+    GParameter param[GWD_SETTINGS_IMPL_N_CONSTRUCTION_PARAMS];
+
+    GValue blur_value = G_VALUE_INIT;
+    GValue metacity_theme_value = G_VALUE_INIT;
+    GValue cmdline_opts_value = G_VALUE_INIT;
+    GValue settings_notified_value = G_VALUE_INIT;
+
+    g_value_init (&blur_value, G_TYPE_INT);
+    g_value_init (&metacity_theme_value, G_TYPE_STRING);
+    g_value_init (&cmdline_opts_value, G_TYPE_INT);
+    g_value_init (&settings_notified_value, G_TYPE_POINTER);
+
+    if (set_blur_construction_value (blur, &param[n_param], &blur_value))
+	n_param = set_flag_and_increment (n_param, &cmdline_opts, CMDLINE_BLUR);
+
+    if (set_metacity_theme_construction_value (metacity_theme, &param[n_param], &metacity_theme_value))
+	n_param = set_flag_and_increment (n_param, &cmdline_opts, CMDLINE_THEME);
+
+    g_value_set_int (&cmdline_opts_value, cmdline_opts);
+
+    param[n_param].name = "cmdline-options";
+    param[n_param].value = cmdline_opts_value;
+
+    n_param++;
+
+    g_value_set_pointer (&settings_notified_value, notified);
+
+    param[n_param].name = "settings-notified";
+    param[n_param].value = settings_notified_value;
+
+    n_param++;
+
+    GWDSettingsImpl *settings = GWD_SETTINGS_IMPL (g_object_newv (GWD_TYPE_SETTINGS_IMPL, n_param, param));
+
+    g_value_unset (&blur_value);
+    g_value_unset (&metacity_theme_value);
+    g_value_unset (&cmdline_opts_value);
+
+    return GWD_SETTINGS_INTERFACE (settings);
+}
+
+
+
+
+

=== added file 'gtk/window-decorator/gwd-settings.h'
--- gtk/window-decorator/gwd-settings.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/gwd-settings.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,41 @@
+/*
+ * Copyright © 2012 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_SETTINGS_H
+#define _COMPIZ_GWD_SETTINGS_H
+
+#include <glib-object.h>
+
+typedef struct _GWDSettings GWDSettings;
+typedef struct _GWDSettingsNotified GWDSettingsNotified;
+
+G_BEGIN_DECLS
+
+#define GWD_TYPE_SETTINGS_IMPL (gwd_settings_impl_get_type ())
+GType gwd_settings_impl_get_type ();
+
+GWDSettings *
+gwd_settings_impl_new (gint *blur,
+		       const gchar **metacity_theme,
+		       GWDSettingsNotified *notified);
+
+extern const guint GWD_SETTINGS_IMPL_N_CONSTRUCTION_PARAMS;
+
+G_END_DECLS
+
+#endif

=== modified file 'gtk/window-decorator/metacity.c'
--- gtk/window-decorator/metacity.c	2012-06-22 06:11:26 +0000
+++ gtk/window-decorator/metacity.c	2012-09-01 07:19:22 +0000
@@ -55,22 +55,26 @@
     win_extents = frame_win_extents = d->frame->win_extents;
     max_win_extents = frame_max_win_extents = d->frame->max_win_extents;
 
+    gint	    mutter_draggable_border_width = 0;
+
+    g_object_get (settings, "draggable-border-width", &mutter_draggable_border_width, NULL);
+
     /* Add the invisible grab area padding, but only for
      * pixmap type decorations */
     if (!d->frame_window)
     {
 	if (flags & META_FRAME_ALLOWS_HORIZONTAL_RESIZE)
 	{
-	    frame_win_extents.left += settings->mutter_draggable_border_width;
-	    frame_win_extents.right += settings->mutter_draggable_border_width;
-	    frame_max_win_extents.left += settings->mutter_draggable_border_width;
-	    frame_max_win_extents.right += settings->mutter_draggable_border_width;
+	    frame_win_extents.left += mutter_draggable_border_width;
+	    frame_win_extents.right += mutter_draggable_border_width;
+	    frame_max_win_extents.left += mutter_draggable_border_width;
+	    frame_max_win_extents.right += mutter_draggable_border_width;
 	}
 
 	if (flags & META_FRAME_ALLOWS_VERTICAL_RESIZE)
 	{
-	    frame_win_extents.bottom += settings->mutter_draggable_border_width;
-	    frame_max_win_extents.bottom += settings->mutter_draggable_border_width;
+	    frame_win_extents.bottom += mutter_draggable_border_width;
+	    frame_max_win_extents.bottom += mutter_draggable_border_width;
 	}
     }
 
@@ -401,22 +405,22 @@
 {
     switch (type) {
     case META_BUTTON_TYPE_LEFT_LEFT_BACKGROUND:
-	type = meta_function_to_type (settings->meta_button_layout.left_buttons[0]);
+	type = meta_function_to_type (meta_button_layout.left_buttons[0]);
 	break;
     case META_BUTTON_TYPE_LEFT_MIDDLE_BACKGROUND:
-	type = meta_function_to_type (settings->meta_button_layout.left_buttons[1]);
+	type = meta_function_to_type (meta_button_layout.left_buttons[1]);
 	break;
     case META_BUTTON_TYPE_LEFT_RIGHT_BACKGROUND:
-	type = meta_function_to_type (settings->meta_button_layout.left_buttons[2]);
+	type = meta_function_to_type (meta_button_layout.left_buttons[2]);
 	break;
     case META_BUTTON_TYPE_RIGHT_LEFT_BACKGROUND:
-	type = meta_function_to_type (settings->meta_button_layout.right_buttons[0]);
+	type = meta_function_to_type (meta_button_layout.right_buttons[0]);
 	break;
     case META_BUTTON_TYPE_RIGHT_MIDDLE_BACKGROUND:
-	type = meta_function_to_type (settings->meta_button_layout.right_buttons[1]);
+	type = meta_function_to_type (meta_button_layout.right_buttons[1]);
 	break;
     case META_BUTTON_TYPE_RIGHT_RIGHT_BACKGROUND:
-	type = meta_function_to_type (settings->meta_button_layout.right_buttons[2]);
+	type = meta_function_to_type (meta_button_layout.right_buttons[2]);
     default:
 	break;
     }
@@ -467,9 +471,9 @@
     if (!(frame_type < META_FRAME_TYPE_LAST))
 	frame_type = META_FRAME_TYPE_NORMAL;
 
-    if (settings->meta_button_layout_set)
+    if (meta_button_layout_set)
     {
-	*button_layout = settings->meta_button_layout;
+	*button_layout = meta_button_layout;
     }
     else
     {
@@ -593,9 +597,17 @@
     Region	      bottom_region = NULL;
     Region	      left_region = NULL;
     Region	      right_region = NULL;
-    double	      alpha = (d->active) ? settings->meta_active_opacity : settings->meta_opacity;
-    gboolean	      shade_alpha = (d->active) ? settings->meta_active_shade_opacity :
-						  settings->meta_shade_opacity;
+    gdouble	      meta_active_opacity, meta_inactive_opacity;
+    gboolean	      meta_active_shade_opacity, meta_inactive_shade_opacity;
+
+    g_object_get (settings, "metacity-active-opacity", &meta_active_opacity, NULL);
+    g_object_get (settings, "metacity-inactive-opacity", &meta_inactive_opacity, NULL);
+    g_object_get (settings, "metacity-active-shade-opacity", &meta_active_shade_opacity, NULL);
+    g_object_get (settings, "metacity-inactive-shade-opacity", &meta_inactive_shade_opacity, NULL);
+
+    double	      alpha = (d->active) ? meta_active_opacity : meta_inactive_opacity;
+    gboolean	      shade_alpha = (d->active) ? meta_active_shade_opacity :
+						  meta_inactive_shade_opacity;
     MetaFrameStyle    *frame_style;
     GtkWidget	      *style_window;
     GdkColor	      bg_color;
@@ -613,7 +625,7 @@
 	gdk_drawable_set_colormap (GDK_DRAWABLE (d->buffer_pixmap), cmap);
     }
 
-    if (settings->decoration_alpha == 1.0)
+    if (decoration_alpha == 1.0)
 	alpha = 1.0;
 
     if (gdk_drawable_get_depth (GDK_DRAWABLE (d->pixmap)) == 32)
@@ -999,6 +1011,10 @@
     GdkRectangle      *space;
 #endif
 
+    gint mutter_draggable_border_width = 0;
+
+    g_object_get (settings, "draggable-border-width", &mutter_draggable_border_width, NULL);
+
     if (!d->context)
     {
 	/* undecorated windows implicitly have no buttons */
@@ -1107,7 +1123,7 @@
     }
     else if (flags & META_FRAME_ALLOWS_HORIZONTAL_RESIZE)
     {
-	*x += settings->mutter_draggable_border_width;
+	*x += mutter_draggable_border_width;
     }
 
     return TRUE;
@@ -1269,6 +1285,10 @@
     MetaTheme	      *theme;
     GdkRectangle      clip;
 
+    gint mutter_draggable_border_width = 0;
+
+    g_object_get (settings, "draggable-border-width", &mutter_draggable_border_width, NULL);
+
     theme = meta_theme_get_current ();
 
     meta_get_decoration_geometry (d, theme, &flags, &fgeom, &button_layout,
@@ -1299,9 +1319,9 @@
 
 	    if (!d->frame_window)
 	    {
-		*x += settings->mutter_draggable_border_width;
-		*w += settings->mutter_draggable_border_width;
-		*h += settings->mutter_draggable_border_width;
+		*x += mutter_draggable_border_width;
+		*w += mutter_draggable_border_width;
+		*h += mutter_draggable_border_width;
 	    }
 
 	    break;
@@ -1316,9 +1336,9 @@
 
 	    if (!d->frame_window)
 	    {
-		*x -= settings->mutter_draggable_border_width;
-		*h += settings->mutter_draggable_border_width;
-		*w += settings->mutter_draggable_border_width * 2;
+		*x -= mutter_draggable_border_width;
+		*h += mutter_draggable_border_width;
+		*w += mutter_draggable_border_width * 2;
 	    }
 
 	    break;
@@ -1336,8 +1356,8 @@
 
 	    if (!d->frame_window)
 	    {
-		*w += settings->mutter_draggable_border_width;
-		*h += settings->mutter_draggable_border_width;
+		*w += mutter_draggable_border_width;
+		*h += mutter_draggable_border_width;
 	    }
 
 	    break;
@@ -1356,9 +1376,9 @@
 
 	   if (!d->frame_window)
 	   {
-	       *x += settings->mutter_draggable_border_width;
-	       *w += settings->mutter_draggable_border_width;
-	       *h += settings->mutter_draggable_border_width;
+	       *x += mutter_draggable_border_width;
+	       *w += mutter_draggable_border_width;
+	       *h += mutter_draggable_border_width;
 	   }
 
 
@@ -1371,7 +1391,7 @@
 
 	    if (!d->frame_window)
 	    {
-		*x += settings->mutter_draggable_border_width;
+		*x += mutter_draggable_border_width;
 	    }
 
 	    break;
@@ -1387,8 +1407,8 @@
 
 	    if (!d->frame_window)
 	    {
-		*h += settings->mutter_draggable_border_width;
-		*w += settings->mutter_draggable_border_width;
+		*h += mutter_draggable_border_width;
+		*w += mutter_draggable_border_width;
 	    }
 
 
@@ -1411,8 +1431,8 @@
 
 	    if (!d->frame_window)
 	    {
-		*x += settings->mutter_draggable_border_width;
-		*w += settings->mutter_draggable_border_width;
+		*x += mutter_draggable_border_width;
+		*w += mutter_draggable_border_width;
 	    }
 	    break;
 	case 1: /* top */
@@ -1426,8 +1446,8 @@
 
 	    if (!d->frame_window)
 	    {
-		*x -= settings->mutter_draggable_border_width;
-		*w += settings->mutter_draggable_border_width * 2;
+		*x -= mutter_draggable_border_width;
+		*w += mutter_draggable_border_width * 2;
 	    }
 
 	    break;
@@ -1444,7 +1464,7 @@
 	    *h = fgeom.top_height + RESIZE_EXTENDS;
 
 	    if (!d->frame_window)
-		*w += settings->mutter_draggable_border_width;
+		*w += mutter_draggable_border_width;
 
 	    break;
 	}
@@ -1697,7 +1717,7 @@
 	new_layout = rtl_layout;
     }
 
-    settings->meta_button_layout = new_layout;
+    meta_button_layout = new_layout;
 }
 
 void

=== added file 'gtk/window-decorator/org.compiz.gwd.gschema.xml'
--- gtk/window-decorator/org.compiz.gwd.gschema.xml	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/org.compiz.gwd.gschema.xml	2012-09-01 07:19:22 +0000
@@ -0,0 +1,47 @@
+<?xml version="1.0"?>
+<schemalist>
+  <schema id="org.compiz.gwd" path="/org/compiz/gwd/" gettext-domain="compiz">
+    <key type="s" name="blur-type">
+      <default>'all'</default>
+      <summary>Blur Type</summary>
+      <description>Blur to use on titlebars - "all" for the entire frame, "titlebar" for just the titlebar and "none" for no blur</description>
+    </key>
+    <key type="d" name="metacity-theme-active-opacity">
+      <default>1.0</default>
+      <range min="0.0" max="1.0"/>
+      <summary>Active Opacity</summary>
+      <description>Opacity of active titlebars</description>
+    </key>
+    <key type="d" name="metacity-theme-inactive-opacity">
+      <default>1.0</default>
+      <range min="0.0" max="1.0"/>
+      <summary>Inactive Opacity</summary>
+      <description>Opacity of inactive titlebars</description>
+    </key>
+    <key type="b" name="metacity-theme-active-shade-opacity">
+      <default>true</default>
+      <summary>Active shade opacity</summary>
+      <description>Shade active windows with metacity theme decorations from opaque to translucent</description>
+    </key>
+    <key type="b" name="metacity-theme-inactive-shade-opacity">
+      <default>true</default>
+      <summary>Inactive shade opacity</summary>
+      <description>Shade inactive windows with metacity theme decorations from opaque to translucent</description>
+    </key>
+    <key type="s" name="mouse-wheel-action">
+      <default>'none'</default>
+      <summary>Action to take on scrolling a titlebar</summary>
+      <description>Action to take on scrolling a titlebar - "none" for no action, "shade" to shade the window</description>
+    </key>
+    <key type="b" name="use-metacity-theme">
+      <default>true</default>
+      <summary>Use metacity theme</summary>
+      <description>Use metacity theme when drawing window decorations</description>
+    </key>
+    <key type="b" name="use-tooltips">
+      <default>false</default>
+      <summary>Use tooltips</summary>
+      <description>Show tooltip windows on decorator functions</description>
+    </key>
+  </schema>
+</schemalist>

=== modified file 'gtk/window-decorator/settings.c'
--- gtk/window-decorator/settings.c	2012-08-17 15:53:42 +0000
+++ gtk/window-decorator/settings.c	2012-09-01 07:19:22 +0000
@@ -20,644 +20,89 @@
  */
 
 #include "gtk-window-decorator.h"
+#include "gwd-settings-writable-interface.h"
+#include "gwd-settings-storage-interface.h"
+
+#ifdef USE_GSETTINGS
+#include "gwd-settings-storage-gsettings.h"
+#else
+#ifdef USE_GCONF
+#include "gwd-settings-storage-gconf.h"
+#endif
+#endif
+
+#include "gwd-settings-xproperty-interface.h"
+#include "gwd-settings-xproperty-storage.h"
+
+GWDSettingsStorage *storage = NULL;
+GWDSettingsXPropertyStorage *xprop_storage = NULL;
+
+#ifdef USE_GSETTINGS
+
+
+#endif
 
 gboolean
-shadow_property_changed (WnckScreen *s)
+init_settings (GWDSettingsWritable *writable,
+	       WnckScreen	    *screen)
 {
+#ifdef USE_GSETTINGS
+#define STORAGE_USED
+    GSettings *compiz = gwd_get_org_compiz_gwd_settings ();
+    GSettings *mutter = gwd_get_org_gnome_mutter_settings ();
+    GSettings *gnome  = gwd_get_org_gnome_desktop_wm_preferences_settings ();
+    storage = gwd_settings_storage_gsettings_new (gnome, mutter, compiz, writable);
+
+    gwd_connect_org_compiz_gwd_settings (compiz, storage);
+    gwd_connect_org_gnome_mutter_settings (mutter, storage);
+    gwd_connect_org_gnome_desktop_wm_preferences_settings (gnome, storage);
+#else
+#ifdef USE_GSETTINGS
+#define STORAGE_USED
+    storage = gwd_settings_storage_gconf_new (writable);
+#endif
+#endif
+
     GdkDisplay *display = gdk_display_get_default ();
-    Display    *xdisplay = GDK_DISPLAY_XDISPLAY (display);
-    GdkScreen  *screen = gdk_display_get_default_screen (display);
-    Window     root = GDK_WINDOW_XWINDOW (gdk_screen_get_root_window (screen));
-    Atom actual;
-    int  result, format;
-    unsigned long n, left;
-    unsigned char *prop_data;
-    gboolean	  changed = FALSE;
-    XTextProperty shadow_color_xtp;
-
-    result = XGetWindowProperty (xdisplay, root, compiz_shadow_info_atom,
-				 0, 32768, 0, XA_INTEGER, &actual,
-				 &format, &n, &left, &prop_data);
-
-    if (result != Success)
-	return FALSE;
-
-    if (n == 8)
-    {
-	long *data      = (long *) prop_data;
-	gdouble aradius  = data[0];
-	gdouble aopacity = data[1];
-	gint ax_off      = data[2];
-	gint ay_off      = data[3];
-
-	gdouble iradius  = data[4];
-	gdouble iopacity = data[5];
-	gint ix_off      = data[6];
-	gint iy_off      = data[7];
-	/* Radius and Opacity are multiplied by 1000 to keep precision,
-	 * divide by that much to get our real radius and opacity
-	 */
-	aradius /= 1000;
-	aopacity /= 1000;
-	iradius /= 1000;
-	iopacity /= 1000;
-
-	changed = aradius != settings->active_shadow_radius   ||
-		  aopacity != settings->active_shadow_opacity ||
-		  ax_off != settings->active_shadow_offset_x  ||
-		  ay_off != settings->active_shadow_offset_y ||
-		  iradius != settings->inactive_shadow_radius   ||
-		  iopacity != settings->inactive_shadow_opacity ||
-		  ix_off != settings->inactive_shadow_offset_x  ||
-		  iy_off != settings->inactive_shadow_offset_y;
-
-	settings->active_shadow_radius = (gdouble) MAX (0.0, MIN (aradius, 48.0));
-	settings->active_shadow_opacity = (gdouble) MAX (0.0, MIN (aopacity, 6.0));
-	settings->active_shadow_offset_x = (gint) MAX (-16, MIN (ax_off, 16));
-	settings->active_shadow_offset_y = (gint) MAX (-16, MIN (ay_off, 16));
-	settings->inactive_shadow_radius = (gdouble) MAX (0.0, MIN (iradius, 48.0));
-	settings->inactive_shadow_opacity = (gdouble) MAX (0.0, MIN (iopacity, 6.0));
-	settings->inactive_shadow_offset_x = (gint) MAX (-16, MIN (ix_off, 16));
-	settings->inactive_shadow_offset_y = (gint) MAX (-16, MIN (iy_off, 16));
-    }
-
-    XFree (prop_data);
-
-    result = XGetTextProperty (xdisplay, root, &shadow_color_xtp,
-			       compiz_shadow_color_atom);
-
-    if (shadow_color_xtp.value)
-    {
-	int  ret_count = 0;
-	char **t_data = NULL;
-	
-	XTextPropertyToStringList (&shadow_color_xtp, &t_data, &ret_count);
-	
-	if (ret_count == 2)
-	{
-	    int c[4];
-
-	    if (sscanf (t_data[0], "#%2x%2x%2x%2x",
-			&c[0], &c[1], &c[2], &c[3]) == 4)
-	    {
-		settings->active_shadow_color[0] = c[0] << 8 | c[0];
-		settings->active_shadow_color[1] = c[1] << 8 | c[1];
-		settings->active_shadow_color[2] = c[2] << 8 | c[2];
-		changed = TRUE;
-	    }
-
-	    if (sscanf (t_data[1], "#%2x%2x%2x%2x",
-			&c[0], &c[1], &c[2], &c[3]) == 4)
-	    {
-		settings->inactive_shadow_color[0] = c[0] << 8 | c[0];
-		settings->inactive_shadow_color[1] = c[1] << 8 | c[1];
-		settings->inactive_shadow_color[2] = c[2] << 8 | c[2];
-		changed = TRUE;
-	    }
-	}
-
-	XFree (shadow_color_xtp.value);
-	if (t_data)
-	    XFreeStringList (t_data);
-    }
-
-    return changed;
-}
-
-void
-set_frame_scale (decor_frame_t *frame,
-		 gchar	       *font_str)
-{
-    gfloat	  scale = 1.0f;
-
-    gwd_decor_frame_ref (frame);
-
-    if (frame->titlebar_font)
-	pango_font_description_free (frame->titlebar_font);
-
-    frame->titlebar_font = pango_font_description_from_string (font_str);
-
-    scale = (*theme_get_title_scale) (frame);
-
-    pango_font_description_set_size (frame->titlebar_font,
-				     MAX (pango_font_description_get_size (frame->titlebar_font) * scale, 1));
-
-    gwd_decor_frame_unref (frame);
-}
-
-void
-set_frames_scales (gpointer key,
-		   gpointer value,
-		   gpointer user_data)
-{
-    decor_frame_t *frame = (decor_frame_t *) value;
-    gchar	  *font_str = (gchar *) user_data;
-
-    gwd_decor_frame_ref (frame);
-
-    set_frame_scale (frame, font_str);
-
-    gwd_decor_frame_unref (frame);
-}
-
-#ifdef USE_GCONF
-static gboolean
-use_tooltips_changed (GConfClient *client)
-{
-    gboolean      new_use_tooltips;
-    gboolean      use_tooltips = settings->use_tooltips;
-
-    new_use_tooltips = gconf_client_get_bool (client,
-					      USE_TOOLTIPS_KEY,
-					      NULL);
-
-    if (new_use_tooltips != use_tooltips)
-    {
-	settings->use_tooltips = new_use_tooltips;
-	return TRUE;
-    }
-
-    return FALSE;
-}
-
-static gboolean
-mutter_draggable_border_width_changed (GConfClient *client)
-{
-    static const unsigned int default_draggable_border_width = 7;
-    int      new_width = default_draggable_border_width;
-    int      width = settings->mutter_draggable_border_width;
-    GError   *error = NULL;
-
-    if (gconf_client_dir_exists (client,
-				 MUTTER_GCONF_DIR,
-				 &error))
-    {
-	if (!error)
-	    new_width = gconf_client_get_int (client,
-				              MUTTER_DRAGGABLE_BORDER_WIDTH_KEY,
-				              &error);
-    }
-
-    if (error)
-    {
-	new_width = default_draggable_border_width;
-	g_error_free (error);
-    }
-
-    if (new_width != width)
-    {
-	settings->mutter_draggable_border_width = new_width;
-	return TRUE;
-    }
-
-    return FALSE;
-}
-
-static gboolean
-mutter_attach_modal_dialogs_changed (GConfClient *client)
-{
-    gboolean      new_attach;
-    gboolean      attach = settings->mutter_attach_modal_dialogs;
-
-    new_attach = gconf_client_get_bool (client,
-					    MUTTER_ATTACH_MODAL_DIALOGS_KEY,
-					    	NULL);
-
-    if (new_attach != attach)
-    {
-	settings->mutter_attach_modal_dialogs = new_attach;
-	return TRUE;
-    }
-
-    return FALSE;
-}
-
-static gboolean
-blur_settings_changed (GConfClient *client)
-{
-    gchar *type;
-    int   new_type = settings->blur_type;
-
-    if (cmdline_options & CMDLINE_BLUR)
-	return FALSE;
-
-    type = gconf_client_get_string (client,
-				    BLUR_TYPE_KEY,
-				    NULL);
-
-    if (type)
-    {
-	if (strcmp (type, "titlebar") == 0)
-	    new_type = BLUR_TYPE_TITLEBAR;
-	else if (strcmp (type, "all") == 0)
-	    new_type = BLUR_TYPE_ALL;
-	else if (strcmp (type, "none") == 0)
-	    new_type = BLUR_TYPE_NONE;
-
-	g_free (type);
-    }
-
-    if (new_type != settings->blur_type)
-    {
-	settings->blur_type = new_type;
-	return TRUE;
-    }
-
-    return FALSE;
-}
-
-static gboolean
-theme_changed (GConfClient *client)
-{
-
-#ifdef USE_METACITY
-    gboolean use_meta_theme;
-
-    if (cmdline_options & CMDLINE_THEME)
-	return FALSE;
-
-    use_meta_theme = gconf_client_get_bool (client,
-					    USE_META_THEME_KEY,
-					    NULL);
-
-    if (use_meta_theme)
-    {
-	gchar *theme;
-
-	theme = gconf_client_get_string (client,
-					 META_THEME_KEY,
-					 NULL);
-
-	if (theme)
-	{
-	    meta_theme_set_current (theme, TRUE);
-	    if (!meta_theme_get_current ())
-		use_meta_theme = FALSE;
-
-	    g_free (theme);
-	}
-	else
-	{
-	    use_meta_theme = FALSE;
-	}
-    }
-
-    if (use_meta_theme)
-    {
-	theme_draw_window_decoration	= meta_draw_window_decoration;
-	theme_calc_decoration_size	= meta_calc_decoration_size;
-	theme_update_border_extents	= meta_update_border_extents;
-	theme_get_event_window_position = meta_get_event_window_position;
-	theme_get_button_position	= meta_get_button_position;
-	theme_get_title_scale	    	= meta_get_title_scale;
-	theme_get_shadow		= meta_get_shadow;
-    }
-    else
-    {
-	theme_draw_window_decoration	= draw_window_decoration;
-	theme_calc_decoration_size	= calc_decoration_size;
-	theme_update_border_extents	= update_border_extents;
-	theme_get_event_window_position = get_event_window_position;
-	theme_get_button_position	= get_button_position;
-	theme_get_title_scale	    	= get_title_scale;
-	theme_get_shadow		= cairo_get_shadow;
-    }
+    Display    *xdisplay = gdk_x11_display_get_xdisplay (display);
+    Window     root = gdk_x11_get_default_root_xwindow ();
+
+    xprop_storage = gwd_settings_storage_xprop_new (xdisplay,
+						    root,
+						    writable);
+
+#ifdef STORAGE_USED
+    gwd_settings_storage_update_metacity_theme (storage);
+    gwd_settings_storage_update_opacity (storage);
+    gwd_settings_storage_update_button_layout (storage);
+    gwd_settings_storage_update_font (storage);
+    gwd_settings_storage_update_titlebar_actions (storage);
+    gwd_settings_storage_update_blur (storage);
+    gwd_settings_storage_update_draggable_border_width (storage);
+    gwd_settings_storage_update_attach_modal_dialogs (storage);
+    gwd_settings_storage_update_use_tooltips (storage);
+    gwd_process_decor_shadow_property_update ();
+#else
+    storage = NULL;
+#endif
+
+#undef STORAGE_USED
 
     return TRUE;
-#else
-    theme_draw_window_decoration    = draw_window_decoration;
-    theme_calc_decoration_size	    = calc_decoration_size;
-    theme_update_border_extents	    = update_border_extents;
-    theme_get_event_window_position = get_event_window_position;
-    theme_get_button_position	    = get_button_position;
-    theme_get_title_scale	    = get_title_scale;
-    theme_get_shadow		    = cairo_get_shadow;
-
-    return FALSE;
-#endif
-
-}
-
-static gboolean
-theme_opacity_changed (GConfClient *client)
-{
-
-#ifdef USE_METACITY
-    gboolean shade_opacity, changed = FALSE;
-    gdouble  opacity;
-
-    opacity = gconf_client_get_float (client,
-				      META_THEME_OPACITY_KEY,
-				      NULL);
-
-    if (!(cmdline_options & CMDLINE_OPACITY) &&
-	opacity != settings->meta_opacity)
-    {
-	settings->meta_opacity = opacity;
-	changed = TRUE;
-    }
-
-    if (opacity < 1.0)
-    {
-	shade_opacity = gconf_client_get_bool (client,
-					       META_THEME_SHADE_OPACITY_KEY,
-					       NULL);
-
-	if (!(cmdline_options & CMDLINE_OPACITY_SHADE) &&
-	    shade_opacity != settings->meta_shade_opacity)
-	{
-	    settings->meta_shade_opacity = shade_opacity;
-	    changed = TRUE;
-	}
-    }
-
-    opacity = gconf_client_get_float (client,
-				      META_THEME_ACTIVE_OPACITY_KEY,
-				      NULL);
-
-    if (!(cmdline_options & CMDLINE_ACTIVE_OPACITY) &&
-	opacity != settings->meta_active_opacity)
-    {
-	settings->meta_active_opacity = opacity;
-	changed = TRUE;
-    }
-
-    if (opacity < 1.0)
-    {
-	shade_opacity =
-	    gconf_client_get_bool (client,
-				   META_THEME_ACTIVE_SHADE_OPACITY_KEY,
-				   NULL);
-
-	if (!(cmdline_options & CMDLINE_ACTIVE_OPACITY_SHADE) &&
-	    shade_opacity != settings->meta_active_shade_opacity)
-	{
-	    settings->meta_active_shade_opacity = shade_opacity;
-	    changed = TRUE;
-	}
-    }
-
-    return changed;
-#else
-    return FALSE;
-#endif
-
-}
-
-static gboolean
-button_layout_changed (GConfClient *client)
-{
-
-#ifdef USE_METACITY
-    gchar *button_layout;
-
-    button_layout = gconf_client_get_string (client,
-					     META_BUTTON_LAYOUT_KEY,
-					     NULL);
-
-    if (button_layout)
-    {
-	meta_update_button_layout (button_layout);
-
-	settings->meta_button_layout_set = TRUE;
-
-	g_free (button_layout);
-
-	return TRUE;
-    }
-
-    if (settings->meta_button_layout_set)
-    {
-	settings->meta_button_layout_set = FALSE;
-	return TRUE;
-    }
-#endif
-
-    return FALSE;
-}
-
-static void
-titlebar_font_changed (GConfClient *client)
-{
-    gchar *str;
-
-    str = gconf_client_get_string (client,
-				   COMPIZ_TITLEBAR_FONT_KEY,
-				   NULL);
-    if (!str)
-	str = g_strdup ("Sans Bold 12");
-
-    if (settings->font)
-    {
-	g_free (settings->font);
-	settings->font = g_strdup (str);
-    }
-
-    gwd_frames_foreach (set_frames_scales, (gpointer) settings->font);
-
-    if (str)
-	g_free (str);
-}
-
-static void
-titlebar_click_action_changed (GConfClient *client,
-			       const gchar *key,
-			       int         *action_value,
-			       int          default_value)
-{
-    gchar *action;
-
-    *action_value = default_value;
-
-    action = gconf_client_get_string (client, key, NULL);
-    if (action)
-    {
-	if (strcmp (action, "toggle_shade") == 0)
-	    *action_value = CLICK_ACTION_SHADE;
-	else if (strcmp (action, "toggle_maximize") == 0)
-	    *action_value = CLICK_ACTION_MAXIMIZE;
-	else if (strcmp (action, "minimize") == 0)
-	    *action_value = CLICK_ACTION_MINIMIZE;
-	else if (strcmp (action, "raise") == 0)
-	    *action_value = CLICK_ACTION_RAISE;
-	else if (strcmp (action, "lower") == 0)
-	    *action_value = CLICK_ACTION_LOWER;
-	else if (strcmp (action, "menu") == 0)
-	    *action_value = CLICK_ACTION_MENU;
-	else if (strcmp (action, "none") == 0)
-	    *action_value = CLICK_ACTION_NONE;
-
-	g_free (action);
-    }
-}
-
-static void
-wheel_action_changed (GConfClient *client)
-{
-    gchar *action;
-
-    settings->wheel_action = WHEEL_ACTION_DEFAULT;
-
-    action = gconf_client_get_string (client, WHEEL_ACTION_KEY, NULL);
-    if (action)
-    {
-	if (strcmp (action, "shade") == 0)
-	    settings->wheel_action = WHEEL_ACTION_SHADE;
-	else if (strcmp (action, "none") == 0)
-	    settings->wheel_action = WHEEL_ACTION_NONE;
-
-	g_free (action);
-    }
-}
-
-static void
-value_changed (GConfClient *client,
-	       const gchar *key,
-	       GConfValue  *value,
-	       void        *data)
-{
-    gboolean changed = FALSE;
-
-    if (strcmp (key, COMPIZ_USE_SYSTEM_FONT_KEY) == 0)
-    {
-	if (gconf_client_get_bool (client,
-				   COMPIZ_USE_SYSTEM_FONT_KEY,
-				   NULL) != settings->use_system_font)
-	{
-	    settings->use_system_font = !settings->use_system_font;
-	    changed = TRUE;
-	}
-    }
-    else if (strcmp (key, COMPIZ_TITLEBAR_FONT_KEY) == 0)
-    {
-	titlebar_font_changed (client);
-	changed = !settings->use_system_font;
-    }
-    else if (strcmp (key, COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY) == 0)
-    {
-	titlebar_click_action_changed (client, key,
-				       &settings->double_click_action,
-				       DOUBLE_CLICK_ACTION_DEFAULT);
-    }
-    else if (strcmp (key, COMPIZ_MIDDLE_CLICK_TITLEBAR_KEY) == 0)
-    {
-	titlebar_click_action_changed (client, key,
-				       &settings->middle_click_action,
-				       MIDDLE_CLICK_ACTION_DEFAULT);
-    }
-    else if (strcmp (key, COMPIZ_RIGHT_CLICK_TITLEBAR_KEY) == 0)
-    {
-	titlebar_click_action_changed (client, key,
-				       &settings->right_click_action,
-				       RIGHT_CLICK_ACTION_DEFAULT);
-    }
-    else if (strcmp (key, WHEEL_ACTION_KEY) == 0)
-    {
-	wheel_action_changed (client);
-    }
-    else if (strcmp (key, BLUR_TYPE_KEY) == 0)
-    {
-	if (blur_settings_changed (client))
-	    changed = TRUE;
-    }
-    else if (strcmp (key, USE_META_THEME_KEY) == 0 ||
-	     strcmp (key, META_THEME_KEY) == 0)
-    {
-	if (theme_changed (client))
-	    changed = TRUE;
-    }
-    else if (strcmp (key, META_BUTTON_LAYOUT_KEY) == 0)
-    {
-	if (button_layout_changed (client))
-	    changed = TRUE;
-    }
-    else if (strcmp (key, META_THEME_OPACITY_KEY)	       == 0 ||
-	     strcmp (key, META_THEME_SHADE_OPACITY_KEY)	       == 0 ||
-	     strcmp (key, META_THEME_ACTIVE_OPACITY_KEY)       == 0 ||
-	     strcmp (key, META_THEME_ACTIVE_SHADE_OPACITY_KEY) == 0)
-    {
-	if (theme_opacity_changed (client))
-	    changed = TRUE;
-    }
-    else if (strcmp (key, MUTTER_DRAGGABLE_BORDER_WIDTH_KEY) == 0)
-    {
-        if (mutter_draggable_border_width_changed (client))
-	    changed = TRUE;
-    }
-    else if (strcmp (key, MUTTER_ATTACH_MODAL_DIALOGS_KEY) == 0)
-    {
-	if (mutter_attach_modal_dialogs_changed (client))
-	    changed = TRUE;
-    }
-    else if (strcmp (key, USE_TOOLTIPS_KEY) == 0)
-    {
-	if (use_tooltips_changed (client))
-	    changed = TRUE;
-    }
-
-    if (changed)
-	decorations_changed (data);
-}
-#endif
+}
+
+void
+fini_settings ()
+{
+    if (storage)
+	g_object_unref (storage);
+
+    if (xprop_storage)
+	g_object_unref (xprop_storage);
+}
 
 gboolean
-init_settings (WnckScreen *screen)
+gwd_process_decor_shadow_property_update ()
 {
-#ifdef USE_GCONF
-    GConfClient	   *gconf;
-
-    gconf = gconf_client_get_default ();
-
-    gconf_client_add_dir (gconf,
-			  GCONF_DIR,
-			  GCONF_CLIENT_PRELOAD_ONELEVEL,
-			  NULL);
-
-    gconf_client_add_dir (gconf,
-			  METACITY_GCONF_DIR,
-			  GCONF_CLIENT_PRELOAD_ONELEVEL,
-			  NULL);
-
-    gconf_client_add_dir (gconf,
-			  MUTTER_GCONF_DIR,
-			  GCONF_CLIENT_PRELOAD_ONELEVEL,
-			  NULL);
-
-    g_signal_connect (G_OBJECT (gconf),
-		      "value_changed",
-		      G_CALLBACK (value_changed),
-		      screen);
-    settings->use_system_font = gconf_client_get_bool (gconf,
-						       COMPIZ_USE_SYSTEM_FONT_KEY,
-						       NULL);
-    theme_changed (gconf);
-    theme_opacity_changed (gconf);
-    button_layout_changed (gconf);
-    titlebar_font_changed (gconf);
-
-    titlebar_click_action_changed (gconf,
-				   COMPIZ_DOUBLE_CLICK_TITLEBAR_KEY,
-				   &settings->double_click_action,
-				   DOUBLE_CLICK_ACTION_DEFAULT);
-    titlebar_click_action_changed (gconf,
-				   COMPIZ_MIDDLE_CLICK_TITLEBAR_KEY,
-				   &settings->middle_click_action,
-				   MIDDLE_CLICK_ACTION_DEFAULT);
-    titlebar_click_action_changed (gconf,
-				   COMPIZ_RIGHT_CLICK_TITLEBAR_KEY,
-				   &settings->right_click_action,
-				   RIGHT_CLICK_ACTION_DEFAULT);
-    wheel_action_changed (gconf);
-    blur_settings_changed (gconf);
-
-    mutter_draggable_border_width_changed (gconf);
-    mutter_attach_modal_dialogs_changed (gconf);
-    use_tooltips_changed (gconf);
-
-    g_object_unref (gconf);
-#endif
-
-    shadow_property_changed (screen);
-
-    return TRUE;
+    return gwd_settings_xproperty_storage_update_all (xprop_storage);
 }

=== added directory 'gtk/window-decorator/tests'
=== added file 'gtk/window-decorator/tests/CMakeLists.txt'
--- gtk/window-decorator/tests/CMakeLists.txt	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/CMakeLists.txt	2012-09-01 07:19:22 +0000
@@ -0,0 +1,114 @@
+include (CompizGSettings)
+
+include_directories (${CMAKE_CURRENT_SOURCE_DIR}
+                     ${CMAKE_CURRENT_SOURCE_DIR}/../
+		     ${CMAKE_CURRENT_BINARY_DIR})
+
+configure_file (${CMAKE_CURRENT_SOURCE_DIR}/compiz_gwd_tests.h.in
+                ${CMAKE_CURRENT_BINARY_DIR}/compiz_gwd_tests.h)
+
+pkg_check_modules (COMPIZ_TEST_GTK_WINDOW_DECORATOR
+		   glib-2.0>=2.28
+                   gio-2.0>=2.25.0)
+
+if (COMPIZ_TEST_GTK_WINDOW_DECORATOR_FOUND)
+
+    link_directories (${CMAKE_CURRENT_BINARY_DIR}
+		      ${CMAKE_CURRENT_BINARY_DIR}/..)
+
+    add_library (gtk_window_decorator_mock_settings_storage STATIC
+		 ${CMAKE_CURRENT_SOURCE_DIR}/compiz_gwd_mock_settings_storage.cpp)
+
+    target_link_libraries (gtk_window_decorator_mock_settings_storage
+			   gtk_window_decorator_settings_storage_interface)
+
+    add_library (gtk_window_decorator_mock_settings STATIC
+	         ${CMAKE_CURRENT_SOURCE_DIR}/compiz_gwd_mock_settings.cpp)
+
+    target_link_libraries (gtk_window_decorator_mock_settings
+		           gtk_window_decorator_settings_interface)
+
+    add_library (gtk_window_decorator_mock_settings_writable STATIC
+	         ${CMAKE_CURRENT_SOURCE_DIR}/compiz_gwd_mock_settings_writable.cpp)
+
+    target_link_libraries (gtk_window_decorator_mock_settings_writable
+		           gtk_window_decorator_settings_writable_interface)
+
+    add_library (gtk_window_decorator_mock_settings_notified STATIC
+		 ${CMAKE_CURRENT_SOURCE_DIR}/compiz_gwd_mock_settings_notified.cpp)
+
+    target_link_libraries (gtk_window_decorator_mock_settings_notified
+			   gtk_window_decorator_settings_notified_interface)
+
+    add_executable (compiz_test_gwd_settings
+		    ${CMAKE_CURRENT_SOURCE_DIR}/test_gwd_settings.cpp)
+
+    set (COMPIZ_TEST_GWD_SETTINGS_ADDITIONAL_LIBRARIES
+         gtk_window_decorator_settings
+         gtk_window_decorator_mock_settings
+         gtk_window_decorator_mock_settings_writable
+         gtk_window_decorator_mock_settings_storage
+         gtk_window_decorator_mock_settings_notified)
+
+    set (COMPIZ_TEST_GWD_SETTINGS_COVERAGE_TARGETS
+         gtk_window_decorator_settings
+         gtk_window_decorator_settings_interface
+         gtk_window_decorator_settings_storage_interface
+         gtk_window_decorator_settings_notified_interface)
+
+    if (USE_GSETTINGS)
+        add_definitions (-DUSE_GSETTINGS)
+        set (_desktop_gschema_name org.gnome.desktop.wm.preferences)
+        set (_desktop_gschema_filename ${_desktop_gschema_name}.gschema.xml)
+        set (_desktop_gschema_filepath ${CMAKE_CURRENT_SOURCE_DIR}/${_desktop_gschema_filename})
+        set (_desktop_gschema_generated_location ${CMAKE_BINARY_DIR}/generated/glib-2.0/schemas/${_desktop_gschema_filename})
+
+        add_custom_command (OUTPUT ${_desktop_gschema_generated_location}
+                            COMMAND cp -r ${_desktop_gschema_filepath} ${_desktop_gschema_generated_location}
+                            DEPENDS ${_desktop_gschema_filepath}
+                            VERBATIM)
+
+        add_custom_target (compiz_gwd_gsettings_org_gnome_desktop_wm_preferences_schema ALL
+                           DEPENDS ${_desktop_gschema_generated_location})
+
+        add_gsettings_schema_to_recompilation_list (compiz_gwd_gsettings_org_gnome_desktop_wm_preferences_schema)
+
+        set (_mutter_gschema_name org.gnome.desktop.wm.preferences)
+        set (_mutter_gschema_filename ${_mutter_gschema_name}.gschema.xml)
+        set (_mutter_gschema_filepath ${CMAKE_CURRENT_SOURCE_DIR}/${_mutter_gschema_filename})
+        set (_mutter_gschema_generated_location ${CMAKE_BINARY_DIR}/generated/glib-2.0/schemas/${_mutter_gschema_filename})
+
+        add_custom_command (OUTPUT ${_mutter_gschema_generated_location}
+                            COMMAND cp -r ${_mutter_gschema_filepath} ${_mutter_gschema_generated_location}
+                            DEPENDS ${_mutter_gschema_filepath}
+                            VERBATIM)
+
+        add_custom_target (compiz_gwd_gsettings_org_gnome_mutter_schema ALL
+                           DEPENDS ${_mutter_gschema_generated_location})
+
+        add_gsettings_schema_to_recompilation_list (compiz_gwd_gsettings_org_gnome_mutter_schema)
+
+        set (COMPIZ_TEST_GWD_SETTINGS_ADDITIONAL_LIBRARIES
+             ${COMPIZ_TEST_GWD_SETTINGS_ADDITIONAL_LIBRARIES}
+             gtk_window_decorator_settings_storage_gsettings)
+
+        set (COMPIZ_TEST_GWD_SETTINGS_COVERAGE_TARGETS
+             ${COMPIZ_TEST_GWD_SETTINGS_COVERAGE_TARGETS}
+            gtk_window_decorator_settings_storage_gsettings)
+    endif (USE_GSETTINGS)
+
+
+    target_link_libraries (compiz_test_gwd_settings
+                           ${COMPIZ_TEST_GWD_SETTINGS_ADDITIONAL_LIBRARIES}
+			   decoration
+		           ${COMPIZ_TEST_GTK_WINDOW_DECORATOR_LIBRARIES}
+			   ${CMAKE_THREAD_LIBS_INIT} # Link in pthread.
+		           ${GTEST_BOTH_LIBRARIES}
+			   ${GMOCK_LIBRARY}
+		       	   ${GMOCK_MAIN_LIBRARY})
+
+    compiz_discover_tests (compiz_test_gwd_settings
+			   COVERAGE
+                           ${COMPIZ_TEST_GWD_SETTINGS_COVERAGE_TARGETS})
+
+endif (COMPIZ_TEST_GTK_WINDOW_DECORATOR_FOUND)

=== added file 'gtk/window-decorator/tests/compiz_gwd_mock_settings.cpp'
--- gtk/window-decorator/tests/compiz_gwd_mock_settings.cpp	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/compiz_gwd_mock_settings.cpp	2012-09-01 07:19:22 +0000
@@ -0,0 +1,186 @@
+#include <gtest/gtest.h>
+#include <gmock/gmock.h>
+
+#include <glib-object.h>
+
+#include "gwd-settings-interface.h"
+#include "compiz_gwd_mock_settings.h"
+
+#define GWD_MOCK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GWD_TYPE_MOCK_SETTINGS, GWDMockSettings));
+#define GWD_MOCK_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GWD_TYPE_MOCK_SETTINGS, GWDMockSettingsClass));
+#define GWD_IS_MOCK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GWD_TYPE_MOCK_SETTINGS));
+#define GWD_IS_MOCK_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_TYPE ((obj), GWD_TYPE_MOCK_SETTINGS));
+#define GWD_MOCK_SETTINGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GWD_TYPE_MOCK_SETTINGS, GWDMockSettingsClass));
+
+typedef struct _GWDMockSettings
+{
+    GObject parent;
+} GWDMockSettings;
+
+typedef struct _GWDMockSettingsClass
+{
+    GObjectClass parent_class;
+} GWDMockSettingsClass;
+
+static void gwd_mock_settings_interface_init (GWDSettingsInterface *interface);
+
+G_DEFINE_TYPE_WITH_CODE (GWDMockSettings, gwd_mock_settings, G_TYPE_OBJECT,
+			 G_IMPLEMENT_INTERFACE (GWD_TYPE_SETTINGS_INTERFACE,
+						gwd_mock_settings_interface_init))
+
+#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GWD_TYPE_MOCK_SETTINGS, GWDMockSettingsPrivate))
+
+typedef struct _GWDMockSettingsPrivate
+{
+    GWDMockSettingsGMockInterface *mock;
+} GWDMockSettingsPrivate;
+
+static void gwd_mock_settings_interface_init (GWDSettingsInterface *interface)
+{
+}
+
+static void gwd_mock_settings_dispose (GObject *object)
+{
+    GWDMockSettingsGMockInterface *settingsGMock = GET_PRIVATE (object)->mock;
+    G_OBJECT_CLASS (gwd_mock_settings_parent_class)->dispose (object);
+    settingsGMock->dispose ();
+}
+
+static void gwd_mock_settings_finalize (GObject *object)
+{
+    GWDMockSettingsGMockInterface *settingsGMock = GET_PRIVATE (object)->mock;
+    G_OBJECT_CLASS (gwd_mock_settings_parent_class)->finalize (object);
+    settingsGMock->finalize ();
+}
+
+static void gwd_mock_settings_set_property (GObject *object,
+					    guint   property_id,
+					    const GValue  *value,
+					    GParamSpec *pspec)
+{
+    GWDMockSettingsPrivate *priv = GET_PRIVATE (object);
+
+    switch (property_id)
+    {
+	case GWD_MOCK_SETTINGS_PROPERTY_GMOCK_INTERFACE:
+	    if (!priv->mock)
+		priv->mock = reinterpret_cast <GWDMockSettingsGMockInterface *> (g_value_get_pointer (value));
+	    break;
+	case GWD_MOCK_SETTINGS_PROPERTY_BLUR_CHANGED:
+	case GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_OPACITY:
+	case GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_SHADE_OPACITY:
+	case GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_OPACITY:
+	case GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_SHADE_OPACITY:
+	case GWD_MOCK_SETTINGS_PROPERTY_METACITY_THEME:
+	    break;
+	default:
+	    g_assert_not_reached ();
+	    break;
+    }
+}
+
+static void gwd_mock_settings_get_property (GObject *object,
+					    guint   property_id,
+					    GValue  *value,
+					    GParamSpec *pspec)
+{
+    GWDMockSettingsGMockInterface *settingsGMock = GET_PRIVATE (object)->mock;
+    settingsGMock->getProperty (property_id, value, pspec);
+}
+
+static void gwd_mock_settings_class_init (GWDMockSettingsClass *klass)
+{
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    g_type_class_add_private (klass, sizeof (GWDMockSettingsPrivate));
+
+    object_class->dispose = gwd_mock_settings_dispose;
+    object_class->finalize = gwd_mock_settings_finalize;
+    object_class->get_property = gwd_mock_settings_get_property;
+    object_class->set_property = gwd_mock_settings_set_property;
+
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_SHADOW,
+				      "active-shadow");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_SHADOW,
+				      "inactive-shadow");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_USE_TOOLTIPS,
+				      "use-tooltips");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_DRAGGABLE_BORDER_WIDTH,
+				      "draggable-border-width");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_ATTACH_MODAL_DIALOGS,
+				      "attach-modal-dialogs");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_BLUR_CHANGED,
+				      "blur");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_METACITY_THEME,
+				      "metacity-theme");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_OPACITY,
+				      "metacity-active-opacity");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_OPACITY,
+				      "metacity-inactive-opacity");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_SHADE_OPACITY,
+				      "metacity-active-shade-opacity");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_SHADE_OPACITY,
+				      "metacity-inactive-shade-opacity");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_BUTTON_LAYOUT,
+				      "metacity-button-layout");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_ACTION_DOUBLE_CLICK,
+				      "titlebar-double-click-action");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_ACTION_MIDDLE_CLICK,
+				      "titlebar-middle-click-action");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_ACTION_RIGHT_CLICK,
+				      "titlebar-right-click-action");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_MOUSE_WHEEL_ACTION,
+				      "mouse-wheel-action");
+    g_object_class_override_property (object_class,
+				      GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_FONT,
+				      "titlebar-font");
+    g_object_class_install_property (object_class,
+				     GWD_MOCK_SETTINGS_PROPERTY_GMOCK_INTERFACE,
+				     g_param_spec_pointer ("gmock-interface",
+							   "Google Mock Interface",
+							   "Google Mock Interface",
+							   static_cast <GParamFlags> (G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY)));
+}
+
+static void gwd_mock_settings_init (GWDMockSettings *self)
+{
+}
+
+GWDSettings *
+gwd_mock_settings_new (GWDMockSettingsGMockInterface *gmock)
+{
+    GValue gmock_interface_v = G_VALUE_INIT;
+
+    g_value_init (&gmock_interface_v, G_TYPE_POINTER);
+
+    g_value_set_pointer (&gmock_interface_v, reinterpret_cast <gpointer> (gmock));
+
+    GParameter param[1] =
+    {
+	{ "gmock-interface", gmock_interface_v }
+    };
+
+    GWDSettings *settings = GWD_SETTINGS_INTERFACE (g_object_newv (GWD_TYPE_MOCK_SETTINGS, 1, param));
+
+    g_value_unset (&gmock_interface_v);
+
+    return settings;
+}
+
+

=== added file 'gtk/window-decorator/tests/compiz_gwd_mock_settings.h'
--- gtk/window-decorator/tests/compiz_gwd_mock_settings.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/compiz_gwd_mock_settings.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,86 @@
+/*
+ * Copyright © 2012 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_MOCK_SETTINGS_H
+#define _COMPIZ_GWD_MOCK_SETTINGS_H
+
+#include <gtest/gtest.h>
+#include <gmock/gmock.h>
+
+#include <glib-object.h>
+
+class GWDMockSettingsGMockInterface;
+
+typedef struct _GWDSettings GWDSettingsImpl;
+
+G_BEGIN_DECLS
+
+#define GWD_TYPE_MOCK_SETTINGS (gwd_mock_settings_get_type ())
+GType gwd_mock_settings_get_type ();
+
+GWDSettings *
+gwd_mock_settings_new (GWDMockSettingsGMockInterface *);
+
+enum
+{
+    GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_SHADOW = 1,
+    GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_SHADOW = 2,
+    GWD_MOCK_SETTINGS_PROPERTY_USE_TOOLTIPS = 3,
+    GWD_MOCK_SETTINGS_PROPERTY_DRAGGABLE_BORDER_WIDTH = 4,
+    GWD_MOCK_SETTINGS_PROPERTY_ATTACH_MODAL_DIALOGS = 5,
+    GWD_MOCK_SETTINGS_PROPERTY_BLUR_CHANGED = 6,
+    GWD_MOCK_SETTINGS_PROPERTY_METACITY_THEME = 7,
+    GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_OPACITY = 8,
+    GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_OPACITY = 9,
+    GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_SHADE_OPACITY = 10,
+    GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_SHADE_OPACITY = 11,
+    GWD_MOCK_SETTINGS_PROPERTY_BUTTON_LAYOUT = 12,
+    GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_ACTION_DOUBLE_CLICK = 13,
+    GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_ACTION_MIDDLE_CLICK = 14,
+    GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_ACTION_RIGHT_CLICK = 15,
+    GWD_MOCK_SETTINGS_PROPERTY_MOUSE_WHEEL_ACTION = 16,
+    GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_FONT = 17,
+    GWD_MOCK_SETTINGS_PROPERTY_GMOCK_INTERFACE = 18
+};
+
+G_END_DECLS
+
+class GWDMockSettingsGMockInterface
+{
+    public:
+
+	virtual ~GWDMockSettingsGMockInterface () {}
+
+	virtual void getProperty (guint property_id,
+				  GValue *property_value,
+				  GParamSpec *pspec) = 0;
+	virtual void dispose () = 0;
+	virtual void finalize () = 0;
+};
+
+class GWDMockSettingsGMock :
+    public GWDMockSettingsGMockInterface
+{
+    public:
+
+	MOCK_METHOD3 (getProperty, void (guint, GValue *, GParamSpec *));
+	MOCK_METHOD0 (dispose, void ());
+	MOCK_METHOD0 (finalize, void ());
+};
+
+#endif

=== added file 'gtk/window-decorator/tests/compiz_gwd_mock_settings_notified.cpp'
--- gtk/window-decorator/tests/compiz_gwd_mock_settings_notified.cpp	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/compiz_gwd_mock_settings_notified.cpp	2012-09-01 07:19:22 +0000
@@ -0,0 +1,173 @@
+#include <gtest/gtest.h>
+#include <gmock/gmock.h>
+
+#include <glib-object.h>
+
+#include "gwd-settings-notified-interface.h"
+#include "compiz_gwd_mock_settings_notified.h"
+
+#define GWD_MOCK_SETTINGS_NOTIFIED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GWD_TYPE_MOCK_SETTINGS_NOTIFIED, GWDMockSettingsNotified));
+#define GWD_MOCK_SETTINGS_NOTIFIED_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GWD_TYPE_MOCK_SETTINGS_NOTIFIED, GWDMockSettingsNotifiedClass));
+#define GWD_IS_MOCK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GWD_TYPE_MOCK_SETTINGS_NOTIFIED));
+#define GWD_IS_MOCK_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_TYPE ((obj), GWD_TYPE_MOCK_SETTINGS_NOTIFIED));
+#define GWD_MOCK_SETTINGS_NOTIFIED_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GWD_TYPE_MOCK_SETTINGS_NOTIFIED, GWDMockSettingsNotifiedClass));
+
+typedef struct _GWDMockSettingsNotified
+{
+    GObject parent;
+} GWDMockSettingsNotified;
+
+typedef struct _GWDMockSettingsNotifiedClass
+{
+    GObjectClass parent_class;
+} GWDMockSettingsNotifiedClass;
+
+static void gwd_mock_settings_notified_interface_init (GWDSettingsNotifiedInterface *interface);
+
+G_DEFINE_TYPE_WITH_CODE (GWDMockSettingsNotified, gwd_mock_settings_notified, G_TYPE_OBJECT,
+			 G_IMPLEMENT_INTERFACE (GWD_TYPE_SETTINGS_NOTIFIED_INTERFACE,
+						gwd_mock_settings_notified_interface_init))
+
+#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GWD_TYPE_MOCK_SETTINGS_NOTIFIED, GWDMockSettingsNotifiedPrivate))
+
+enum
+{
+    GWD_MOCK_SETTINGS_NOTIFIED_PROPERTY_GMOCK_INTERFACE = 1
+};
+
+typedef struct _GWDMockSettingsNotifiedPrivate
+{
+    GWDMockSettingsNotifiedGMockInterface *mock;
+} GWDMockSettingsNotifiedPrivate;
+
+gboolean
+gwd_mock_settings_notified_update_decorations (GWDSettingsNotified *notified)
+{
+    GWDMockSettingsNotifiedGMockInterface *notifiedGMock = GET_PRIVATE (notified)->mock;
+    return notifiedGMock->updateDecorations ();
+}
+
+gboolean
+gwd_mock_settings_notified_update_frames (GWDSettingsNotified *notified)
+{
+    GWDMockSettingsNotifiedGMockInterface *notifiedGMock = GET_PRIVATE (notified)->mock;
+    return notifiedGMock->updateFrames ();
+}
+
+gboolean
+gwd_mock_settings_notified_update_metacity_theme (GWDSettingsNotified *notified)
+{
+    GWDMockSettingsNotifiedGMockInterface *notifiedGMock = GET_PRIVATE (notified)->mock;
+    return notifiedGMock->updateMetacityTheme ();
+}
+
+gboolean
+gwd_mock_settings_notified_update_metacity_button_layout (GWDSettingsNotified *notified)
+{
+    GWDMockSettingsNotifiedGMockInterface *notifiedGMock = GET_PRIVATE (notified)->mock;
+    return notifiedGMock->updateMetacityButtonLayout ();
+}
+static void gwd_mock_settings_notified_interface_init (GWDSettingsNotifiedInterface *interface)
+{
+    interface->update_decorations = gwd_mock_settings_notified_update_decorations;
+    interface->update_frames = gwd_mock_settings_notified_update_frames;
+    interface->update_metacity_theme = gwd_mock_settings_notified_update_metacity_theme;
+    interface->update_metacity_button_layout = gwd_mock_settings_notified_update_metacity_button_layout;
+}
+
+static GObject * gwd_mock_settings_notified_constructor (GType	type,
+							 guint   n_construction_properties,
+							 GObjectConstructParam *construction_properties)
+{
+    GObject *object = G_OBJECT_CLASS (gwd_mock_settings_notified_parent_class)->constructor (type, n_construction_properties, construction_properties);
+    GWDMockSettingsNotifiedPrivate *priv = GET_PRIVATE (object);
+    guint   i = 0;
+
+    for (; i < n_construction_properties; ++i)
+    {
+	if (g_strcmp0 (construction_properties[i].pspec->name, "gmock-interface") == 0)
+	{
+	    priv->mock = reinterpret_cast <GWDMockSettingsNotifiedGMockInterface *> (g_value_get_pointer (construction_properties[i].value));
+	}
+	else
+	    g_assert_not_reached ();
+    }
+
+    return object;
+}
+
+static void gwd_mock_settings_notified_set_property (GObject *object,
+						     guint   property_id,
+						     const GValue  *value,
+						     GParamSpec *pspec)
+{
+    GWDMockSettingsNotifiedPrivate *priv = GET_PRIVATE (object);
+
+    switch (property_id)
+    {
+	case GWD_MOCK_SETTINGS_NOTIFIED_PROPERTY_GMOCK_INTERFACE:
+	    if (!priv->mock)
+		priv->mock = reinterpret_cast <GWDMockSettingsNotifiedGMockInterface *> (g_value_get_pointer (value));
+	    break;
+	default:
+	    g_assert_not_reached ();
+    }
+}
+
+static void gwd_mock_settings_notified_dispose (GObject *object)
+{
+    GWDMockSettingsNotifiedGMockInterface *settingsGMock = GET_PRIVATE (object)->mock;
+    G_OBJECT_CLASS (gwd_mock_settings_notified_parent_class)->dispose (object);
+    settingsGMock->dispose ();
+}
+
+static void gwd_mock_settings_notified_finalize (GObject *object)
+{
+    GWDMockSettingsNotifiedGMockInterface *settingsGMock = GET_PRIVATE (object)->mock;
+    G_OBJECT_CLASS (gwd_mock_settings_notified_parent_class)->finalize (object);
+    settingsGMock->finalize ();
+}
+
+static void gwd_mock_settings_notified_class_init (GWDMockSettingsNotifiedClass *klass)
+{
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    g_type_class_add_private (klass, sizeof (GWDMockSettingsNotifiedPrivate));
+
+    object_class->dispose = gwd_mock_settings_notified_dispose;
+    object_class->finalize = gwd_mock_settings_notified_finalize;
+    object_class->constructor = gwd_mock_settings_notified_constructor;
+    object_class->set_property = gwd_mock_settings_notified_set_property;
+
+    g_object_class_install_property (object_class,
+				     GWD_MOCK_SETTINGS_NOTIFIED_PROPERTY_GMOCK_INTERFACE,
+				     g_param_spec_pointer ("gmock-interface",
+							   "Google Mock Interface",
+							   "Google Mock Interface",
+							   static_cast <GParamFlags> (G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY)));
+}
+
+void gwd_mock_settings_notified_init (GWDMockSettingsNotified *self)
+{
+}
+
+GWDSettingsNotified *
+gwd_mock_settings_notified_new (GWDMockSettingsNotifiedGMockInterface *gmock)
+{
+    GValue gmock_interface_v = G_VALUE_INIT;
+
+    g_value_init (&gmock_interface_v, G_TYPE_POINTER);
+
+    g_value_set_pointer (&gmock_interface_v, reinterpret_cast <gpointer> (gmock));
+
+    GParameter param[1] =
+    {
+	{ "gmock-interface", gmock_interface_v }
+    };
+
+    GWDSettingsNotified *writable = GWD_SETTINGS_NOTIFIED_INTERFACE (g_object_newv (GWD_TYPE_MOCK_SETTINGS_NOTIFIED, 1, param));
+
+    g_value_unset (&gmock_interface_v);
+
+    return writable;
+}

=== added file 'gtk/window-decorator/tests/compiz_gwd_mock_settings_notified.h'
--- gtk/window-decorator/tests/compiz_gwd_mock_settings_notified.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/compiz_gwd_mock_settings_notified.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,70 @@
+/*
+ * Copyright © 2012 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_MOCK_SETTINGS_NOTIFIED_H
+#define _COMPIZ_GWD_MOCK_SETTINGS_NOTIFIED_H
+
+#include <gtest/gtest.h>
+#include <gmock/gmock.h>
+
+#include <glib-object.h>
+
+typedef struct _GWDSettingsNotified GWDSettingsNotified;
+
+class GWDMockSettingsNotifiedGMockInterface;
+
+G_BEGIN_DECLS
+
+#define GWD_TYPE_MOCK_SETTINGS_NOTIFIED (gwd_mock_settings_notified_get_type ())
+GType gwd_mock_settings_notified_get_type ();
+
+GWDSettingsNotified *
+gwd_mock_settings_notified_new (GWDMockSettingsNotifiedGMockInterface *);
+
+G_END_DECLS
+
+class GWDMockSettingsNotifiedGMockInterface
+{
+    public:
+
+	virtual ~GWDMockSettingsNotifiedGMockInterface () {}
+
+	virtual gboolean updateDecorations () = 0;
+	virtual gboolean updateFrames () = 0;
+	virtual gboolean updateMetacityTheme () = 0;
+	virtual gboolean updateMetacityButtonLayout () = 0;
+
+	virtual void dispose () = 0;
+	virtual void finalize () = 0;
+};
+
+class GWDMockSettingsNotifiedGMock :
+    public GWDMockSettingsNotifiedGMockInterface
+{
+    public:
+
+	MOCK_METHOD0 (updateDecorations, gboolean ());
+	MOCK_METHOD0 (updateFrames, gboolean ());
+	MOCK_METHOD0 (updateMetacityTheme, gboolean ());
+	MOCK_METHOD0 (updateMetacityButtonLayout, gboolean ());
+
+	MOCK_METHOD0 (dispose, void ());
+	MOCK_METHOD0 (finalize, void ());
+};
+
+#endif

=== added file 'gtk/window-decorator/tests/compiz_gwd_mock_settings_storage.cpp'
--- gtk/window-decorator/tests/compiz_gwd_mock_settings_storage.cpp	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/compiz_gwd_mock_settings_storage.cpp	2012-09-01 07:19:22 +0000
@@ -0,0 +1,192 @@
+#include <gtest/gtest.h>
+#include <gmock/gmock.h>
+
+#include <glib-object.h>
+
+#include "gwd-settings-storage-interface.h"
+#include "compiz_gwd_mock_settings_storage.h"
+
+#define GWD_MOCK_SETTINGS_STORAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GWD_TYPE_MOCK_SETTINGS_STORAGE, GWDMockSettingsStorage));
+#define GWD_MOCK_SETTINGS_STORAGE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GWD_TYPE_MOCK_SETTINGS_STORAGE, GWDMockSettingsStorageClass));
+#define GWD_IS_MOCK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GWD_TYPE_MOCK_SETTINGS_STORAGE));
+#define GWD_IS_MOCK_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_TYPE ((obj), GWD_TYPE_MOCK_SETTINGS_STORAGE));
+#define GWD_MOCK_SETTINGS_STORAGE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GWD_TYPE_MOCK_SETTINGS_STORAGE, GWDMockSettingsStorageClass));
+
+typedef struct _GWDMockSettingsStorage
+{
+    GObject parent;
+} GWDMockSettingsStorage;
+
+typedef struct _GWDMockSettingsStorageClass
+{
+    GObjectClass parent_class;
+} GWDMockSettingsStorageClass;
+
+static void gwd_mock_settings_storage_interface_init (GWDSettingsStorageInterface *interface);
+
+G_DEFINE_TYPE_WITH_CODE (GWDMockSettingsStorage, gwd_mock_settings_storage, G_TYPE_OBJECT,
+			 G_IMPLEMENT_INTERFACE (GWD_TYPE_SETTINGS_STORAGE_INTERFACE,
+						gwd_mock_settings_storage_interface_init))
+
+#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GWD_TYPE_MOCK_SETTINGS_STORAGE, GWDMockSettingsStoragePrivate))
+
+enum
+{
+    GWD_MOCK_SETTINGS_STORAGE_PROPERTY_GMOCK_INTERFACE = 1
+};
+
+typedef struct _GWDMockSettingsStoragePrivate
+{
+    GWDMockSettingsStorageGMockInterface *mock;
+} GWDMockSettingsStoragePrivate;
+
+gboolean gwd_mock_settings_storage_update_use_tooltips (GWDSettingsStorage *settings)
+{
+    GWDMockSettingsStorage *settingsStorageMock = GWD_MOCK_SETTINGS_STORAGE (settings);
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (settingsStorageMock)->mock;
+    return settingsGMock->updateUseTooltips ();
+}
+
+gboolean gwd_mock_settings_storage_update_draggable_border_width (GWDSettingsStorage *settings)
+{
+    GWDMockSettingsStorage *settingsStorageMock = GWD_MOCK_SETTINGS_STORAGE (settings);
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (settingsStorageMock)->mock;
+    return settingsGMock->updateDraggableBorderWidth ();
+}
+
+gboolean gwd_mock_settings_storage_update_attach_modal_dialogs (GWDSettingsStorage *settings)
+{
+    GWDMockSettingsStorage *settingsStorageMock = GWD_MOCK_SETTINGS_STORAGE (settings)
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (settingsStorageMock)->mock;
+    return settingsGMock->updateAttachModalDialogs ();
+}
+
+gboolean gwd_mock_settings_storage_update_blur (GWDSettingsStorage *settings)
+{
+    GWDMockSettingsStorage *settingsStorageMock = GWD_MOCK_SETTINGS_STORAGE (settings);
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (settingsStorageMock)->mock;
+    return settingsGMock->updateBlur ();
+}
+
+gboolean gwd_mock_settings_storage_update_metacity_theme (GWDSettingsStorage *settings)
+{
+    GWDMockSettingsStorage *settingsStorageMock = GWD_MOCK_SETTINGS_STORAGE (settings);
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (settingsStorageMock)->mock;
+    return settingsGMock->updateMetacityTheme ();
+}
+
+gboolean gwd_mock_settings_storage_update_opacity (GWDSettingsStorage *settings)
+{
+    GWDMockSettingsStorage *settingsStorageMock = GWD_MOCK_SETTINGS_STORAGE (settings);
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (settingsStorageMock)->mock;
+    return settingsGMock->updateOpacity ();
+}
+
+gboolean gwd_mock_settings_storage_update_button_layout (GWDSettingsStorage *settings)
+{
+    GWDMockSettingsStorage *settingsStorageMock = GWD_MOCK_SETTINGS_STORAGE (settings);
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (settingsStorageMock)->mock;
+    return settingsGMock->updateButtonLayout ();
+}
+
+gboolean gwd_mock_settings_storage_update_font (GWDSettingsStorage *settings)
+{
+    GWDMockSettingsStorage *settingsStorageMock = GWD_MOCK_SETTINGS_STORAGE (settings);
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (settingsStorageMock)->mock;
+    return settingsGMock->updateFont ();
+}
+
+gboolean gwd_mock_settings_storage_update_titlebar_actions (GWDSettingsStorage *settings)
+{
+    GWDMockSettingsStorage *settingsStorageMock = GWD_MOCK_SETTINGS_STORAGE (settings);
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (settingsStorageMock)->mock;
+    return settingsGMock->updateTitlebarActions ();
+}
+
+static void gwd_mock_settings_storage_interface_init (GWDSettingsStorageInterface *interface)
+{
+    interface->update_use_tooltips = gwd_mock_settings_storage_update_use_tooltips;
+    interface->update_draggable_border_width = gwd_mock_settings_storage_update_draggable_border_width;
+    interface->update_attach_modal_dialogs = gwd_mock_settings_storage_update_attach_modal_dialogs;
+    interface->update_blur = gwd_mock_settings_storage_update_blur;
+    interface->update_metacity_theme = gwd_mock_settings_storage_update_metacity_theme;
+    interface->update_opacity = gwd_mock_settings_storage_update_opacity;
+    interface->update_button_layout = gwd_mock_settings_storage_update_button_layout;
+    interface->update_font = gwd_mock_settings_storage_update_font;
+    interface->update_titlebar_actions = gwd_mock_settings_storage_update_titlebar_actions;
+}
+
+static void gwd_mock_settings_storage_set_property (GObject *object,
+						     guint   property_id,
+						     const GValue  *value,
+						     GParamSpec *pspec)
+{
+    GWDMockSettingsStoragePrivate *priv = GET_PRIVATE (object);
+
+    switch (property_id)
+    {
+	case GWD_MOCK_SETTINGS_STORAGE_PROPERTY_GMOCK_INTERFACE:
+	    if (!priv->mock)
+		priv->mock = reinterpret_cast <GWDMockSettingsStorageGMockInterface *> (g_value_get_pointer (value));
+	    break;
+	default:
+	    g_assert_not_reached ();
+    }
+}
+
+static void gwd_mock_settings_storage_dispose (GObject *object)
+{
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (object)->mock;
+    G_OBJECT_CLASS (gwd_mock_settings_storage_parent_class)->dispose (object);
+    settingsGMock->dispose ();
+}
+
+static void gwd_mock_settings_storage_finalize (GObject *object)
+{
+    GWDMockSettingsStorageGMockInterface *settingsGMock = GET_PRIVATE (object)->mock;
+    G_OBJECT_CLASS (gwd_mock_settings_storage_parent_class)->finalize (object);
+    settingsGMock->finalize ();
+}
+
+static void gwd_mock_settings_storage_class_init (GWDMockSettingsStorageClass *klass)
+{
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    g_type_class_add_private (klass, sizeof (GWDMockSettingsStoragePrivate));
+
+    object_class->dispose = gwd_mock_settings_storage_dispose;
+    object_class->finalize = gwd_mock_settings_storage_finalize;
+    object_class->set_property = gwd_mock_settings_storage_set_property;
+
+    g_object_class_install_property (object_class,
+				     GWD_MOCK_SETTINGS_STORAGE_PROPERTY_GMOCK_INTERFACE,
+				     g_param_spec_pointer ("gmock-interface",
+							   "Google Mock Interface",
+							   "Google Mock Interface",
+							   static_cast <GParamFlags> (G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY)));
+}
+
+void gwd_mock_settings_storage_init (GWDMockSettingsStorage *self)
+{
+}
+
+GWDSettingsStorage *
+gwd_mock_settings_storage_new (GWDMockSettingsStorageGMockInterface *gmock)
+{
+    GValue gmock_interface_v = G_VALUE_INIT;
+
+    g_value_init (&gmock_interface_v, G_TYPE_POINTER);
+
+    g_value_set_pointer (&gmock_interface_v, reinterpret_cast <gpointer> (gmock));
+
+    GParameter param[1] =
+    {
+	{ "gmock-interface", gmock_interface_v }
+    };
+
+    GWDSettingsStorage *storage = GWD_SETTINGS_STORAGE_INTERFACE (g_object_newv (GWD_TYPE_MOCK_SETTINGS_STORAGE, 1, param));
+
+    g_value_unset (&gmock_interface_v);
+
+    return storage;
+}

=== added file 'gtk/window-decorator/tests/compiz_gwd_mock_settings_storage.h'
--- gtk/window-decorator/tests/compiz_gwd_mock_settings_storage.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/compiz_gwd_mock_settings_storage.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,79 @@
+/*
+ * Copyright © 2012 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_MOCK_SETTINGS_STORAGE_H
+#define _COMPIZ_GWD_MOCK_SETTINGS_STORAGE_H
+
+#include <gtest/gtest.h>
+#include <gmock/gmock.h>
+
+#include <glib-object.h>
+
+typedef struct _GWDSettingsStorage GWDSettingsStorage;
+
+class GWDMockSettingsStorageGMockInterface;
+
+G_BEGIN_DECLS
+
+#define GWD_TYPE_MOCK_SETTINGS_STORAGE (gwd_mock_settings_storage_get_type ())
+GType gwd_mock_settings_storage_get_type ();
+
+GWDSettingsStorage *
+gwd_mock_settings_storage_new (GWDMockSettingsStorageGMockInterface *);
+
+G_END_DECLS
+
+class GWDMockSettingsStorageGMockInterface
+{
+    public:
+
+	virtual ~GWDMockSettingsStorageGMockInterface () {}
+
+	virtual gboolean updateUseTooltips () = 0;
+	virtual gboolean updateDraggableBorderWidth () = 0;
+	virtual gboolean updateAttachModalDialogs () = 0;
+	virtual gboolean updateBlur () = 0;
+	virtual gboolean updateMetacityTheme () = 0;
+	virtual gboolean updateOpacity () = 0;
+	virtual gboolean updateButtonLayout () = 0;
+	virtual gboolean updateFont () = 0;
+	virtual gboolean updateTitlebarActions () = 0;
+
+	virtual void dispose () = 0;
+	virtual void finalize () = 0;
+};
+
+class GWDMockSettingsStorageGMock :
+    public GWDMockSettingsStorageGMockInterface
+{
+    public:
+
+	MOCK_METHOD0 (updateUseTooltips, gboolean ());
+	MOCK_METHOD0 (updateDraggableBorderWidth, gboolean ());
+	MOCK_METHOD0 (updateAttachModalDialogs, gboolean ());
+	MOCK_METHOD0 (updateBlur, gboolean ());
+	MOCK_METHOD0 (updateMetacityTheme, gboolean ());
+	MOCK_METHOD0 (updateOpacity, gboolean ());
+	MOCK_METHOD0 (updateButtonLayout, gboolean ());
+	MOCK_METHOD0 (updateFont, gboolean ());
+	MOCK_METHOD0 (updateTitlebarActions, gboolean ());
+	MOCK_METHOD0 (dispose, void ());
+	MOCK_METHOD0 (finalize, void ());
+};
+
+#endif

=== added file 'gtk/window-decorator/tests/compiz_gwd_mock_settings_writable.cpp'
--- gtk/window-decorator/tests/compiz_gwd_mock_settings_writable.cpp	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/compiz_gwd_mock_settings_writable.cpp	2012-09-01 07:19:22 +0000
@@ -0,0 +1,277 @@
+#include <gtest/gtest.h>
+#include <gmock/gmock.h>
+
+#include <glib-object.h>
+
+#include "gwd-settings-writable-interface.h"
+#include "compiz_gwd_mock_settings_writable.h"
+
+#define GWD_MOCK_SETTINGS_WRITABLE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), GWD_TYPE_MOCK_SETTINGS_WRITABLE, GWDMockSettingsWritable));
+#define GWD_MOCK_SETTINGS_WRITABLE_CLASS(obj) (G_TYPE_CHECK_CLASS_CAST ((obj), GWD_TYPE_MOCK_SETTINGS_WRITABLE, GWDMockSettingsWritableClass));
+#define GWD_IS_MOCK_SETTINGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GWD_TYPE_MOCK_SETTINGS_WRITABLE));
+#define GWD_IS_MOCK_SETTINGS_CLASS(obj) (G_TYPE_CHECK_CLASS_TYPE ((obj), GWD_TYPE_MOCK_SETTINGS_WRITABLE));
+#define GWD_MOCK_SETTINGS_WRITABLE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), GWD_TYPE_MOCK_SETTINGS_WRITABLE, GWDMockSettingsWritableClass));
+
+typedef struct _GWDMockSettingsWritable
+{
+    GObject parent;
+} GWDMockSettingsWritable;
+
+typedef struct _GWDMockSettingsWritableClass
+{
+    GObjectClass parent_class;
+} GWDMockSettingsWritableClass;
+
+static void gwd_mock_settings_writable_interface_init (GWDSettingsWritableInterface *interface);
+
+G_DEFINE_TYPE_WITH_CODE (GWDMockSettingsWritable, gwd_mock_settings_writable, G_TYPE_OBJECT,
+			 G_IMPLEMENT_INTERFACE (GWD_TYPE_WRITABLE_SETTINGS_INTERFACE,
+						gwd_mock_settings_writable_interface_init))
+
+#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), GWD_TYPE_MOCK_SETTINGS_WRITABLE, GWDMockSettingsWritablePrivate))
+
+enum
+{
+    GWD_MOCK_SETTINGS_WRITABLE_PROPERTY_GMOCK_INTERFACE = 1
+};
+
+typedef struct _GWDMockSettingsWritablePrivate
+{
+    GWDMockSettingsWritableGMockInterface *mock;
+} GWDMockSettingsWritablePrivate;
+
+void
+gwd_mock_settings_writable_freeze_updates (GWDSettingsWritable *settings)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->freezeUpdates ();
+}
+
+void
+gwd_mock_settings_writable_thaw_updates (GWDSettingsWritable *settings)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->thawUpdates ();
+}
+
+gboolean
+gwd_mock_settings_writable_shadow_property_changed (GWDSettingsWritable *settings,
+						    gdouble     active_shadow_radius,
+						    gdouble     active_shadow_opacity,
+						    gdouble     active_shadow_offset_x,
+						    gdouble     active_shadow_offset_y,
+						    const gchar	     *active_shadow_color,
+						    gdouble     inactive_shadow_radius,
+						    gdouble     inactive_shadow_opacity,
+						    gdouble     inactive_shadow_offset_x,
+						    gdouble     inactive_shadow_offset_y,
+						    const gchar	     *inactive_shadow_color)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->shadowPropertyChanged (active_shadow_radius,
+							 active_shadow_opacity,
+							 active_shadow_offset_x,
+							 active_shadow_offset_y,
+							 active_shadow_color,
+							 inactive_shadow_radius,
+							 inactive_shadow_opacity,
+							 inactive_shadow_offset_x,
+							 inactive_shadow_offset_y,
+							 inactive_shadow_color);
+}
+
+gboolean
+gwd_mock_settings_writable_use_tooltips_changed (GWDSettingsWritable *settings,
+						 gboolean    use_tooltips)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->useTooltipsChanged (use_tooltips);
+}
+
+gboolean
+gwd_mock_settings_writable_draggable_border_width_changed (GWDSettingsWritable *settings,
+							   gint	 draggable_border_width)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->draggableBorderWidthChanged (draggable_border_width);
+}
+
+gboolean
+gwd_mock_settings_writable_attach_modal_dialogs_changed (GWDSettingsWritable *settings,
+							 gboolean    attach_modal_dialogs)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->attachModalDialogsChanged (attach_modal_dialogs);
+}
+
+gboolean
+gwd_mock_settings_writable_blur_changed (GWDSettingsWritable *settings,
+					 const gchar         *blur_type)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->blurChanged (blur_type);
+}
+
+gboolean
+gwd_mock_settings_writable_metacity_theme_changed (GWDSettingsWritable *settings,
+						   gboolean	 use_metacity_theme,
+						   const gchar *metacity_theme)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->metacityThemeChanged (use_metacity_theme, metacity_theme);
+}
+
+gboolean
+gwd_mock_settings_writable_opacity_changed (GWDSettingsWritable *settings,
+					    gdouble inactive_opacity,
+					    gdouble active_opacity,
+					    gboolean inactive_shade_opacity,
+					    gboolean active_shade_opacity)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->opacityChanged (inactive_opacity, active_opacity, inactive_shade_opacity, active_shade_opacity);
+}
+
+gboolean
+gwd_mock_settings_writable_button_layout_changed (GWDSettingsWritable *settings,
+						  const gchar *button_layout)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->buttonLayoutChanged (button_layout);
+}
+
+gboolean
+gwd_mock_settings_writable_font_changed (GWDSettingsWritable *settings,
+					 gboolean		titlebar_uses_system_font,
+					 const gchar		*titlebar_font)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->fontChanged (titlebar_uses_system_font, titlebar_font);
+}
+
+gboolean
+gwd_mock_settings_writable_titlebar_actions_changed (GWDSettingsWritable *settings,
+						     const gchar	   *action_double_click_titlebar,
+						     const gchar	   *action_middle_click_titlebar,
+						     const gchar	   *action_right_click_titlebar,
+						     const gchar	   *mouse_wheel_action)
+{
+    GWDMockSettingsWritableGMockInterface *gmockSettingsWritable = GET_PRIVATE (settings)->mock;
+    return gmockSettingsWritable->titlebarActionsChanged (action_double_click_titlebar,
+							  action_middle_click_titlebar,
+							  action_right_click_titlebar,
+							  mouse_wheel_action);
+}
+
+static void gwd_mock_settings_writable_interface_init (GWDSettingsWritableInterface *interface)
+{
+    interface->shadow_property_changed = gwd_mock_settings_writable_shadow_property_changed;
+    interface->use_tooltips_changed = gwd_mock_settings_writable_use_tooltips_changed;
+    interface->draggable_border_width_changed = gwd_mock_settings_writable_draggable_border_width_changed;
+    interface->attach_modal_dialogs_changed = gwd_mock_settings_writable_attach_modal_dialogs_changed;
+    interface->blur_changed = gwd_mock_settings_writable_blur_changed;
+    interface->metacity_theme_changed = gwd_mock_settings_writable_metacity_theme_changed;
+    interface->opacity_changed = gwd_mock_settings_writable_opacity_changed;
+    interface->button_layout_changed = gwd_mock_settings_writable_button_layout_changed;
+    interface->font_changed = gwd_mock_settings_writable_font_changed;
+    interface->titlebar_actions_changed = gwd_mock_settings_writable_titlebar_actions_changed;
+    interface->freeze_updates = gwd_mock_settings_writable_freeze_updates;
+    interface->thaw_updates = gwd_mock_settings_writable_thaw_updates;
+}
+
+static GObject * gwd_mock_settings_writable_constructor (GType	type,
+							 guint   n_construction_properties,
+							 GObjectConstructParam *construction_properties)
+{
+    GObject *object = G_OBJECT_CLASS (gwd_mock_settings_writable_parent_class)->constructor (type, n_construction_properties, construction_properties);
+    GWDMockSettingsWritablePrivate *priv = GET_PRIVATE (object);
+    guint   i = 0;
+
+    for (; i < n_construction_properties; ++i)
+    {
+	if (g_strcmp0 (construction_properties[i].pspec->name, "gmock-interface") == 0)
+	{
+	    priv->mock = reinterpret_cast <GWDMockSettingsWritableGMockInterface *> (g_value_get_pointer (construction_properties[i].value));
+	}
+	else
+	    g_assert_not_reached ();
+    }
+
+    return object;
+}
+
+static void gwd_mock_settings_writable_set_property (GObject *object,
+						     guint   property_id,
+						     const GValue  *value,
+						     GParamSpec *pspec)
+{
+    GWDMockSettingsWritablePrivate *priv = GET_PRIVATE (object);
+
+    switch (property_id)
+    {
+	case GWD_MOCK_SETTINGS_WRITABLE_PROPERTY_GMOCK_INTERFACE:
+	    if (!priv->mock)
+		priv->mock = reinterpret_cast <GWDMockSettingsWritableGMockInterface *> (g_value_get_pointer (value));
+	    break;
+	default:
+	    g_assert_not_reached ();
+    }
+}
+
+static void gwd_mock_settings_writable_dispose (GObject *object)
+{
+    GWDMockSettingsWritableGMockInterface *settingsGMock = GET_PRIVATE (object)->mock;
+    G_OBJECT_CLASS (gwd_mock_settings_writable_parent_class)->dispose (object);
+    settingsGMock->dispose ();
+}
+
+static void gwd_mock_settings_writable_finalize (GObject *object)
+{
+    GWDMockSettingsWritableGMockInterface *settingsGMock = GET_PRIVATE (object)->mock;
+    G_OBJECT_CLASS (gwd_mock_settings_writable_parent_class)->finalize (object);
+    settingsGMock->finalize ();
+}
+
+static void gwd_mock_settings_writable_class_init (GWDMockSettingsWritableClass *klass)
+{
+    GObjectClass *object_class = G_OBJECT_CLASS (klass);
+
+    g_type_class_add_private (klass, sizeof (GWDMockSettingsWritablePrivate));
+
+    object_class->dispose = gwd_mock_settings_writable_dispose;
+    object_class->finalize = gwd_mock_settings_writable_finalize;
+    object_class->constructor = gwd_mock_settings_writable_constructor;
+    object_class->set_property = gwd_mock_settings_writable_set_property;
+
+    g_object_class_install_property (object_class,
+				     GWD_MOCK_SETTINGS_WRITABLE_PROPERTY_GMOCK_INTERFACE,
+				     g_param_spec_pointer ("gmock-interface",
+							   "Google Mock Interface",
+							   "Google Mock Interface",
+							   static_cast <GParamFlags> (G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY)));
+}
+
+void gwd_mock_settings_writable_init (GWDMockSettingsWritable *self)
+{
+}
+
+GWDSettingsWritable *
+gwd_mock_settings_writable_new (GWDMockSettingsWritableGMockInterface *gmock)
+{
+    GValue gmock_interface_v = G_VALUE_INIT;
+
+    g_value_init (&gmock_interface_v, G_TYPE_POINTER);
+
+    g_value_set_pointer (&gmock_interface_v, reinterpret_cast <gpointer> (gmock));
+
+    GParameter param[1] =
+    {
+	{ "gmock-interface", gmock_interface_v }
+    };
+
+    GWDSettingsWritable *writable = GWD_SETTINGS_WRITABLE_INTERFACE (g_object_newv (GWD_TYPE_MOCK_SETTINGS_WRITABLE, 1, param));
+
+    g_value_unset (&gmock_interface_v);
+
+    return writable;
+}

=== added file 'gtk/window-decorator/tests/compiz_gwd_mock_settings_writable.h'
--- gtk/window-decorator/tests/compiz_gwd_mock_settings_writable.h	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/compiz_gwd_mock_settings_writable.h	2012-09-01 07:19:22 +0000
@@ -0,0 +1,107 @@
+/*
+ * Copyright © 2012 Canonical Ltd
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef _COMPIZ_GWD_MOCK_SETTINGS_WRITABLE_H
+#define _COMPIZ_GWD_MOCK_SETTINGS_WRITABLE_H
+
+#include <gtest/gtest.h>
+#include <gmock/gmock.h>
+
+#include <glib-object.h>
+
+typedef struct _GWDSettingsWritable GWDSettingsWritable;
+
+class GWDMockSettingsWritableGMockInterface;
+
+G_BEGIN_DECLS
+
+#define GWD_TYPE_MOCK_SETTINGS_WRITABLE (gwd_mock_settings_writable_get_type ())
+GType gwd_mock_settings_writable_get_type ();
+
+GWDSettingsWritable *
+gwd_mock_settings_writable_new (GWDMockSettingsWritableGMockInterface *);
+
+G_END_DECLS
+
+class GWDMockSettingsWritableGMockInterface
+{
+    public:
+
+	virtual ~GWDMockSettingsWritableGMockInterface () {}
+
+	virtual void freezeUpdates() = 0;
+	virtual void thawUpdates () = 0;
+	virtual gboolean shadowPropertyChanged (gdouble active_shadow_radius,
+						gdouble active_shadow_opacity,
+						gdouble active_shadow_offset_x,
+						gdouble active_shadow_offset_y,
+						const gchar   *active_shadow_color,
+						gdouble inactive_shadow_radius,
+						gdouble inactive_shadow_opacity,
+						gdouble inactive_shadow_offset_x,
+						gdouble inactive_shadow_offset_y,
+						const gchar	*inactive_shadow_color) = 0;
+	virtual gboolean useTooltipsChanged (gboolean newValue) = 0;
+	virtual gboolean draggableBorderWidthChanged (gint newValue) = 0;
+	virtual gboolean attachModalDialogsChanged (gboolean newValue) = 0;
+	virtual gboolean blurChanged (const gchar *type) = 0;
+	virtual gboolean metacityThemeChanged (gboolean useMetacityTheme, const gchar *metacityTheme) = 0;
+	virtual gboolean opacityChanged (gdouble inactiveOpacity,
+					 gdouble activeOpacity,
+					 gboolean inactiveShadeOpacity,
+					 gboolean activeShadeOpacity) = 0;
+	virtual gboolean buttonLayoutChanged (const gchar *buttonLayout) = 0;
+	virtual gboolean fontChanged (gboolean useSystemFont,
+				      const gchar *titlebarFont) = 0;
+	virtual gboolean titlebarActionsChanged (const gchar *doubleClickAction,
+						 const gchar *middleClickAction,
+						 const gchar *rightClickAction,
+						 const gchar *mouseWheelAction) = 0;
+
+
+	virtual void dispose () = 0;
+	virtual void finalize () = 0;
+};
+
+class GWDMockSettingsWritableGMock :
+    public GWDMockSettingsWritableGMockInterface
+{
+    public:
+
+	MOCK_METHOD0 (freezeUpdates, void ());
+	MOCK_METHOD0 (thawUpdates, void ());
+	MOCK_METHOD10 (shadowPropertyChanged, gboolean (gdouble, gdouble, gdouble, gdouble, const gchar *,
+							gdouble, gdouble, gdouble, gdouble, const gchar *));
+	MOCK_METHOD1 (useTooltipsChanged, gboolean (gboolean));
+	MOCK_METHOD1 (draggableBorderWidthChanged, gboolean (gint));
+	MOCK_METHOD1 (attachModalDialogsChanged, gboolean (gboolean));
+	MOCK_METHOD1 (blurChanged, gboolean (const gchar *));
+	MOCK_METHOD2 (metacityThemeChanged, gboolean (gboolean, const gchar *));
+	MOCK_METHOD4 (opacityChanged, gboolean (gdouble, gdouble, gboolean, gboolean));
+	MOCK_METHOD1 (buttonLayoutChanged, gboolean (const gchar *));
+	MOCK_METHOD2 (fontChanged, gboolean (gboolean, const gchar *));
+	MOCK_METHOD4 (titlebarActionsChanged, gboolean (const gchar *,
+							const gchar *,
+							const gchar *,
+							const gchar *));
+
+	MOCK_METHOD0 (dispose, void ());
+	MOCK_METHOD0 (finalize, void ());
+};
+
+#endif

=== added file 'gtk/window-decorator/tests/compiz_gwd_tests.h.in'
--- gtk/window-decorator/tests/compiz_gwd_tests.h.in	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/compiz_gwd_tests.h.in	2012-09-01 07:19:22 +0000
@@ -0,0 +1,12 @@
+#ifndef _COMPIZ_GWD_TESTS_CONFIG_H
+#define _COMPIZ_GWD_TESTS_CONFIG_H
+
+#define MOCK_SCHEMA_PATH "@CMAKE_BINARY_DIR@/generated/glib-2.0/schemas"
+
+namespace
+{
+const std::string MOCK_PATH (MOCK_SCHEMA_PATH);
+}
+
+#endif
+

=== added file 'gtk/window-decorator/tests/org.gnome.desktop.wm.preferences.gschema.xml'
--- gtk/window-decorator/tests/org.gnome.desktop.wm.preferences.gschema.xml	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/org.gnome.desktop.wm.preferences.gschema.xml	2012-09-01 07:19:22 +0000
@@ -0,0 +1,72 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<schemalist>
+  <enum id='org.gnome.desktop.GDesktopTitlebarAction'>
+    <value nick='toggle-shade' value='0'/>
+    <value nick='toggle-maximize' value='1'/>
+    <value nick='toggle-maximize-horizontally' value='2'/>
+    <value nick='toggle-maximize-vertically' value='3'/>
+    <value nick='minimize' value='4'/>
+    <value nick='none' value='5'/>
+    <value nick='lower' value='6'/>
+    <value nick='menu' value='7'/>
+  </enum>
+  <schema path="/org/gnome/desktop/wm/preferences/" id="org.gnome.desktop.wm.preferences" gettext-domain="gsettings-desktop-schemas">
+    <key type="s" name="button-layout">
+      <default>':minimize,maximize,close'</default>
+      <summary>Arrangement of buttons on the titlebar</summary>
+      <description>Arrangement of buttons on the titlebar. The value should be a string, such as "menu:minimize,maximize,spacer,close"; the colon separates the left corner of the window from the right corner, and the button names are comma-separated. Duplicate buttons are not allowed. Unknown button names are silently ignored so that buttons can be added in future metacity versions without breaking older versions. A special spacer tag can be used to insert some space between two adjacent buttons.</description>
+    </key>
+    <key name="action-double-click-titlebar" enum="org.gnome.desktop.GDesktopTitlebarAction">
+      <default>'toggle-maximize'</default>
+      <summary>Action on title bar double-click</summary>
+      <description>This option determines the effects of double-clicking on the title bar. Current valid options are 'toggle-shade', which will shade/unshade the window, 'toggle-maximize' which will maximize/unmaximize the window, 'toggle-maximize-horizontally' and 'toggle-maximize-vertically' which will maximize/unmaximize the window in that direction only, 'minimize' which will minimize the window, 'shade' which will roll the window up, 'menu' which will display the window menu, 'lower' which will put the window behind all the others, and 'none' which will not do anything.</description>
+      
+      <aliases>
+        <alias value="toggle_shade" target="toggle-shade"/>
+        <alias value="toggle_maximize" target="toggle-maximize"/>
+        <alias value="toggle_maximize_horizontally" target="toggle-maximize-horizontally"/>
+        <alias value="toggle_maximize_vertically" target="toggle-maximize-vertically"/>
+      </aliases>
+    </key>
+    <key name="action-middle-click-titlebar" enum="org.gnome.desktop.GDesktopTitlebarAction">
+      <default>'lower'</default>
+      <summary>Action on title bar middle-click</summary>
+      <description>This option determines the effects of middle-clicking on the title bar. Current valid options are 'toggle-shade', which will shade/unshade the window, 'toggle-maximize' which will maximize/unmaximize the window, 'toggle-maximize-horizontally' and 'toggle-maximize-vertically' which will maximize/unmaximize the window in that direction only, 'minimize' which will minimize the window, 'shade' which will roll the window up, 'menu' which will display the window menu, 'lower' which will put the window behind all the others, and 'none' which will not do anything.</description>
+      
+      <aliases>
+        <alias value="toggle_shade" target="toggle-shade"/>
+        <alias value="toggle_maximize" target="toggle-maximize"/>
+        <alias value="toggle_maximize_horizontally" target="toggle-maximize-horizontally"/>
+        <alias value="toggle_maximize_vertically" target="toggle-maximize-vertically"/>
+      </aliases>
+    </key>
+    <key name="action-right-click-titlebar" enum="org.gnome.desktop.GDesktopTitlebarAction">
+      <default>'menu'</default>
+      <summary>Action on title bar right-click</summary>
+      <description>This option determines the effects of right-clicking on the title bar. Current valid options are 'toggle-shade', which will shade/unshade the window, 'toggle-maximize' which will maximize/unmaximize the window, 'toggle-maximize-horizontally' and 'toggle-maximize-vertically' which will maximize/unmaximize the window in that direction only, 'minimize' which will minimize the window, 'shade' which will roll the window up, 'menu' which will display the window menu, 'lower' which will put the window behind all the others, and 'none' which will not do anything.</description>
+      
+      <aliases>
+        <alias value="toggle_shade" target="toggle-shade"/>
+        <alias value="toggle_maximize" target="toggle-maximize"/>
+        <alias value="toggle_maximize_horizontally" target="toggle-maximize-horizontally"/>
+        <alias value="toggle_maximize_vertically" target="toggle-maximize-vertically"/>
+      </aliases>
+    </key>
+    <key type="s" name="theme">
+      <default>'Adwaita'</default>
+      <summary>Current theme</summary>
+      <description>The theme determines the appearance of window borders, titlebar, and so forth.</description>
+    </key>
+    <key type="b" name="titlebar-uses-system-font">
+      <default>false</default>
+      <summary>Use standard system font in window titles</summary>
+      <description>If true, ignore the titlebar-font option, and use the standard application font for window titles.</description>
+    </key>
+    <key type="s" name="titlebar-font">
+      <default>'Cantarell Bold 11'</default>
+      <summary>Window title font</summary>
+      <description>A font description string describing a font for window titlebars. The size from the description will only be used if the titlebar-font-size option is set to 0. Also, this option is disabled if the titlebar-uses-desktop-font option is set to true.</description>
+    </key>
+  </schema>
+
+</schemalist>

=== added file 'gtk/window-decorator/tests/org.gnome.mutter.gschema.xml'
--- gtk/window-decorator/tests/org.gnome.mutter.gschema.xml	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/org.gnome.mutter.gschema.xml	2012-09-01 07:19:22 +0000
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<schemalist>
+  <schema path="/org/gnome/mutter/" id="org.gnome.mutter" gettext-domain="@GETTEXT_DOMAIN">
+
+    <key type="b" name="attach-modal-dialogs">
+      <default>false</default>
+      <summary>Attach modal dialogs</summary>
+      <description>When true, instead of having independent titlebars, modal dialogs appear attached to the titlebar of the parent window and are moved together with the parent window.</description>
+    </key>
+
+    <key type="i" name="draggable-border-width">
+      <default>10</default>
+      <range min="0" max="64"/>
+      <summary>Draggable border width</summary>
+      <description>The amount of total draggable borders. If the theme's visible borders are not enough, invisible borders will be added to meet this value.</description>
+    </key>
+
+    <child schema="org.gnome.mutter.keybindings" name="keybindings"/>
+
+</schemalist>

=== added file 'gtk/window-decorator/tests/test_gwd_settings.cpp'
--- gtk/window-decorator/tests/test_gwd_settings.cpp	1970-01-01 00:00:00 +0000
+++ gtk/window-decorator/tests/test_gwd_settings.cpp	2012-09-01 07:19:22 +0000
@@ -0,0 +1,1611 @@
+#include <cstring>
+#include <cstdio>
+
+#include <tr1/tuple>
+
+#include <gtest/gtest.h>
+#include <gmock/gmock.h>
+
+#include <boost/bind.hpp>
+#include <boost/function.hpp>
+#include <boost/shared_ptr.hpp>
+#include <boost/make_shared.hpp>
+#include <boost/algorithm/string.hpp>
+
+#include <glib-object.h>
+
+#include <gio/gio.h>
+
+#include "compiz_gwd_tests.h"
+
+#include "gwd-settings-interface.h"
+#include "gwd-settings.h"
+#include "gwd-settings-storage-gsettings.h"
+#include "gwd-settings-writable-interface.h"
+#include "gwd-settings-storage-interface.h"
+#include "gwd-settings-notified-interface.h"
+
+#include "decoration.h"
+
+#include "compiz_gwd_mock_settings.h"
+#include "compiz_gwd_mock_settings_writable.h"
+#include "compiz_gwd_mock_settings_storage.h"
+#include "compiz_gwd_mock_settings_notified.h"
+
+using ::testing::TestWithParam;
+using ::testing::Eq;
+using ::testing::Return;
+using ::testing::InvokeWithoutArgs;
+using ::testing::IgnoreResult;
+using ::testing::MatcherInterface;
+using ::testing::MakeMatcher;
+using ::testing::MatchResultListener;
+using ::testing::Matcher;
+using ::testing::Action;
+using ::testing::ActionInterface;
+using ::testing::MakeAction;
+using ::testing::IsNull;
+using ::testing::Values;
+using ::testing::_;
+using ::testing::StrictMock;
+
+template <class ValueCType>
+class GValueCmp
+{
+    public:
+
+	typedef ValueCType (*GetFunc) (const GValue *value);
+
+	bool compare (const ValueCType &val,
+		      GValue           *value,
+		      GetFunc	       get)
+	{
+	    const ValueCType &valForValue = (*get) (value);
+	    return valForValue == val;
+	}
+};
+
+template <>
+class GValueCmp <decor_shadow_options_t>
+{
+    public:
+
+	typedef gpointer (*GetFunc) (const GValue *value);
+
+	bool compare (const decor_shadow_options_t &val,
+		      GValue			   *value,
+		      GetFunc			   get)
+	{
+	    gpointer shadowOptionsPtr = (*get) (value);
+	    const decor_shadow_options_t &shadowOptions = *(reinterpret_cast <decor_shadow_options_t *> (shadowOptionsPtr));
+	    if (decor_shadow_options_cmp (&val, &shadowOptions))
+		return true;
+	    else
+		return false;
+	}
+};
+
+template <>
+class GValueCmp <std::string>
+{
+    public:
+
+	typedef const gchar * (*GetFunc) (const GValue *value);
+
+	bool compare (const std::string &val,
+		      GValue	        *value,
+		      GetFunc		get)
+	{
+	    const gchar *valueForValue = (*get) (value);
+	    const std::string valueForValueStr (valueForValue);\
+
+	    return val == valueForValueStr;
+	}
+};
+
+namespace
+{
+    std::ostream &
+    operator<< (std::ostream &os, const decor_shadow_options_t &options)
+    {
+	os << " radius: " << options.shadow_radius <<
+	      " opacity: " << options.shadow_opacity <<
+	      " offset: (" << options.shadow_offset_x << ", " << options.shadow_offset_y << ")" <<
+	      " color: r: " << options.shadow_color[0] <<
+	      " g: " << options.shadow_color[1] <<
+	      " b: " << options.shadow_color[2];
+
+	return os;
+    }
+}
+
+template <class ValueCType>
+class GObjectPropertyMatcher :
+    public ::testing::MatcherInterface <GValue *>
+{
+    public:
+
+	GObjectPropertyMatcher (const ValueCType			&value,
+				typename GValueCmp<ValueCType>::GetFunc	func) :
+	    mValue (value),
+	    mGetFunc (func)
+	{
+	}
+
+	virtual bool MatchAndExplain (GValue *value, MatchResultListener *listener) const
+	{
+	    return GValueCmp <ValueCType> ().compare (mValue, value, mGetFunc);
+	}
+
+	virtual void DescribeTo (std::ostream *os) const
+	{
+	    *os << "value contains " << mValue;
+	}
+
+	virtual void DescribeNegationTo (std::ostream *os) const
+	{
+	    *os << "value does not contain " << mValue;
+	}
+
+    private:
+
+	const ValueCType &mValue;
+	typename GValueCmp<ValueCType>::GetFunc mGetFunc;
+};
+
+MATCHER (GBooleanTrue, "gboolean TRUE")
+{
+    if (arg)
+	return true;
+    else
+	return false;
+}
+
+MATCHER (GBooleanFalse, "gboolean FALSE")
+{
+    if (!arg)
+	return true;
+    else
+	return false;
+}
+
+namespace testing_values
+{
+    const gdouble ACTIVE_SHADOW_OPACITY_VALUE = 1.0;
+    const gdouble ACTIVE_SHADOW_RADIUS_VALUE = 2.0;
+    const gdouble ACTIVE_SHADOW_OFFSET_X_VALUE = 3.0;
+    const gint    ACTIVE_SHADOW_OFFSET_X_INT_VALUE = ACTIVE_SHADOW_OFFSET_X_VALUE;
+    const gdouble ACTIVE_SHADOW_OFFSET_Y_VALUE = 4.0;
+    const gint    ACTIVE_SHADOW_OFFSET_Y_INT_VALUE = ACTIVE_SHADOW_OFFSET_Y_VALUE;
+    const std::string ACTIVE_SHADOW_COLOR_STR_VALUE ("#ffffffff");
+    const gushort ACTIVE_SHADOW_COLOR_VALUE[] = { 255, 255, 255 };
+    const gdouble INACTIVE_SHADOW_OPACITY_VALUE = 5.0;
+    const gdouble INACTIVE_SHADOW_RADIUS_VALUE = 6.0;
+    const gdouble INACTIVE_SHADOW_OFFSET_X_VALUE = 7.0;
+    const gint    INACTIVE_SHADOW_OFFSET_X_INT_VALUE = INACTIVE_SHADOW_OFFSET_X_VALUE;
+    const gdouble INACTIVE_SHADOW_OFFSET_Y_VALUE = 8.0;
+    const gint    INACTIVE_SHADOW_OFFSET_Y_INT_VALUE = INACTIVE_SHADOW_OFFSET_Y_VALUE;
+    const std::string INACTIVE_SHADOW_COLOR_STR_VALUE ("#00000000");
+    const gushort INACTIVE_SHADOW_COLOR_VALUE[] = { 0, 0, 0 };
+    const gboolean USE_TOOLTIPS_VALUE = !USE_TOOLTIPS_DEFAULT;
+    const guint DRAGGABLE_BORDER_WIDTH_VALUE = 1;
+    const gboolean ATTACH_MODAL_DIALOGS_VALUE = TRUE;
+    const std::string BLUR_TYPE_TITLEBAR_VALUE ("titlebar");
+    const gint BLUR_TYPE_TITLEBAR_INT_VALUE = BLUR_TYPE_TITLEBAR;
+    const std::string BLUR_TYPE_ALL_VALUE ("all");
+    const gint BLUR_TYPE_ALL_INT_VALUE = BLUR_TYPE_ALL;
+    const std::string BLUR_TYPE_NONE_VALUE ("none");
+    const gint BLUR_TYPE_NONE_INT_VALUE = BLUR_TYPE_NONE;
+    const gboolean USE_METACITY_THEME_VALUE  = TRUE;
+    const std::string METACITY_THEME_VALUE ("metacity_theme");
+    const gboolean NO_USE_METACITY_THEME_VALUE  = FALSE;
+    const std::string NO_METACITY_THEME_VALUE ("");
+    const gdouble ACTIVE_OPACITY_VALUE = 0.9;
+    const gdouble INACTIVE_OPACITY_VALUE = 0.8;
+    const gboolean ACTIVE_SHADE_OPACITY_VALUE = !METACITY_ACTIVE_SHADE_OPACITY_DEFAULT;
+    const gboolean INACTIVE_SHADE_OPACITY_VALUE = !METACITY_INACTIVE_SHADE_OPACITY_DEFAULT;
+    const std::string BUTTON_LAYOUT_VALUE ("button_layout");
+    const gboolean USE_SYSTEM_FONT_VALUE = TRUE;
+    const gboolean NO_USE_SYSTEM_FONT_VALUE = FALSE;
+    const std::string TITLEBAR_FONT_VALUE ("Ubuntu 12");
+    const std::string TITLEBAR_ACTION_SHADE ("toggle_shade");
+    const std::string TITLEBAR_ACTION_MAX_VERT ("toggle_maximize_vertically");
+    const std::string TITLEBAR_ACTION_MAX_HORZ ("toggle_maximize_horizontally");
+    const std::string TITLEBAR_ACTION_MAX ("toggle_maximize");
+    const std::string TITLEBAR_ACTION_MINIMIZE ("minimize");
+    const std::string TITLEBAR_ACTION_MENU ("menu");
+    const std::string TITLEBAR_ACTION_LOWER ("lower");
+    const std::string TITLEBAR_ACTION_NONE ("none");
+    const std::string MOUSE_WHEEL_ACTION_SHADE ("shade");
+}
+
+template <class ValueCType>
+inline Matcher<GValue *>
+GValueMatch (const ValueCType &value,
+	     typename GValueCmp<ValueCType>::GetFunc	func)
+{
+    return MakeMatcher (new GObjectPropertyMatcher <ValueCType> (value, func));
+}
+
+class GWDSettingsTestCommon :
+    public ::testing::Test
+{
+    public:
+	virtual void SetUp ()
+	{
+	    g_setenv ("G_SLICE", "always-malloc", TRUE);
+	    g_type_init ();
+	}
+	virtual void TearDown ()
+	{
+	    g_unsetenv ("G_SLICE");
+	}
+};
+
+class GWDMockSettingsWritableTest :
+    public GWDSettingsTestCommon
+{
+};
+
+const GValue referenceGValue = G_VALUE_INIT;
+
+namespace
+{
+    void gwd_settings_notified_unref (GWDSettingsNotified *notified)
+    {
+	g_object_unref (G_OBJECT (notified));
+    }
+
+    void gwd_settings_storage_unref (GWDSettingsStorage *storage)
+    {
+	g_object_unref (G_OBJECT (storage));
+    }
+
+    void gwd_settings_writable_unref (GWDSettingsWritable *writable)
+    {
+	g_object_unref (G_OBJECT (writable));
+    }
+
+    void gwd_settings_unref (GWDSettingsImpl *settings)
+    {
+	g_object_unref (G_OBJECT (settings));
+    }
+
+    void gwd_settings_notified_do_nothing (GWDSettingsNotified *notified)
+    {
+    }
+
+    class AutoUnsetGValue
+    {
+	public:
+
+	    AutoUnsetGValue (GType type)
+	    {
+		memcpy (&mValue, &referenceGValue, sizeof (GValue));
+		g_value_init (&mValue, type);
+	    }
+
+	    ~AutoUnsetGValue ()
+	    {
+		g_value_unset (&mValue);
+	    }
+
+	    operator GValue & ()
+	    {
+		return mValue;
+	    }
+
+	private:
+
+	    GValue mValue;
+    };
+}
+
+TEST_F(GWDMockSettingsWritableTest, TestMock)
+{
+    GWDMockSettingsWritableGMock writableGMock;
+    boost::shared_ptr <GWDSettingsWritable> writableMock (gwd_mock_settings_writable_new (&writableGMock),
+							  boost::bind (gwd_settings_writable_unref, _1));
+
+
+    EXPECT_CALL (writableGMock, freezeUpdates ());
+    EXPECT_CALL (writableGMock, thawUpdates ());
+    EXPECT_CALL (writableGMock, shadowPropertyChanged (testing_values::ACTIVE_SHADOW_RADIUS_VALUE,
+						       testing_values::ACTIVE_SHADOW_OPACITY_VALUE,
+						       testing_values::ACTIVE_SHADOW_OFFSET_X_VALUE,
+						       testing_values::ACTIVE_SHADOW_OFFSET_Y_VALUE,
+						       Eq (testing_values::ACTIVE_SHADOW_COLOR_STR_VALUE),
+						       testing_values::INACTIVE_SHADOW_RADIUS_VALUE,
+						       testing_values::INACTIVE_SHADOW_OPACITY_VALUE,
+						       testing_values::INACTIVE_SHADOW_OFFSET_X_VALUE,
+						       testing_values::INACTIVE_SHADOW_OFFSET_Y_VALUE,
+						       Eq (testing_values::INACTIVE_SHADOW_COLOR_STR_VALUE))).WillOnce (Return (TRUE));
+    EXPECT_CALL (writableGMock, useTooltipsChanged (testing_values::USE_TOOLTIPS_VALUE)).WillOnce (Return (TRUE));
+    EXPECT_CALL (writableGMock, draggableBorderWidthChanged (testing_values::DRAGGABLE_BORDER_WIDTH_VALUE)).WillOnce (Return (TRUE));
+    EXPECT_CALL (writableGMock, attachModalDialogsChanged (testing_values::ATTACH_MODAL_DIALOGS_VALUE)).WillOnce (Return (TRUE));
+    EXPECT_CALL (writableGMock, blurChanged (Eq (testing_values::BLUR_TYPE_TITLEBAR_VALUE))).WillOnce (Return (TRUE));
+    EXPECT_CALL (writableGMock, metacityThemeChanged (TRUE, Eq (testing_values::METACITY_THEME_VALUE))).WillOnce (Return (TRUE));
+    EXPECT_CALL (writableGMock, opacityChanged (testing_values::ACTIVE_OPACITY_VALUE,
+						testing_values::INACTIVE_OPACITY_VALUE,
+						testing_values::ACTIVE_SHADE_OPACITY_VALUE,
+						testing_values::INACTIVE_SHADE_OPACITY_VALUE)).WillOnce (Return (TRUE));
+    EXPECT_CALL (writableGMock, buttonLayoutChanged (Eq (testing_values::BUTTON_LAYOUT_VALUE))).WillOnce (Return (TRUE));
+    EXPECT_CALL (writableGMock, fontChanged (testing_values::USE_SYSTEM_FONT_VALUE,
+					     testing_values::TITLEBAR_FONT_VALUE.c_str ())).WillOnce (Return (TRUE));
+    EXPECT_CALL (writableGMock, titlebarActionsChanged (Eq (testing_values::TITLEBAR_ACTION_MAX),
+							Eq (testing_values::TITLEBAR_ACTION_MENU),
+							Eq (testing_values::TITLEBAR_ACTION_LOWER),
+							Eq (testing_values::TITLEBAR_ACTION_SHADE))).WillOnce (Return (TRUE));
+
+    EXPECT_CALL (writableGMock, dispose ());
+    EXPECT_CALL (writableGMock, finalize ());
+
+    gwd_settings_writable_freeze_updates (writableMock.get ());
+    gwd_settings_writable_thaw_updates (writableMock.get ());
+
+    EXPECT_THAT (gwd_settings_writable_shadow_property_changed (writableMock.get (),
+								testing_values::ACTIVE_SHADOW_RADIUS_VALUE,
+								testing_values::ACTIVE_SHADOW_OPACITY_VALUE,
+								testing_values::ACTIVE_SHADOW_OFFSET_X_VALUE,
+								testing_values::ACTIVE_SHADOW_OFFSET_Y_VALUE,
+								testing_values::ACTIVE_SHADOW_COLOR_STR_VALUE.c_str (),
+								testing_values::INACTIVE_SHADOW_RADIUS_VALUE,
+								testing_values::INACTIVE_SHADOW_OPACITY_VALUE,
+								testing_values::INACTIVE_SHADOW_OFFSET_X_VALUE,
+								testing_values::INACTIVE_SHADOW_OFFSET_Y_VALUE,
+								testing_values::INACTIVE_SHADOW_COLOR_STR_VALUE.c_str ()), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_use_tooltips_changed (writableMock.get (), testing_values::USE_TOOLTIPS_VALUE), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_draggable_border_width_changed (writableMock.get (), testing_values::DRAGGABLE_BORDER_WIDTH_VALUE), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_attach_modal_dialogs_changed (writableMock.get (), testing_values::ATTACH_MODAL_DIALOGS_VALUE), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_blur_changed (writableMock.get (), testing_values::BLUR_TYPE_TITLEBAR_VALUE.c_str ()), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_metacity_theme_changed (writableMock.get (),
+							       testing_values::USE_METACITY_THEME_VALUE,
+							       testing_values::METACITY_THEME_VALUE.c_str ()), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_opacity_changed (writableMock.get (),
+							testing_values::ACTIVE_OPACITY_VALUE,
+							testing_values::INACTIVE_OPACITY_VALUE,
+							testing_values::ACTIVE_SHADE_OPACITY_VALUE,
+							testing_values::INACTIVE_SHADE_OPACITY_VALUE), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_button_layout_changed (writableMock.get (),
+							      testing_values::BUTTON_LAYOUT_VALUE.c_str ()), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_font_changed (writableMock.get (),
+						     testing_values::USE_SYSTEM_FONT_VALUE,
+						     testing_values::TITLEBAR_FONT_VALUE.c_str ()), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_titlebar_actions_changed (writableMock.get (),
+								 testing_values::TITLEBAR_ACTION_MAX.c_str (),
+								 testing_values::TITLEBAR_ACTION_MENU.c_str (),
+								 testing_values::TITLEBAR_ACTION_LOWER.c_str (),
+								 testing_values::TITLEBAR_ACTION_SHADE.c_str ()), GBooleanTrue ());
+}
+
+class GWDMockSettingsTest :
+    public GWDSettingsTestCommon
+{
+};
+
+TEST_F(GWDMockSettingsTest, TestMock)
+{
+    GWDMockSettingsGMock settingsGMock;
+    boost::shared_ptr <GWDSettingsImpl> settingsMock (gwd_mock_settings_new (&settingsGMock),
+						  boost::bind (gwd_settings_unref, _1));
+
+    AutoUnsetGValue pointerValue (G_TYPE_POINTER);
+    AutoUnsetGValue booleanValue (G_TYPE_BOOLEAN);
+    AutoUnsetGValue stringValue (G_TYPE_STRING);
+    AutoUnsetGValue integerValue (G_TYPE_INT);
+    AutoUnsetGValue doubleValue (G_TYPE_DOUBLE);
+
+    GValue &pointerGValue = pointerValue;
+    GValue &booleanGValue = booleanValue;
+    GValue &stringGValue = stringValue;
+    GValue &integerGValue = integerValue;
+    GValue &doubleGValue  = doubleValue;
+
+    int	  POINTEE_VALUE = 1;
+    gpointer POINTER_VALUE = &POINTEE_VALUE;
+    const std::string STRING_VALUE ("test");
+    const int INTEGER_VALUE = 2;
+    const gboolean BOOLEAN_VALUE = TRUE;
+    const gdouble DOUBLE_VALUE = 2.0;
+
+    g_value_set_pointer (&pointerGValue, POINTER_VALUE);
+    g_value_set_boolean (&booleanGValue, BOOLEAN_VALUE);
+    g_value_set_string (&stringGValue, STRING_VALUE.c_str ());
+    g_value_set_int (&integerGValue, INTEGER_VALUE);
+    g_value_set_double (&doubleGValue, DOUBLE_VALUE);
+
+    EXPECT_CALL (settingsGMock, dispose ());
+    EXPECT_CALL (settingsGMock, finalize ());
+
+    /* calling g_object_get_property actually resets
+     * the value so expecting 0x0 is correct */
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_SHADOW,
+					     GValueMatch <gpointer> (0x0, g_value_get_pointer),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_SHADOW,
+					     GValueMatch <gpointer> (0x0, g_value_get_pointer),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_USE_TOOLTIPS,
+					     GValueMatch <gboolean> (FALSE, g_value_get_boolean),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_DRAGGABLE_BORDER_WIDTH,
+					     GValueMatch <gint> (0, g_value_get_int),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_ATTACH_MODAL_DIALOGS,
+					     GValueMatch <gboolean> (FALSE, g_value_get_boolean),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_BLUR_CHANGED,
+					     GValueMatch <gint> (0, g_value_get_int),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_METACITY_THEME,
+					     GValueMatch <const gchar *> (NULL, g_value_get_string),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_OPACITY,
+					     GValueMatch <gdouble> (0.0, g_value_get_double),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_OPACITY,
+					     GValueMatch <gdouble> (0.0, g_value_get_double),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_ACTIVE_SHADE_OPACITY,
+					     GValueMatch <gboolean> (FALSE, g_value_get_boolean),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_INACTIVE_SHADE_OPACITY,
+					     GValueMatch <gboolean> (FALSE, g_value_get_boolean),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_BUTTON_LAYOUT,
+					     GValueMatch <const gchar *> (NULL, g_value_get_string),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_ACTION_DOUBLE_CLICK,
+					     GValueMatch <gint> (0, g_value_get_int),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_ACTION_MIDDLE_CLICK,
+					     GValueMatch <gint> (0, g_value_get_int),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_ACTION_RIGHT_CLICK,
+					     GValueMatch <gint> (0, g_value_get_int),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_MOUSE_WHEEL_ACTION,
+					     GValueMatch <gint> (0, g_value_get_int),
+					     _));
+    EXPECT_CALL (settingsGMock, getProperty (GWD_MOCK_SETTINGS_PROPERTY_TITLEBAR_FONT,
+					     GValueMatch <const gchar *> (NULL, g_value_get_string),
+					     _));
+
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "active-shadow",
+			   &pointerGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "inactive-shadow",
+			   &pointerGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "use-tooltips",
+			   &booleanGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "draggable-border-width",
+			   &integerGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "attach-modal-dialogs",
+			   &booleanGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "blur",
+			   &integerGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "metacity-theme",
+			   &stringGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "metacity-active-opacity",
+			   &doubleGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "metacity-inactive-opacity",
+			   &doubleGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "metacity-active-shade-opacity",
+			   &booleanGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "metacity-inactive-shade-opacity",
+			   &booleanGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "metacity-button-layout",
+			   &stringGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "titlebar-double-click-action",
+			   &integerGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "titlebar-middle-click-action",
+			   &integerGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "titlebar-right-click-action",
+			   &integerGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "mouse-wheel-action",
+			   &integerGValue);
+    g_object_get_property (G_OBJECT (settingsMock.get ()),
+			   "titlebar-font",
+			   &stringGValue);
+}
+
+class GWDSettingsTest :
+    public GWDSettingsTestCommon
+{
+    public:
+
+	virtual void SetUp ()
+	{
+	    GWDSettingsTestCommon::SetUp ();
+	    mGMockNotified.reset (new GWDMockSettingsNotifiedGMock ());
+	    mMockNotified.reset (gwd_mock_settings_notified_new (mGMockNotified.get ()),
+				 boost::bind (gwd_settings_notified_do_nothing, _1));
+	    mSettings.reset (gwd_settings_impl_new (NULL,
+						    NULL,
+						    mMockNotified.get ()),
+			     boost::bind (gwd_settings_unref, _1));
+	}
+
+	virtual void TearDown ()
+	{
+	    EXPECT_CALL (*mGMockNotified, dispose ());
+	    EXPECT_CALL (*mGMockNotified, finalize ());
+	}
+
+    protected:
+
+	boost::shared_ptr <GWDMockSettingsNotifiedGMock> mGMockNotified;
+	boost::shared_ptr <GWDSettingsNotified> mMockNotified;
+	boost::shared_ptr <GWDSettingsImpl> mSettings;
+};
+
+TEST_F(GWDSettingsTest, TestGWDSettingsInstantiation)
+{
+}
+
+class GWDSettingsTestStrict :
+    public GWDSettingsTestCommon
+{
+    public:
+
+	virtual void SetUp ()
+	{
+	    GWDSettingsTestCommon::SetUp ();
+	    mGMockNotified.reset (new StrictMock <GWDMockSettingsNotifiedGMock> ());
+	    mMockNotified.reset (gwd_mock_settings_notified_new (mGMockNotified.get ()),
+				 boost::bind (gwd_settings_notified_do_nothing, _1));
+	    mSettings.reset (gwd_settings_impl_new (NULL,
+						    NULL,
+						    mMockNotified.get ()),
+			     boost::bind (gwd_settings_unref, _1));
+	}
+
+	virtual void TearDown ()
+	{
+	    EXPECT_CALL (*mGMockNotified, dispose ());
+	    EXPECT_CALL (*mGMockNotified, finalize ());
+	}
+
+    protected:
+
+	boost::shared_ptr <StrictMock <GWDMockSettingsNotifiedGMock> > mGMockNotified;
+	boost::shared_ptr <GWDSettingsNotified> mMockNotified;
+	boost::shared_ptr <GWDSettingsImpl> mSettings;
+};
+
+/* We're just using use_tooltips here as an example */
+TEST_F(GWDSettingsTestStrict, TestFreezeUpdatesNoUpdates)
+{
+    gwd_settings_writable_freeze_updates (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()));
+    EXPECT_THAT (gwd_settings_writable_use_tooltips_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							     testing_values::USE_TOOLTIPS_VALUE), GBooleanTrue ());
+}
+
+/* We're just using use_tooltips here as an example */
+TEST_F(GWDSettingsTestStrict, TestFreezeUpdatesNoUpdatesThawUpdatesAllUpdates)
+{
+    gwd_settings_writable_freeze_updates (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()));
+    EXPECT_THAT (gwd_settings_writable_use_tooltips_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							     testing_values::USE_TOOLTIPS_VALUE), GBooleanTrue ());
+
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    gwd_settings_writable_thaw_updates (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()));
+}
+
+/* We're just using use_tooltips here as an example */
+TEST_F(GWDSettingsTestStrict, TestFreezeUpdatesNoUpdatesThawUpdatesAllUpdatesNoDupes)
+{
+    gwd_settings_writable_freeze_updates (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()));
+    EXPECT_THAT (gwd_settings_writable_use_tooltips_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							     testing_values::USE_TOOLTIPS_VALUE), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_use_tooltips_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							     !testing_values::USE_TOOLTIPS_VALUE), GBooleanTrue ());
+    EXPECT_THAT (gwd_settings_writable_use_tooltips_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							     testing_values::USE_TOOLTIPS_VALUE), GBooleanTrue ());
+
+    EXPECT_CALL (*mGMockNotified, updateDecorations ()).Times (1);
+    gwd_settings_writable_thaw_updates (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()));
+}
+
+TEST_F(GWDSettingsTest, TestShadowPropertyChanged)
+{
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_shadow_property_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+								testing_values::ACTIVE_SHADOW_OPACITY_VALUE,
+								testing_values::ACTIVE_SHADOW_RADIUS_VALUE,
+								testing_values::ACTIVE_SHADOW_OFFSET_X_VALUE,
+								testing_values::ACTIVE_SHADOW_OFFSET_Y_VALUE,
+								testing_values::ACTIVE_SHADOW_COLOR_STR_VALUE.c_str (),
+								testing_values::INACTIVE_SHADOW_OPACITY_VALUE,
+								testing_values::INACTIVE_SHADOW_RADIUS_VALUE,
+								testing_values::INACTIVE_SHADOW_OFFSET_X_VALUE,
+								testing_values::INACTIVE_SHADOW_OFFSET_Y_VALUE,
+								testing_values::INACTIVE_SHADOW_COLOR_STR_VALUE.c_str ()), GBooleanTrue ());
+
+    AutoUnsetGValue activeShadowValue (G_TYPE_POINTER);
+    AutoUnsetGValue inactiveShadowValue (G_TYPE_POINTER);
+
+    GValue &activeShadowGValue = activeShadowValue;
+    GValue &inactiveShadowGValue = inactiveShadowValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "active-shadow",
+			   &activeShadowGValue);
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "inactive-shadow",
+			   &inactiveShadowGValue);
+
+    decor_shadow_options_t activeShadow;
+
+    activeShadow.shadow_opacity = testing_values::ACTIVE_SHADOW_OPACITY_VALUE;
+    activeShadow.shadow_radius = testing_values::ACTIVE_SHADOW_RADIUS_VALUE;
+    activeShadow.shadow_offset_x = testing_values::ACTIVE_SHADOW_OFFSET_X_INT_VALUE;
+    activeShadow.shadow_offset_y = testing_values::ACTIVE_SHADOW_OFFSET_Y_INT_VALUE;
+    activeShadow.shadow_color[0] = testing_values::ACTIVE_SHADOW_COLOR_VALUE[0];
+    activeShadow.shadow_color[1] = testing_values::ACTIVE_SHADOW_COLOR_VALUE[1];
+    activeShadow.shadow_color[2] = testing_values::ACTIVE_SHADOW_COLOR_VALUE[2];
+
+    decor_shadow_options_t inactiveShadow;
+
+    inactiveShadow.shadow_opacity = testing_values::INACTIVE_SHADOW_OPACITY_VALUE;
+    inactiveShadow.shadow_radius = testing_values::INACTIVE_SHADOW_RADIUS_VALUE;
+    inactiveShadow.shadow_offset_x = testing_values::INACTIVE_SHADOW_OFFSET_X_INT_VALUE;
+    inactiveShadow.shadow_offset_y = testing_values::INACTIVE_SHADOW_OFFSET_Y_INT_VALUE;
+    inactiveShadow.shadow_color[0] = testing_values::INACTIVE_SHADOW_COLOR_VALUE[0];
+    inactiveShadow.shadow_color[1] = testing_values::INACTIVE_SHADOW_COLOR_VALUE[1];
+    inactiveShadow.shadow_color[2] = testing_values::INACTIVE_SHADOW_COLOR_VALUE[2];
+
+    EXPECT_THAT (&activeShadowGValue, GValueMatch <decor_shadow_options_t> (activeShadow,
+									    g_value_get_pointer));
+    EXPECT_THAT (&inactiveShadowGValue, GValueMatch <decor_shadow_options_t> (inactiveShadow,
+									      g_value_get_pointer));
+}
+
+TEST_F(GWDSettingsTest, TestShadowPropertyChangedIsDefault)
+{
+    EXPECT_THAT (gwd_settings_writable_shadow_property_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+								ACTIVE_SHADOW_RADIUS_DEFAULT,
+								ACTIVE_SHADOW_OPACITY_DEFAULT,
+								ACTIVE_SHADOW_OFFSET_X_DEFAULT,
+								ACTIVE_SHADOW_OFFSET_Y_DEFAULT,
+								ACTIVE_SHADOW_COLOR_DEFAULT,
+								INACTIVE_SHADOW_RADIUS_DEFAULT,
+								INACTIVE_SHADOW_OPACITY_DEFAULT,
+								INACTIVE_SHADOW_OFFSET_X_DEFAULT,
+								INACTIVE_SHADOW_OFFSET_Y_DEFAULT,
+								INACTIVE_SHADOW_COLOR_DEFAULT), GBooleanFalse ());
+}
+
+TEST_F(GWDSettingsTest, TestUseTooltipsChanged)
+{
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_use_tooltips_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							     testing_values::USE_TOOLTIPS_VALUE), GBooleanTrue ());
+
+    AutoUnsetGValue useTooltipsValue (G_TYPE_BOOLEAN);
+    GValue &useTooltipsGValue = useTooltipsValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "use-tooltips",
+			   &useTooltipsGValue);
+
+    EXPECT_THAT (&useTooltipsGValue, GValueMatch <gboolean> (testing_values::USE_TOOLTIPS_VALUE,
+							     g_value_get_boolean));
+}
+
+TEST_F(GWDSettingsTest, TestUseTooltipsChangedIsDefault)
+{
+    EXPECT_THAT (gwd_settings_writable_use_tooltips_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							     USE_TOOLTIPS_DEFAULT), GBooleanFalse ());
+}
+
+TEST_F(GWDSettingsTest, TestDraggableBorderWidthChanged)
+{
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_draggable_border_width_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+								       testing_values::DRAGGABLE_BORDER_WIDTH_VALUE), GBooleanTrue ());
+
+    AutoUnsetGValue draggableBorderWidthValue (G_TYPE_INT);
+    GValue &draggableBorderWidthGValue = draggableBorderWidthValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "draggable-border-width",
+			   &draggableBorderWidthGValue);
+
+    EXPECT_THAT (&draggableBorderWidthGValue, GValueMatch <gint> (testing_values::DRAGGABLE_BORDER_WIDTH_VALUE,
+								  g_value_get_int));
+}
+
+TEST_F(GWDSettingsTest, TestDraggableBorderWidthChangedIsDefault)
+{
+    EXPECT_THAT (gwd_settings_writable_draggable_border_width_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+								       DRAGGABLE_BORDER_WIDTH_DEFAULT), GBooleanFalse ());
+}
+
+TEST_F(GWDSettingsTest, TestAttachModalDialogsChanged)
+{
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_attach_modal_dialogs_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+								     testing_values::ATTACH_MODAL_DIALOGS_VALUE), GBooleanTrue ());
+
+    AutoUnsetGValue attachModalDialogsValue (G_TYPE_BOOLEAN);
+    GValue &attachModalDialogsGValue = attachModalDialogsValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "attach-modal-dialogs",
+			   &attachModalDialogsGValue);
+
+    EXPECT_THAT (&attachModalDialogsGValue, GValueMatch <gboolean> (testing_values::ATTACH_MODAL_DIALOGS_VALUE,
+								    g_value_get_boolean));
+}
+
+TEST_F(GWDSettingsTest, TestAttachModalDialogsChangedIsDefault)
+{
+    EXPECT_THAT (gwd_settings_writable_attach_modal_dialogs_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+								     ATTACH_MODAL_DIALOGS_DEFAULT), GBooleanFalse ());
+}
+
+TEST_F(GWDSettingsTest, TestBlurChangedTitlebar)
+{
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_blur_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+						     testing_values::BLUR_TYPE_TITLEBAR_VALUE.c_str ()), GBooleanTrue ());
+
+    AutoUnsetGValue blurValue (G_TYPE_INT);
+    GValue &blurGValue = blurValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "blur",
+			   &blurGValue);
+
+    EXPECT_THAT (&blurGValue, GValueMatch <gint> (testing_values::BLUR_TYPE_TITLEBAR_INT_VALUE,
+						  g_value_get_int));
+}
+
+TEST_F(GWDSettingsTest, TestBlurChangedAll)
+{
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_blur_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+						     testing_values::BLUR_TYPE_ALL_VALUE.c_str ()), GBooleanTrue ());
+
+    AutoUnsetGValue blurValue (G_TYPE_INT);
+    GValue &blurGValue = blurValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "blur",
+			   &blurGValue);
+
+    EXPECT_THAT (&blurGValue, GValueMatch <gint> (testing_values::BLUR_TYPE_ALL_INT_VALUE,
+						  g_value_get_int));
+}
+
+TEST_F(GWDSettingsTest, TestBlurChangedNone)
+{
+    EXPECT_THAT (gwd_settings_writable_blur_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+						     testing_values::BLUR_TYPE_NONE_VALUE.c_str ()), GBooleanFalse ());
+
+    AutoUnsetGValue blurValue (G_TYPE_INT);
+    GValue &blurGValue = blurValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "blur",
+			   &blurGValue);
+
+    EXPECT_THAT (&blurGValue, GValueMatch <gint> (testing_values::BLUR_TYPE_NONE_INT_VALUE,
+						  g_value_get_int));
+}
+
+TEST_F(GWDSettingsTest, TestBlurSetCommandLine)
+{
+    gint blurType = testing_values::BLUR_TYPE_ALL_INT_VALUE;
+
+    /* We need to increment the reference count so that it doesn't
+     * go away when we create a new GWDSettingsImpl */
+    g_object_ref (mMockNotified.get ());
+    mSettings.reset (gwd_settings_impl_new (&blurType,
+					    NULL,
+					    mMockNotified.get ()),
+		     boost::bind (gwd_settings_unref, _1));
+
+    EXPECT_THAT (gwd_settings_writable_blur_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+						     testing_values::BLUR_TYPE_NONE_VALUE.c_str ()), GBooleanFalse ());
+
+    AutoUnsetGValue blurValue (G_TYPE_INT);
+    GValue &blurGValue = blurValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "blur",
+			   &blurGValue);
+
+    EXPECT_THAT (&blurGValue, GValueMatch <gint> (testing_values::BLUR_TYPE_ALL_INT_VALUE,
+						  g_value_get_int));
+}
+
+TEST_F(GWDSettingsTest, TestMetacityThemeChanged)
+{
+    EXPECT_CALL (*mGMockNotified, updateMetacityTheme ());
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_metacity_theme_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							       testing_values::USE_METACITY_THEME_VALUE,
+							       testing_values::METACITY_THEME_VALUE.c_str ()), GBooleanTrue ());
+
+    AutoUnsetGValue metacityThemeValue (G_TYPE_STRING);
+    GValue &metacityThemeGValue = metacityThemeValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "metacity-theme",
+			   &metacityThemeGValue);
+
+    EXPECT_THAT (&metacityThemeGValue, GValueMatch <std::string> (testing_values::METACITY_THEME_VALUE,
+								  g_value_get_string));
+}
+
+TEST_F(GWDSettingsTest, TestMetacityThemeChangedNoUseMetacityTheme)
+{
+    EXPECT_CALL (*mGMockNotified, updateMetacityTheme ());
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_metacity_theme_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							       testing_values::NO_USE_METACITY_THEME_VALUE,
+							       testing_values::METACITY_THEME_VALUE.c_str ()), GBooleanTrue ());
+
+    AutoUnsetGValue metacityThemeValue (G_TYPE_STRING);
+    GValue &metacityThemeGValue = metacityThemeValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "metacity-theme",
+			   &metacityThemeGValue);
+
+    EXPECT_THAT (&metacityThemeGValue, GValueMatch <std::string> (testing_values::NO_METACITY_THEME_VALUE,
+								  g_value_get_string));
+}
+
+TEST_F(GWDSettingsTest, TestMetacityThemeChangedIsDefault)
+{
+    EXPECT_THAT (gwd_settings_writable_metacity_theme_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							       testing_values::USE_METACITY_THEME_VALUE,
+							       METACITY_THEME_DEFAULT), GBooleanFalse ());
+}
+
+TEST_F(GWDSettingsTest, TestMetacityThemeSetCommandLine)
+{
+    const gchar *metacityTheme = "Ambiance";
+
+    g_object_ref (mMockNotified.get ());
+    mSettings.reset (gwd_settings_impl_new (NULL,
+					    &metacityTheme,
+					    mMockNotified.get ()),
+		     boost::bind (gwd_settings_unref, _1));
+
+    EXPECT_THAT (gwd_settings_writable_metacity_theme_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							       testing_values::USE_METACITY_THEME_VALUE,
+							       testing_values::METACITY_THEME_VALUE.c_str ()), GBooleanFalse ());
+
+    AutoUnsetGValue metacityThemeValue (G_TYPE_STRING);
+    GValue &metacityThemeGValue = metacityThemeValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "metacity-theme",
+			   &metacityThemeGValue);
+
+    EXPECT_THAT (&metacityThemeGValue, GValueMatch <std::string> (std::string (metacityTheme),
+								  g_value_get_string));
+}
+
+TEST_F(GWDSettingsTest, TestMetacityOpacityChanged)
+{
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_opacity_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							testing_values::INACTIVE_OPACITY_VALUE,
+							testing_values::ACTIVE_OPACITY_VALUE,
+							testing_values::INACTIVE_SHADE_OPACITY_VALUE,
+							testing_values::ACTIVE_SHADE_OPACITY_VALUE), GBooleanTrue ());
+
+    AutoUnsetGValue metacityInactiveOpacityValue (G_TYPE_DOUBLE);
+    AutoUnsetGValue metacityActiveOpacityValue (G_TYPE_DOUBLE);
+    AutoUnsetGValue metacityInactiveShadeOpacityValue (G_TYPE_BOOLEAN);
+    AutoUnsetGValue metacityActiveShadeOpacityValue (G_TYPE_BOOLEAN);
+
+    GValue &metacityInactiveOpacityGValue = metacityInactiveOpacityValue;
+    GValue &metacityActiveOpacityGValue = metacityActiveOpacityValue;
+    GValue &metacityInactiveShadeOpacityGValue = metacityInactiveShadeOpacityValue;
+    GValue &metacityActiveShadeOpacityGValue = metacityActiveShadeOpacityValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "metacity-inactive-opacity",
+			   &metacityInactiveOpacityGValue);
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "metacity-active-opacity",
+			   &metacityActiveOpacityGValue);
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "metacity-inactive-shade-opacity",
+			   &metacityInactiveShadeOpacityGValue);
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "metacity-active-shade-opacity",
+			   &metacityActiveShadeOpacityGValue);
+
+    EXPECT_THAT (&metacityInactiveOpacityGValue, GValueMatch <gdouble> (testing_values::INACTIVE_OPACITY_VALUE,
+									g_value_get_double));
+    EXPECT_THAT (&metacityActiveOpacityGValue, GValueMatch <gdouble> (testing_values::ACTIVE_OPACITY_VALUE,
+									g_value_get_double));
+    EXPECT_THAT (&metacityInactiveShadeOpacityGValue, GValueMatch <gboolean> (testing_values::INACTIVE_SHADE_OPACITY_VALUE,
+									g_value_get_boolean));
+    EXPECT_THAT (&metacityActiveShadeOpacityGValue, GValueMatch <gboolean> (testing_values::ACTIVE_SHADE_OPACITY_VALUE,
+									g_value_get_boolean));
+}
+
+TEST_F(GWDSettingsTest, TestMetacityOpacityChangedIsDefault)
+{
+    EXPECT_THAT (gwd_settings_writable_opacity_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							METACITY_INACTIVE_OPACITY_DEFAULT,
+							METACITY_ACTIVE_OPACITY_DEFAULT,
+							METACITY_INACTIVE_SHADE_OPACITY_DEFAULT,
+							METACITY_ACTIVE_SHADE_OPACITY_DEFAULT), GBooleanFalse ());
+}
+
+TEST_F(GWDSettingsTest, TestButtonLayoutChanged)
+{
+    EXPECT_CALL (*mGMockNotified, updateMetacityButtonLayout ());
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_button_layout_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							      testing_values::BUTTON_LAYOUT_VALUE.c_str ()), GBooleanTrue ());
+
+    AutoUnsetGValue buttonLayoutValue (G_TYPE_STRING);
+    GValue &buttonLayoutGValue = buttonLayoutValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "metacity-button-layout",
+			   &buttonLayoutGValue);
+
+    EXPECT_THAT (&buttonLayoutGValue, GValueMatch <std::string> (testing_values::BUTTON_LAYOUT_VALUE,
+								 g_value_get_string));
+}
+
+TEST_F(GWDSettingsTest, TestButtonLayoutChangedIsDefault)
+{
+    EXPECT_THAT (gwd_settings_writable_button_layout_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+							      METACITY_BUTTON_LAYOUT_DEFAULT), GBooleanFalse ());
+}
+
+TEST_F(GWDSettingsTest, TestTitlebarFontChanged)
+{
+    EXPECT_CALL (*mGMockNotified, updateFrames ());
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_font_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+						     testing_values::NO_USE_SYSTEM_FONT_VALUE,
+						     testing_values::TITLEBAR_FONT_VALUE.c_str ()), GBooleanTrue ());
+
+    AutoUnsetGValue fontValue (G_TYPE_STRING);
+    GValue	    &fontGValue = fontValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "titlebar-font",
+			   &fontGValue);
+
+    EXPECT_THAT (&fontGValue, GValueMatch <std::string> (testing_values::TITLEBAR_FONT_VALUE.c_str (),
+							 g_value_get_string));
+}
+
+TEST_F(GWDSettingsTest, TestTitlebarFontChangedUseSystemFont)
+{
+    EXPECT_CALL (*mGMockNotified, updateFrames ());
+    EXPECT_CALL (*mGMockNotified, updateDecorations ());
+    EXPECT_THAT (gwd_settings_writable_font_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+						     testing_values::USE_SYSTEM_FONT_VALUE,
+						     testing_values::TITLEBAR_FONT_VALUE.c_str ()), GBooleanTrue ());
+
+    AutoUnsetGValue fontValue (G_TYPE_STRING);
+    GValue	    &fontGValue = fontValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "titlebar-font",
+			   &fontGValue);
+
+    EXPECT_THAT (&fontGValue, GValueMatch <const gchar *> (NULL,
+							   g_value_get_string));
+}
+
+
+TEST_F(GWDSettingsTest, TestTitlebarFontChangedIsDefault)
+{
+    EXPECT_THAT (gwd_settings_writable_font_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+						     testing_values::NO_USE_SYSTEM_FONT_VALUE,
+						     TITLEBAR_FONT_DEFAULT), GBooleanFalse ());
+}
+
+namespace
+{
+    class GWDTitlebarActionInfo
+    {
+	public:
+
+	    GWDTitlebarActionInfo (const std::string &titlebarAction,
+				   const std::string &mouseWheelAction,
+				   const gint	     titlebarActionId,
+				   const gint	     mouseWheelActionId) :
+		mTitlebarAction (titlebarAction),
+		mMouseWheelAction (mouseWheelAction),
+		mTitlebarActionId (titlebarActionId),
+		mMouseWheelActionId (mouseWheelActionId)
+	    {
+	    }
+
+	    const std::string & titlebarAction () const { return mTitlebarAction; }
+	    const std::string & mouseWheelAction () const { return mMouseWheelAction; }
+	    const gint	      & titlebarActionId () const { return mTitlebarActionId; }
+	    const gint	      & mouseWheelActionId () const { return mMouseWheelActionId; }
+
+	private:
+
+	    std::string mTitlebarAction;
+	    std::string mMouseWheelAction;
+	    gint	mTitlebarActionId;
+	    gint	mMouseWheelActionId;
+    };
+}
+
+class GWDSettingsTestClickActions :
+    public ::testing::TestWithParam <GWDTitlebarActionInfo>
+{
+    public:
+
+	virtual void SetUp ()
+	{
+	    g_setenv ("G_SLICE", "always-malloc", TRUE);
+	    g_type_init ();
+	    mGMockNotified.reset (new GWDMockSettingsNotifiedGMock ());
+	    mMockNotified.reset (gwd_mock_settings_notified_new (mGMockNotified.get ()),
+				 boost::bind (gwd_settings_notified_do_nothing, _1));
+	    mSettings.reset (gwd_settings_impl_new (NULL,
+						    NULL,
+						    mMockNotified.get ()),
+			     boost::bind (gwd_settings_unref, _1));
+	}
+
+	virtual void TearDown ()
+	{
+	    EXPECT_CALL (*mGMockNotified, dispose ());
+	    EXPECT_CALL (*mGMockNotified, finalize ());
+
+	    g_unsetenv ("G_SLICE");
+	}
+
+    protected:
+
+	boost::shared_ptr <GWDMockSettingsNotifiedGMock> mGMockNotified;
+	boost::shared_ptr <GWDSettingsNotified> mMockNotified;
+	boost::shared_ptr <GWDSettingsImpl> mSettings;
+};
+
+TEST_P(GWDSettingsTestClickActions, TestClickActionsAndMouseActions)
+{
+    gwd_settings_writable_titlebar_actions_changed (GWD_SETTINGS_WRITABLE_INTERFACE (mSettings.get ()),
+						    GetParam ().titlebarAction ().c_str (),
+						    GetParam ().titlebarAction ().c_str (),
+						    GetParam ().titlebarAction ().c_str (),
+						    GetParam ().mouseWheelAction ().c_str ());
+
+    AutoUnsetGValue doubleClickActionValue (G_TYPE_INT);
+    AutoUnsetGValue middleClickActionValue (G_TYPE_INT);
+    AutoUnsetGValue rightClickActionValue (G_TYPE_INT);
+    AutoUnsetGValue mouseWheelActionValue (G_TYPE_INT);
+
+    GValue &doubleClickActionGValue = doubleClickActionValue;
+    GValue &middleClickActionGValue = middleClickActionValue;
+    GValue &rightClickActionGValue = rightClickActionValue;
+    GValue &mouseWheelActionGValue = mouseWheelActionValue;
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "titlebar-double-click-action",
+			   &doubleClickActionGValue);
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "titlebar-middle-click-action",
+			   &middleClickActionGValue);
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "titlebar-right-click-action",
+			   &rightClickActionGValue);
+
+    g_object_get_property (G_OBJECT (mSettings.get ()),
+			   "mouse-wheel-action",
+			   &mouseWheelActionGValue);
+
+    EXPECT_THAT (&doubleClickActionGValue, GValueMatch <gint> (GetParam ().titlebarActionId (),
+							      g_value_get_int));
+    EXPECT_THAT (&middleClickActionGValue, GValueMatch <gint> (GetParam ().titlebarActionId (),
+							      g_value_get_int));
+    EXPECT_THAT (&rightClickActionGValue, GValueMatch <gint> (GetParam ().titlebarActionId (),
+							     g_value_get_int));
+    EXPECT_THAT (&mouseWheelActionGValue, GValueMatch <gint> (GetParam ().mouseWheelActionId (),
+							     g_value_get_int));
+}
+
+INSTANTIATE_TEST_CASE_P (MouseActions, GWDSettingsTestClickActions,
+			 ::testing::Values (GWDTitlebarActionInfo (testing_values::TITLEBAR_ACTION_NONE,
+								   testing_values::TITLEBAR_ACTION_NONE,
+								   CLICK_ACTION_NONE,
+								   WHEEL_ACTION_NONE),
+					    GWDTitlebarActionInfo (testing_values::TITLEBAR_ACTION_SHADE,
+								   testing_values::MOUSE_WHEEL_ACTION_SHADE,
+								   CLICK_ACTION_SHADE,
+								   WHEEL_ACTION_SHADE),
+					    GWDTitlebarActionInfo (testing_values::TITLEBAR_ACTION_MAX,
+								   testing_values::MOUSE_WHEEL_ACTION_SHADE,
+								   CLICK_ACTION_MAXIMIZE,
+								   WHEEL_ACTION_SHADE),
+					    GWDTitlebarActionInfo (testing_values::TITLEBAR_ACTION_MINIMIZE,
+								   testing_values::MOUSE_WHEEL_ACTION_SHADE,
+								   CLICK_ACTION_MINIMIZE,
+								   WHEEL_ACTION_SHADE),
+					    GWDTitlebarActionInfo (testing_values::TITLEBAR_ACTION_LOWER,
+								   testing_values::MOUSE_WHEEL_ACTION_SHADE,
+								   CLICK_ACTION_LOWER,
+								   WHEEL_ACTION_SHADE),
+					    GWDTitlebarActionInfo (testing_values::TITLEBAR_ACTION_MENU,
+								   testing_values::MOUSE_WHEEL_ACTION_SHADE,
+								   CLICK_ACTION_MENU,
+								   WHEEL_ACTION_SHADE)));
+
+class GWDSettingsStorageFactoryWrapperInterface
+{
+    public:
+
+	typedef boost::shared_ptr <GWDSettingsStorageFactoryWrapperInterface> Ptr;
+	virtual ~GWDSettingsStorageFactoryWrapperInterface () {}
+
+	virtual void SetUp (GWDSettingsWritable *writable) = 0;
+	virtual GWDSettingsStorage * GetStorage () = 0;
+	virtual void SetUseTooltips (gboolean useTooltips) = 0;
+	virtual void SetDraggableBorderWidth (gint draggableBorderWidth) = 0;
+	virtual void SetAttachModalDialogs (gboolean attachModalDialogs) = 0;
+	virtual void SetBlur (const std::string &blurType) = 0;
+	virtual void SetOpacity (gdouble activeOpacity,
+				 gdouble inactiveOpacity,
+				 gboolean activeShadeOpacity,
+				 gboolean inactiveShadeOpacity) = 0;
+	virtual void SetMetacityTheme (gboolean useMetacityTheme,
+					  const std::string &metacityTheme) = 0;
+	virtual void SetButtonLayout (const std::string &buttonLayout) = 0;
+	virtual void SetFont (gboolean useSystemFont, const std::string &titlebarFont) = 0;
+	virtual void SetTitlebarActions (const std::string &doubleClickAction,
+					 const std::string &middleClickAction,
+					 const std::string &rightClickAction,
+					 const std::string &mouseWheelAction) = 0;
+	virtual void TearDown () = 0;
+};
+
+class GWDSettingsTestStorageUpdates :
+    public ::testing::TestWithParam <GWDSettingsStorageFactoryWrapperInterface::Ptr>
+{
+    public:
+
+	virtual void SetUp ()
+	{
+	    g_setenv ("G_SLICE", "always-malloc", TRUE);
+	    g_type_init ();
+	    mSettingsMock.reset (new GWDMockSettingsWritableGMock ());
+	    mSettings.reset (gwd_mock_settings_writable_new (mSettingsMock.get ()),
+			     boost::bind (gwd_settings_writable_unref, _1));
+
+	    GetParam ()->SetUp (mSettings.get ());
+	}
+
+	virtual void TearDown ()
+	{
+	    EXPECT_CALL (*mSettingsMock, dispose ());
+	    EXPECT_CALL (*mSettingsMock, finalize ());
+
+	    GetParam ()->TearDown ();
+	    g_unsetenv ("G_SLICE");
+	}
+
+    protected:
+
+	boost::shared_ptr <GWDMockSettingsWritableGMock> mSettingsMock;
+	boost::shared_ptr <GWDSettingsWritable> mSettings;
+};
+
+ACTION_P (InvokeFunctor, p) { return p (); }
+
+TEST_P (GWDSettingsTestStorageUpdates, TestInstantiation)
+{
+}
+
+TEST_P (GWDSettingsTestStorageUpdates, TestSetUseTooltips)
+{
+    GWDSettingsStorage *storage = GetParam ()->GetStorage ();
+    GetParam ()->SetUseTooltips (testing_values::USE_TOOLTIPS_VALUE);
+
+    EXPECT_CALL (*mSettingsMock, useTooltipsChanged (testing_values::USE_TOOLTIPS_VALUE));
+
+    gwd_settings_storage_update_use_tooltips (storage);
+}
+
+TEST_P (GWDSettingsTestStorageUpdates, TestSetDraggableBorderWidth)
+{
+    GWDSettingsStorage *storage = GetParam ()->GetStorage ();
+    GetParam ()->SetDraggableBorderWidth (testing_values::DRAGGABLE_BORDER_WIDTH_VALUE);
+
+    EXPECT_CALL (*mSettingsMock, draggableBorderWidthChanged (testing_values::DRAGGABLE_BORDER_WIDTH_VALUE));
+
+    gwd_settings_storage_update_draggable_border_width (storage);
+}
+
+TEST_P (GWDSettingsTestStorageUpdates, TestSetAttachModalDialogs)
+{
+    GWDSettingsStorage *storage = GetParam ()->GetStorage ();
+    GetParam ()->SetAttachModalDialogs (testing_values::ATTACH_MODAL_DIALOGS_VALUE);
+
+    EXPECT_CALL (*mSettingsMock, attachModalDialogsChanged (testing_values::ATTACH_MODAL_DIALOGS_VALUE));
+
+    gwd_settings_storage_update_attach_modal_dialogs (storage);
+}
+
+TEST_P (GWDSettingsTestStorageUpdates, TestSetBlur)
+{
+    GWDSettingsStorage *storage = GetParam ()->GetStorage ();
+    GetParam ()->SetBlur (testing_values::BLUR_TYPE_ALL_VALUE);
+
+    EXPECT_CALL (*mSettingsMock, blurChanged (Eq (testing_values::BLUR_TYPE_ALL_VALUE)));
+
+    gwd_settings_storage_update_blur (storage);
+}
+
+TEST_P (GWDSettingsTestStorageUpdates, TestSetButtonLayout)
+{
+    GWDSettingsStorage *storage = GetParam ()->GetStorage ();
+    GetParam ()->SetButtonLayout (testing_values::BUTTON_LAYOUT_VALUE);
+
+    EXPECT_CALL (*mSettingsMock, buttonLayoutChanged (Eq (testing_values::BUTTON_LAYOUT_VALUE)));
+
+    gwd_settings_storage_update_button_layout (storage);
+}
+
+TEST_P (GWDSettingsTestStorageUpdates, TestSetOpacity)
+{
+    GWDSettingsStorage *storage = GetParam ()->GetStorage ();
+    GetParam ()->SetOpacity (testing_values::ACTIVE_OPACITY_VALUE,
+			     testing_values::INACTIVE_OPACITY_VALUE,
+			     testing_values::ACTIVE_SHADE_OPACITY_VALUE,
+			     testing_values::INACTIVE_SHADE_OPACITY_VALUE);
+
+    EXPECT_CALL (*mSettingsMock, opacityChanged (testing_values::ACTIVE_OPACITY_VALUE,
+						 testing_values::INACTIVE_OPACITY_VALUE,
+						 testing_values::ACTIVE_SHADE_OPACITY_VALUE,
+						 testing_values::INACTIVE_SHADE_OPACITY_VALUE));
+
+    gwd_settings_storage_update_opacity (storage);
+}
+
+TEST_P (GWDSettingsTestStorageUpdates, TestSetMetacityTheme)
+{
+    GWDSettingsStorage *storage = GetParam ()->GetStorage ();
+    GetParam ()->SetMetacityTheme (testing_values::USE_METACITY_THEME_VALUE,
+				   testing_values::METACITY_THEME_VALUE);
+
+    EXPECT_CALL (*mSettingsMock, metacityThemeChanged (testing_values::USE_METACITY_THEME_VALUE,
+						       Eq (testing_values::METACITY_THEME_VALUE)));
+
+    gwd_settings_storage_update_metacity_theme (storage);
+}
+
+TEST_P (GWDSettingsTestStorageUpdates, TestSetFont)
+{
+    GWDSettingsStorage *storage = GetParam ()->GetStorage ();
+    GetParam ()->SetFont (testing_values::USE_SYSTEM_FONT_VALUE,
+			  testing_values::TITLEBAR_FONT_VALUE);
+
+    EXPECT_CALL (*mSettingsMock, fontChanged (testing_values::USE_SYSTEM_FONT_VALUE,
+					      Eq (testing_values::TITLEBAR_FONT_VALUE)));
+
+    gwd_settings_storage_update_font (storage);
+}
+
+TEST_P (GWDSettingsTestStorageUpdates, TestSetTitlebarActions)
+{
+    GWDSettingsStorage *storage = GetParam ()->GetStorage ();
+    GetParam ()->SetTitlebarActions (testing_values::TITLEBAR_ACTION_LOWER,
+				     testing_values::TITLEBAR_ACTION_MAX,
+				     testing_values::TITLEBAR_ACTION_MENU,
+				     testing_values::TITLEBAR_ACTION_SHADE);
+
+    EXPECT_CALL (*mSettingsMock, titlebarActionsChanged (Eq (testing_values::TITLEBAR_ACTION_LOWER),
+							 Eq (testing_values::TITLEBAR_ACTION_MAX),
+							 Eq (testing_values::TITLEBAR_ACTION_MENU),
+							 Eq (testing_values::TITLEBAR_ACTION_SHADE)));
+
+    gwd_settings_storage_update_titlebar_actions (storage);
+}
+
+class GWDMockSettingsStorageFactoryWrapper :
+    public GWDSettingsStorageFactoryWrapperInterface
+{
+    public:
+
+	virtual void SetUp (GWDSettingsWritable *writable)
+	{
+	    mWritable = writable;
+	    mStorageMock.reset (new GWDMockSettingsStorageGMock ());
+	    mStorage.reset (gwd_mock_settings_storage_new (mStorageMock.get ()),
+			    boost::bind (gwd_settings_storage_unref, _1));
+	}
+
+	virtual GWDSettingsStorage * GetStorage ()
+	{
+	    return mStorage.get ();
+	}
+
+	virtual void SetUseTooltips (gboolean useTooltips)
+	{
+	    EXPECT_CALL (*mStorageMock, updateUseTooltips ())
+		    .WillOnce (
+			InvokeFunctor (
+			    boost::bind (
+				gwd_settings_writable_use_tooltips_changed, mWritable, useTooltips)));
+	}
+
+	virtual void SetDraggableBorderWidth (gint draggableBorderWidth)
+	{
+	    EXPECT_CALL (*mStorageMock, updateDraggableBorderWidth ())
+		    .WillOnce (
+			InvokeFunctor (
+			    boost::bind (
+				gwd_settings_writable_draggable_border_width_changed, mWritable, draggableBorderWidth)));
+	}
+
+	virtual void SetAttachModalDialogs (gboolean attachModalDialogs)
+	{
+	    EXPECT_CALL (*mStorageMock, updateAttachModalDialogs ())
+		    .WillOnce (
+			InvokeFunctor (
+			    boost::bind (
+				gwd_settings_writable_attach_modal_dialogs_changed, mWritable, attachModalDialogs)));
+	}
+
+	virtual void SetBlur (const std::string &blurType)
+	{
+	    EXPECT_CALL (*mStorageMock, updateBlur ())
+		    .WillOnce (
+			InvokeFunctor (
+			    boost::bind (
+				gwd_settings_writable_blur_changed, mWritable, blurType.c_str ())));
+	}
+
+	virtual void SetOpacity (gdouble activeOpacity,
+				 gdouble inactiveOpacity,
+				 gboolean activeShadeOpacity,
+				 gboolean inactiveShadeOpacity)
+	{
+	    EXPECT_CALL (*mStorageMock, updateOpacity ())
+		    .WillOnce (
+			InvokeFunctor (
+			    boost::bind (
+				gwd_settings_writable_opacity_changed,
+				mWritable,
+				activeOpacity,
+				inactiveOpacity,
+				activeShadeOpacity,
+				inactiveShadeOpacity)));
+	}
+
+	virtual void SetMetacityTheme (gboolean useMetacityTheme,
+				       const std::string &metacityTheme)
+	{
+	    EXPECT_CALL (*mStorageMock, updateMetacityTheme ())
+		    .WillOnce (
+			InvokeFunctor (
+			    boost::bind (
+				gwd_settings_writable_metacity_theme_changed,
+				mWritable,
+				useMetacityTheme,
+				metacityTheme.c_str ())));
+	}
+
+	virtual void SetButtonLayout (const std::string &buttonLayout)
+	{
+	    EXPECT_CALL (*mStorageMock, updateButtonLayout ())
+		    .WillOnce (
+			InvokeFunctor (
+			    boost::bind (
+				gwd_settings_writable_button_layout_changed, mWritable, buttonLayout.c_str ())));
+	}
+
+	virtual void SetFont (gboolean useSystemFont, const std::string &titlebarFont)
+	{
+	    EXPECT_CALL (*mStorageMock, updateFont ())
+		    .WillOnce (
+			InvokeFunctor (
+			    boost::bind (
+				gwd_settings_writable_font_changed,
+				mWritable,
+				useSystemFont,
+				titlebarFont.c_str ())));
+	}
+
+	virtual void SetTitlebarActions (const std::string &doubleClickAction,
+					 const std::string &middleClickAction,
+					 const std::string &rightClickAction,
+					 const std::string &mouseWheelAction)
+	{
+	    EXPECT_CALL (*mStorageMock, updateTitlebarActions ())
+		    .WillOnce (
+			InvokeFunctor (
+			    boost::bind (
+				gwd_settings_writable_titlebar_actions_changed,
+				mWritable,
+				doubleClickAction.c_str (),
+				middleClickAction.c_str (),
+				rightClickAction.c_str (),
+				mouseWheelAction.c_str ())));
+	}
+
+	virtual void TearDown ()
+	{
+	    if (mStorage)
+	    {
+		EXPECT_CALL (*mStorageMock, dispose ());
+		EXPECT_CALL (*mStorageMock, finalize ());
+	    }
+
+	    mStorage.reset ();
+	    mStorageMock.reset ();
+	}
+
+    private:
+
+	GWDSettingsWritable *mWritable;
+	boost::shared_ptr <GWDMockSettingsStorageGMock> mStorageMock;
+	boost::shared_ptr <GWDSettingsStorage> mStorage;
+};
+
+INSTANTIATE_TEST_CASE_P (MockStorageUpdates, GWDSettingsTestStorageUpdates,
+			 ::testing::Values (boost::shared_static_cast <GWDSettingsStorageFactoryWrapperInterface> (boost::make_shared <GWDMockSettingsStorageFactoryWrapper> ())));
+
+#ifdef USE_GSETTINGS
+class GWDSettingsStorageGSettingsFactoryWrapper :
+    public GWDSettingsStorageFactoryWrapperInterface
+{
+    public:
+
+	virtual void SetUp (GWDSettingsWritable *writable)
+	{
+	    g_setenv ("GSETTINGS_SCHEMA_DIR", MOCK_PATH.c_str (), true);
+	    g_setenv ("GSETTINGS_BACKEND", "memory", 1);
+
+	    /* We do not need to keep a reference to these */
+	    mGWDSettings = gwd_get_org_compiz_gwd_settings ();
+	    mMutterSettings = gwd_get_org_gnome_mutter_settings ();
+	    mDesktopSettings = gwd_get_org_gnome_desktop_wm_preferences_settings ();
+
+	    mStorage.reset (gwd_settings_storage_gsettings_new (mDesktopSettings,
+								mMutterSettings,
+								mGWDSettings,
+								writable),
+			    boost::bind (gwd_settings_storage_unref, _1));
+	}
+
+	virtual GWDSettingsStorage * GetStorage ()
+	{
+	    return mStorage.get ();
+	}
+
+	virtual void SetUseTooltips (gboolean useTooltips)
+	{
+	    g_settings_set_boolean (mGWDSettings, ORG_COMPIZ_GWD_KEY_USE_TOOLTIPS, useTooltips);
+	}
+
+	virtual void SetDraggableBorderWidth (gint draggableBorderWidth)
+	{
+	    g_settings_set_int (mMutterSettings, ORG_GNOME_MUTTER_DRAGGABLE_BORDER_WIDTH, draggableBorderWidth);
+	}
+
+	virtual void SetAttachModalDialogs (gboolean attachModalDialogs)
+	{
+	    g_settings_set_boolean (mMutterSettings, ORG_GNOME_MUTTER_ATTACH_MODAL_DIALOGS, attachModalDialogs);
+	}
+
+	virtual void SetBlur (const std::string &blurType)
+	{
+	    g_settings_set_string (mGWDSettings, ORG_COMPIZ_GWD_KEY_BLUR_TYPE, blurType.c_str ());
+	}
+
+	virtual void SetOpacity (gdouble activeOpacity,
+				 gdouble inactiveOpacity,
+				 gboolean activeShadeOpacity,
+				 gboolean inactiveShadeOpacity)
+	{
+	    g_settings_set_double (mGWDSettings, ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_OPACITY, activeOpacity);
+	    g_settings_set_double (mGWDSettings, ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_OPACITY, inactiveOpacity);
+	    g_settings_set_boolean (mGWDSettings, ORG_COMPIZ_GWD_KEY_METACITY_THEME_ACTIVE_SHADE_OPACITY, activeShadeOpacity);
+	    g_settings_set_boolean (mGWDSettings, ORG_COMPIZ_GWD_KEY_METACITY_THEME_INACTIVE_SHADE_OPACITY, inactiveShadeOpacity);
+	}
+
+	virtual void SetMetacityTheme (gboolean useMetacityTheme,
+				       const std::string &metacityTheme)
+	{
+	    g_settings_set_boolean (mGWDSettings, ORG_COMPIZ_GWD_KEY_USE_METACITY_THEME, useMetacityTheme);
+	    g_settings_set_string (mDesktopSettings, ORG_GNOME_DESKTOP_WM_PREFERENCES_THEME, metacityTheme.c_str ());
+	}
+
+	virtual void SetButtonLayout (const std::string &buttonLayout)
+	{
+	    g_settings_set_string (mDesktopSettings,
+				   ORG_GNOME_DESKTOP_WM_PREFERENCES_BUTTON_LAYOUT,
+				   buttonLayout.c_str ());
+	}
+
+	virtual void SetFont (gboolean useSystemFont, const std::string &titlebarFont)
+	{
+	    g_settings_set_boolean (mDesktopSettings,
+				    ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_USES_SYSTEM_FONT,
+				    useSystemFont);
+	    g_settings_set_string (mDesktopSettings,
+				   ORG_GNOME_DESKTOP_WM_PREFERENCES_TITLEBAR_FONT,
+				   titlebarFont.c_str ());
+	}
+
+	virtual void SetTitlebarActions (const std::string &doubleClickAction,
+					 const std::string &middleClickAction,
+					 const std::string &rightClickAction,
+					 const std::string &mouseWheelAction)
+	{
+	    std::string translatedDC (doubleClickAction);
+	    std::string translatedMC (middleClickAction);
+	    std::string translatedRC (rightClickAction);
+
+	    boost::replace_all (translatedDC, "_", "-");
+	    boost::replace_all (translatedMC, "_", "-");
+	    boost::replace_all (translatedRC, "_", "-");
+
+	    g_settings_set_string (mDesktopSettings,
+				   ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_DOUBLE_CLICK_TITLEBAR,
+				   translatedDC.c_str ());
+	    g_settings_set_string (mDesktopSettings,
+				   ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_MIDDLE_CLICK_TITLEBAR,
+				   translatedMC.c_str ());
+	    g_settings_set_string (mDesktopSettings,
+				   ORG_GNOME_DESKTOP_WM_PREFERENCES_ACTION_RIGHT_CLICK_TITLEBAR,
+				   translatedRC.c_str ());
+	    g_settings_set_string (mGWDSettings,
+				   ORG_COMPIZ_GWD_KEY_MOUSE_WHEEL_ACTION,
+				   mouseWheelAction.c_str ());
+	}
+
+	virtual void TearDown ()
+	{
+	    mStorage.reset ();
+	    mGWDSettings = NULL;
+	    mMutterSettings = NULL;
+	    mDesktopSettings = NULL;
+	    g_unsetenv ("GSETTINGS_BACKEND");
+	    g_unsetenv ("GSETTINGS_SCHEMA_DIR");
+	}
+
+    private:
+
+	GSettings			       *mGWDSettings;
+	GSettings			       *mMutterSettings;
+	GSettings			       *mDesktopSettings;
+	boost::shared_ptr <GWDSettingsStorage> mStorage;
+};
+
+INSTANTIATE_TEST_CASE_P (GSettingsStorageUpdates, GWDSettingsTestStorageUpdates,
+			 ::testing::Values (boost::shared_static_cast <GWDSettingsStorageFactoryWrapperInterface> (boost::make_shared <GWDSettingsStorageGSettingsFactoryWrapper> ())));
+
+#endif

=== modified file 'gtk/window-decorator/wnck.c'
--- gtk/window-decorator/wnck.c	2012-07-25 02:01:26 +0000
+++ gtk/window-decorator/wnck.c	2012-09-01 07:19:22 +0000
@@ -183,7 +183,10 @@
     gdkdisplay = gdk_display_get_default ();
     gdkscreen  = gdk_display_get_default_screen (gdkdisplay);
 
-    gwd_frames_foreach (set_frames_scales, (gpointer) settings->font);
+    const gchar *titlebar_font = NULL;
+    g_object_get (settings, "titlebar-font", &titlebar_font, NULL);
+
+    gwd_frames_foreach (set_frames_scales, (gpointer) titlebar_font);
 
     update_titlebar_font ();
     gwd_process_frames (update_frames_border_extents,

=== modified file 'include/decoration.h'
--- include/decoration.h	2012-05-10 15:40:25 +0000
+++ include/decoration.h	2012-09-01 07:19:22 +0000
@@ -510,6 +510,10 @@
 			     unsigned int frame_state,
 			     unsigned int frame_actions);
 
+int
+decor_shadow_options_cmp (const decor_shadow_options_t *a,
+			  const decor_shadow_options_t *b);
+
 #ifdef  __cplusplus
 }
 #endif

=== modified file 'libdecoration/decoration.c'
--- libdecoration/decoration.c	2012-08-03 21:38:45 +0000
+++ libdecoration/decoration.c	2012-09-01 07:19:22 +0000
@@ -376,6 +376,17 @@
     return (a->x - b->x) | (a->y - b->y) | (a->gravity - b->gravity);
 }
 
+int
+decor_shadow_options_cmp (const decor_shadow_options_t *a,
+			  const decor_shadow_options_t *b)
+{
+    return (a->shadow_radius != b->shadow_radius) ||
+	   (a->shadow_opacity != b->shadow_opacity) ||
+	   (a->shadow_offset_x != b->shadow_offset_x) ||
+	   (a->shadow_offset_y != b->shadow_offset_y) ||
+	   memcmp (a->shadow_color, b->shadow_color, sizeof (unsigned short) * 3);
+}
+
 static int
 decor_matrix_cmp (const decor_matrix_t *a, const decor_matrix_t *b)
 {

