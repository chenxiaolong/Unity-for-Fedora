Changes that Ubuntu backported from upstream:

* Started applications pinned to the launcher are not set as running
  (LP: #976642)
* sometimes icons get dropped from the launcher when they should not
  (LP: #925421)

--- bamf-0.2.118.orig/configure
+++ bamf-0.2.118/configure
@@ -14642,7 +14642,7 @@
 
 fi
 
-CFLAGS="$CFLAGS -Wall -Werror -lm"
+CFLAGS="$CFLAGS -Wall -lm"
 
 
 
--- bamf-0.2.118.orig/configure.in
+++ bamf-0.2.118/configure.in
@@ -143,7 +143,7 @@
 fi
 
 dnl CFLAGS
-CFLAGS="$CFLAGS -Wall -Werror -lm"
+CFLAGS="$CFLAGS -Wall -lm"
 
 AC_SUBST(BAMFDAEMON_CFLAGS)
 AC_SUBST(BAMFDAEMON_LIBS)
--- bamf-0.2.118.orig/src/bamf-view.c
+++ bamf-0.2.118/src/bamf-view.c
@@ -683,7 +683,8 @@
       if (g_dbus_interface_skeleton_get_object_path (iface))
         g_dbus_interface_skeleton_unexport (iface);
     }
-  g_list_free (ifaces);
+
+  g_list_free_full (ifaces, g_object_unref);
 
   if (priv->name)
     {
--- bamf-0.2.118.orig/lib/libbamf/bamf-view.c
+++ bamf-0.2.118/lib/libbamf/bamf-view.c
@@ -67,7 +67,7 @@
   URGENT_CHANGED,
   VISIBLE_CHANGED,
   NAME_CHANGED,
- 
+
   LAST_SIGNAL,
 };
 
@@ -415,7 +415,10 @@
 gboolean 
 bamf_view_remote_ready (BamfView *view)
 {
-  return BAMF_IS_VIEW (view) && view->priv->proxy;
+  if (BAMF_IS_VIEW (view) && view->priv->proxy)
+    return !view->priv->is_closed;
+
+  return FALSE;
 }
 
 const gchar *
@@ -552,39 +555,39 @@
 
   view->priv->checked_flags = 0x0;
   view->priv->proxy = NULL;
+
+  g_free (view->priv->path);
+  view->priv->path = NULL;
 }
 
-static void
-bamf_view_on_closed (DBusGProxy *proxy, BamfView *self)
+void
+_bamf_view_set_closed (BamfView *view, gboolean closed)
 {
   BamfViewPrivate *priv;
+  g_return_if_fail (BAMF_IS_VIEW (view));
 
-  priv = self->priv;
-
-  priv->is_closed = TRUE;
+  priv = view->priv;
 
-  if (priv->cached_children)
+  if (priv->is_closed != closed)
     {
-      g_list_free_full (priv->cached_children, g_object_unref);
-      priv->cached_children = NULL;
-    }
+      priv->is_closed = closed;
 
-  if (priv->sticky)
-    {
-      bamf_view_unset_proxy (self);
+      if (closed && priv->cached_children)
+        {
+          g_list_free_full (priv->cached_children, g_object_unref);
+          priv->cached_children = NULL;
+        }
     }
-  
+}
+
+static void
+bamf_view_on_closed (DBusGProxy *proxy, BamfView *self)
+{
+  _bamf_view_set_closed (self, TRUE);
+
   g_object_ref (self);
-  
-  // must be emitted before path is cleared as path is utilized in cleanup
-  g_signal_emit (G_OBJECT (self), view_signals[CLOSED], 0);
 
-  if (priv->path)
-    {
-      g_free (priv->path);
-      priv->path = NULL;
-    }
-    
+  g_signal_emit (G_OBJECT (self), view_signals[CLOSED], 0);
   g_object_unref (self);
 }
 
@@ -608,7 +611,7 @@
   switch (property_id)
     {
       case PROP_PATH:
-        g_value_set_string (value, self->priv->path);
+        g_value_set_string (value, self->priv->is_closed ? NULL : self->priv->path);
         break;
       
       case PROP_ACTIVE:
@@ -732,7 +735,7 @@
 bamf_view_get_path (BamfView *view)
 {
   g_return_val_if_fail (BAMF_IS_VIEW (view), NULL);
-  
+
   return view->priv->path;
 }
 
@@ -774,17 +777,21 @@
 bamf_view_set_path (BamfView *view, const char *path)
 {
   BamfViewPrivate *priv;
-  
+
   g_return_if_fail (BAMF_IS_VIEW (view));
-  
+  g_return_if_fail (path);
+
   priv = view->priv;
-  priv->is_closed = FALSE;
 
-  if (priv->path)
+  _bamf_view_set_closed (view, FALSE);
+
+  if (priv->proxy && g_strcmp0 (priv->path, path) == 0)
     {
-      g_free (priv->path);
+      // The proxy path has not been changed, no need to unset and re-set it again
+      return;
     }
 
+  g_free (priv->path);
   bamf_view_unset_proxy (view);
 
   priv->path = g_strdup (path);
@@ -824,15 +831,15 @@
                            "RunningChanged",
                            G_TYPE_BOOLEAN,
                            G_TYPE_INVALID);
-  
+
   dbus_g_proxy_add_signal (priv->proxy,
                            "UrgentChanged",
-                           G_TYPE_BOOLEAN, 
+                           G_TYPE_BOOLEAN,
                            G_TYPE_INVALID);
-  
+
   dbus_g_proxy_add_signal (priv->proxy,
                            "UserVisibleChanged",
-                           G_TYPE_BOOLEAN, 
+                           G_TYPE_BOOLEAN,
                            G_TYPE_INVALID);
 
   dbus_g_proxy_add_signal (priv->proxy,
@@ -876,7 +883,7 @@
                                (GCallback) bamf_view_on_urgent_changed,
                                view,
                                NULL);
-  
+
   dbus_g_proxy_connect_signal (priv->proxy,
                                "UserVisibleChanged",
                                (GCallback) bamf_view_on_user_visible_changed,
@@ -1021,8 +1028,7 @@
   GError *error = NULL;
 
   priv = self->priv = BAMF_VIEW_GET_PRIVATE (self);
-
-  priv->is_closed = TRUE;
+  _bamf_view_set_closed (self, TRUE);
 
   priv->connection = dbus_g_bus_get (DBUS_BUS_SESSION, &error);
   if (priv->connection == NULL)
--- bamf-0.2.118.orig/lib/libbamf/bamf-view-private.h
+++ bamf-0.2.118/lib/libbamf/bamf-view-private.h
@@ -36,4 +36,7 @@
 void bamf_view_set_name (BamfView *view, const char *name);
 
 void bamf_view_set_icon (BamfView *view, const char *icon);
+
+void _bamf_view_set_closed (BamfView *view, gboolean closed);
+
 #endif
--- bamf-0.2.118.orig/lib/libbamf/bamf-matcher.c
+++ bamf-0.2.118/lib/libbamf/bamf-matcher.c
@@ -151,6 +151,8 @@
   if (!BAMF_IS_VIEW (view))
     return;
 
+  /* We manually set the view as not closed, to avoid issues like bug #925421 */
+  _bamf_view_set_closed (view, FALSE);
   g_signal_emit (matcher, matcher_signals[VIEW_OPENED], 0, view);
 }
 
@@ -168,6 +170,8 @@
   if (!BAMF_IS_VIEW (view))
     return;
 
+  /* We manually set the view as closed, to avoid issues like bug #925421 */
+  _bamf_view_set_closed (view, TRUE);
   g_signal_emit (matcher, matcher_signals[VIEW_CLOSED], 0, view);
 }
 
--- bamf-0.2.118.orig/lib/libbamf/bamf-factory.c
+++ bamf-0.2.118/lib/libbamf/bamf-factory.c
@@ -107,6 +107,7 @@
 {
   g_return_if_fail (BAMF_IS_FACTORY (self));
   self->priv->local_views = g_list_remove (self->priv->local_views, view);
+  self->priv->registered_views = g_list_remove (self->priv->registered_views, view);
 }
 
 static void
