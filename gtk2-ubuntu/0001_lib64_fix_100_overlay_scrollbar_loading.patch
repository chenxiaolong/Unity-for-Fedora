diff -Nru gtk+-2.24.10.orig/gtk/gtkhscrollbar.c gtk+-2.24.10/gtk/gtkhscrollbar.c
--- gtk+-2.24.10.orig/gtk/gtkhscrollbar.c	2012-07-28 19:17:33.242114337 -0700
+++ gtk+-2.24.10/gtk/gtkhscrollbar.c	2012-07-28 19:18:23.369056189 -0700
@@ -34,6 +34,9 @@
 
 G_DEFINE_TYPE (GtkHScrollbar, gtk_hscrollbar, GTK_TYPE_SCROLLBAR)
 
+GtkWidget* _ubuntu_gtk_overlay_scrollbar_new (GtkOrientation, GtkAdjustment*);
+gboolean ubuntu_gtk_get_use_overlay_scrollbar(void);
+
 static void
 gtk_hscrollbar_class_init (GtkHScrollbarClass *class)
 {
@@ -61,6 +64,9 @@
   g_return_val_if_fail (adjustment == NULL || GTK_IS_ADJUSTMENT (adjustment),
                         NULL);
 
+  if (ubuntu_gtk_get_use_overlay_scrollbar())
+    return _ubuntu_gtk_overlay_scrollbar_new (GTK_ORIENTATION_HORIZONTAL, adjustment);
+
   return g_object_new (GTK_TYPE_HSCROLLBAR,
                        "adjustment", adjustment,
                        NULL);
diff -Nru gtk+-2.24.10.orig/gtk/gtkmain.c gtk+-2.24.10/gtk/gtkmain.c
--- gtk+-2.24.10.orig/gtk/gtkmain.c	2012-07-28 19:17:33.221114363 -0700
+++ gtk+-2.24.10/gtk/gtkmain.c	2012-07-28 19:20:03.867975398 -0700
@@ -709,6 +709,82 @@
 #endif  
 }
 
+static gboolean use_overlay_scrollbar = FALSE;
+static GtkWidget* (*os_scrollbar_new) (GtkOrientation, GtkAdjustment*) = NULL;
+
+gboolean
+ubuntu_gtk_get_use_overlay_scrollbar (void)
+{
+  return use_overlay_scrollbar;
+}
+
+void
+ubuntu_gtk_set_use_overlay_scrollbar (gboolean use)
+{
+  use_overlay_scrollbar = use;
+}
+
+G_GNUC_INTERNAL
+GtkWidget*
+_ubuntu_gtk_overlay_scrollbar_new (GtkOrientation orientation, GtkAdjustment* adjustment)
+{
+  g_return_if_fail (os_scrollbar_new);
+  return os_scrollbar_new (orientation, adjustment);
+}
+
+/*
+ * _overlay_scrollbar_init:
+ *
+ * Initialize local use of the overlay-scrollbar module.
+ * 
+ * If the module is installed, this code checks both a whitelist
+ * and a blacklist to decide whether to activate the remplacement
+ * scrollbars.
+ *
+ * It is possible to force the feature to be disabled by setting
+ * the LIBOVERLAY_SCROLLBAR environment variable to either '0' or an
+ * empty value.
+ */
+static void
+_overlay_scrollbar_init (void)
+{
+  GModule *module = NULL;
+  gpointer symbol = NULL;
+
+  gchar *flag = (gchar*) g_getenv ("LIBOVERLAY_SCROLLBAR");
+
+  /* check if LIBOVERLAY_SCROLLBAR is set to 0 or an empty value
+     and disable the feature in this case */
+  if (flag != NULL && (*flag == '\0' || *flag == '0'))
+    return;
+
+  /* default extension library to use for this release */
+#ifdef __x86_64__
+  gchar *path = "/usr/lib64/liboverlay-scrollbar-0.2.so.0";
+#else
+  gchar *path = "/usr/lib/liboverlay-scrollbar-0.2.so.0";
+#endif
+
+  module = g_module_open (path, G_MODULE_BIND_LOCAL);
+  if (module == NULL)
+    return;
+
+  /* check the blacklist, in all cases */
+  if (g_module_symbol (module, "os_utils_is_blacklisted", &symbol))
+    {
+      gboolean (*os_utils_is_blacklisted) (const gchar*) = symbol;
+      if (os_utils_is_blacklisted (g_get_prgname ()) == TRUE)
+        return;
+    }
+
+  /* all controls are positive: the feature can be activated now */
+  if (g_module_symbol (module, "os_scrollbar_new", &symbol))
+    {
+      os_scrollbar_new = symbol;
+      use_overlay_scrollbar = TRUE;
+    }
+}
+
 static void
 do_post_parse_initialization (int    *argc,
 			      char ***argv)
@@ -752,6 +828,7 @@
 
   _gtk_accel_map_init ();
   _gtk_rc_init ();
+  _overlay_scrollbar_init ();
 
   /* Set the 'initialized' flag.
    */
diff -Nru gtk+-2.24.10.orig/gtk/gtkscrolledwindow.c gtk+-2.24.10/gtk/gtkscrolledwindow.c
--- gtk+-2.24.10.orig/gtk/gtkscrolledwindow.c	2012-07-28 19:17:33.224114360 -0700
+++ gtk+-2.24.10/gtk/gtkscrolledwindow.c	2012-07-28 19:18:23.368056190 -0700
@@ -71,6 +71,8 @@
  *    under A) at least correspond to the space taken up by its scrollbars.
  */
 
+gboolean ubuntu_gtk_get_use_overlay_scrollbar(void);
+
 #define DEFAULT_SCROLLBAR_SPACING  3
 
 typedef struct {
@@ -1030,7 +1032,7 @@
 
       gtk_widget_style_get (widget, "scrollbars-within-bevel", &scrollbars_within_bevel, NULL);
       
-      if (!scrollbars_within_bevel)
+      if (!scrollbars_within_bevel && ubuntu_gtk_get_use_overlay_scrollbar() == FALSE)
         {
           gtk_scrolled_window_relative_allocation (widget, &relative_allocation);
 
@@ -1490,7 +1492,7 @@
 
       if (scrolled_window->shadow_type != GTK_SHADOW_NONE)
 	{
-          if (!scrollbars_within_bevel)
+          if (!scrollbars_within_bevel && ubuntu_gtk_get_use_overlay_scrollbar() == FALSE)
             {
               child_allocation.x -= widget->style->xthickness;
               child_allocation.width += 2 * widget->style->xthickness;
@@ -1542,7 +1544,7 @@
 
       if (scrolled_window->shadow_type != GTK_SHADOW_NONE)
 	{
-          if (!scrollbars_within_bevel)
+          if (!scrollbars_within_bevel && ubuntu_gtk_get_use_overlay_scrollbar() == FALSE)
             {
               child_allocation.y -= widget->style->ythickness;
 	      child_allocation.height += 2 * widget->style->ythickness;
@@ -1780,6 +1782,9 @@
 
   class = GTK_SCROLLED_WINDOW_GET_CLASS (scrolled_window);
 
+  if (ubuntu_gtk_get_use_overlay_scrollbar())
+    return 0;
+
   if (class->scrollbar_spacing >= 0)
     return class->scrollbar_spacing;
   else
diff -Nru gtk+-2.24.10.orig/gtk/gtkvscrollbar.c gtk+-2.24.10/gtk/gtkvscrollbar.c
--- gtk+-2.24.10.orig/gtk/gtkvscrollbar.c	2012-07-28 19:17:33.221114363 -0700
+++ gtk+-2.24.10/gtk/gtkvscrollbar.c	2012-07-28 19:18:23.369056189 -0700
@@ -32,6 +32,9 @@
 #include "gtkintl.h"
 #include "gtkalias.h"
 
+GtkWidget* _ubuntu_gtk_overlay_scrollbar_new (GtkOrientation, GtkAdjustment*);
+gboolean ubuntu_gtk_get_use_overlay_scrollbar (void);
+
 /**
  * SECTION:gtkvscrollbar
  * @Short_description: A vertical scrollbar
@@ -75,6 +78,9 @@
   g_return_val_if_fail (adjustment == NULL || GTK_IS_ADJUSTMENT (adjustment),
                         NULL);
 
+  if (ubuntu_gtk_get_use_overlay_scrollbar())
+    return _ubuntu_gtk_overlay_scrollbar_new (GTK_ORIENTATION_VERTICAL, adjustment);
+
   return g_object_new (GTK_TYPE_VSCROLLBAR,
                        "adjustment", adjustment,
                        NULL);
