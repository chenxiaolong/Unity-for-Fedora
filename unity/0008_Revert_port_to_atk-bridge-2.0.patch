diff -Nru unity-6.6.0.orig/CMakeLists.txt unity-6.6.0/CMakeLists.txt
--- unity-6.6.0.orig/CMakeLists.txt	2012-09-23 01:48:56.720580997 -0400
+++ unity-6.6.0/CMakeLists.txt	2012-09-23 01:54:37.563925703 -0400
@@ -127,7 +127,7 @@
 #
 # Compiz Plugins
 #
-set (UNITY_PLUGIN_DEPS "compiz>=0.9.8.0;nux-3.0>=3.0.0;libbamf3;dee-1.0;gio-2.0;gio-unix-2.0;gmodule-2.0;dbusmenu-glib-0.4;x11;libstartup-notification-1.0;gthread-2.0;indicator3-0.4>=0.4.90;atk;atk-bridge-2.0;unity-misc>=0.4.0;dbus-glib-1;gtk+-3.0>=3.1;sigc++-2.0;json-glib-1.0;libnotify;xfixes;unity-protocol-private>=5.95.1;libgeis;xrender>=0.9;zeitgeist-1.0>=0.3.18")
+set (UNITY_PLUGIN_DEPS "compiz>=0.9.8.0;nux-3.0>=3.0.0;libbamf3;dee-1.0;gio-2.0;gio-unix-2.0;gmodule-2.0;dbusmenu-glib-0.4;x11;libstartup-notification-1.0;gthread-2.0;indicator3-0.4>=0.4.90;atk;unity-misc>=0.4.0;dbus-glib-1;gtk+-3.0>=3.1;sigc++-2.0;json-glib-1.0;libnotify;xfixes;unity-protocol-private>=5.95.1;libgeis;xrender>=0.9;zeitgeist-1.0>=0.3.18")
 set (UNITY_PROTOCOL_PRIVATE_DEPS "unity-protocol-private>=5.95.1")
 
 find_package (PkgConfig)
diff -Nru unity-6.6.0.orig/HACKING unity-6.6.0/HACKING
--- unity-6.6.0.orig/HACKING	2012-09-23 01:48:56.656581124 -0400
+++ unity-6.6.0/HACKING	2012-09-23 01:53:02.664105284 -0400
@@ -7,7 +7,6 @@
   - gthread-2.0
   - indicator
   - atk
-  - libatk-adaptor
 
 Or if you are on ubuntu run the command, apt-get build-dep unity
 
diff -Nru unity-6.6.0.orig/plugins/unityshell/src/unitya11y.cpp unity-6.6.0/plugins/unityshell/src/unitya11y.cpp
--- unity-6.6.0.orig/plugins/unityshell/src/unitya11y.cpp	2012-09-23 01:48:56.779580879 -0400
+++ unity-6.6.0/plugins/unityshell/src/unitya11y.cpp	2012-09-23 01:53:02.666105277 -0400
@@ -20,7 +20,6 @@
 #include <gio/gio.h>
 #include <gmodule.h>
 #include <stdio.h>
-#include <atk-bridge.h>
 
 #include "unitya11y.h"
 #include "unitya11ytests.h"
@@ -63,6 +62,12 @@
 
 static gboolean a11y_initialized = FALSE;
 
+#define INIT_METHOD "gnome_accessibility_module_init"
+#define DESKTOP_SCHEMA "org.gnome.desktop.interface"
+#define ACCESSIBILITY_ENABLED_KEY "toolkit-accessibility"
+#define AT_SPI_SCHEMA "org.a11y.atspi"
+#define ATK_BRIDGE_LOCATION_KEY "atk-bridge-location"
+
 static void
 unity_a11y_restore_environment(void)
 {
@@ -77,6 +82,102 @@
   g_type_class_unref(g_type_class_ref(UNITY_TYPE_UTIL_ACCESSIBLE));
 }
 
+/* This method is required because g_setting_new aborts if the schema
+   is not present. */
+static gboolean
+has_gsettings_schema(const gchar* schema)
+{
+  const char* const* list_schemas = NULL;
+  gboolean found = FALSE;
+  int i = 0;
+
+  list_schemas = g_settings_list_schemas();
+  for (i = 0; list_schemas [i]; i++)
+  {
+    if (!g_strcmp0(list_schemas[i], schema))
+    {
+      found = TRUE;
+      break;
+    }
+  }
+
+  return found;
+}
+
+static gboolean
+should_enable_a11y(void)
+{
+  GSettings* desktop_settings = NULL;
+  gboolean value = FALSE;
+
+  if (!has_gsettings_schema(DESKTOP_SCHEMA))
+    return FALSE;
+
+  desktop_settings = g_settings_new(DESKTOP_SCHEMA);
+  value = g_settings_get_boolean(desktop_settings, ACCESSIBILITY_ENABLED_KEY);
+
+  g_object_unref(desktop_settings);
+
+  return value;
+}
+
+static gchar*
+get_atk_bridge_path(void)
+{
+  GSettings* atspi_settings = NULL;
+  GVariant *variant = NULL;
+  char* value = NULL;
+
+  if (!has_gsettings_schema(AT_SPI_SCHEMA))
+    return NULL;
+
+  atspi_settings = g_settings_new(AT_SPI_SCHEMA);
+  variant = g_settings_get_value (atspi_settings, ATK_BRIDGE_LOCATION_KEY);
+  value = g_variant_dup_bytestring (variant, NULL);
+
+  g_variant_unref (variant);
+  g_object_unref(atspi_settings);
+
+  return value;
+}
+
+static gboolean
+a11y_invoke_module(const char* module_path)
+{
+  GModule*    handle;
+  void (*invoke_fn)(void);
+
+  if (!module_path)
+  {
+    g_warning("Accessibility: invalid module path (NULL)");
+
+    return FALSE;
+  }
+
+  if (!(handle = g_module_open(module_path, (GModuleFlags)0)))
+  {
+    g_warning("Accessibility: failed to load module '%s': '%s'",
+              module_path, g_module_error());
+
+    return FALSE;
+  }
+
+  if (!g_module_symbol(handle, INIT_METHOD, (gpointer*)&invoke_fn))
+  {
+    g_warning("Accessibility: error library '%s' does not include "
+              "method '%s' required for accessibility support",
+              module_path, INIT_METHOD);
+    g_module_close(handle);
+
+    return FALSE;
+  }
+
+  invoke_fn();
+
+  return TRUE;
+}
+
+/********************************************************************************/
 /*
  * In order to avoid the atk-bridge loading and the GAIL
  * initialization during the gtk_init, it is required to set some
@@ -93,19 +194,35 @@
 /*
  * Initializes the accessibility (ATK) support on Unity
  *
+ * It loads the atk-bridge if required. It checks:
+ *  * If the proper gsettings keys are set
+ *  * Loads the proper AtkUtil implementation
  */
 void
 unity_a11y_init(nux::WindowThread* wt)
 {
-  if (a11y_initialized)
-    return;
+  gchar* bridge_path = NULL;
 
   unity_a11y_restore_environment();
+
+  if (!should_enable_a11y())
+    return;
+
   load_unity_atk_util(wt);
-  atk_bridge_adaptor_init(NULL, NULL);
-  atk_get_root();
 
-  a11y_initialized = TRUE;
+  bridge_path = get_atk_bridge_path();
+
+  if (a11y_invoke_module(bridge_path))
+  {
+    g_debug("Unity Oneiric accessibility started, using bridge on %s",
+            bridge_path);
+
+    atk_get_root();
+
+    a11y_initialized = TRUE;
+  }
+
+  g_free(bridge_path);
 
 // NOTE: we run the unit tests manually while developing by
 // uncommenting this. Take a look at the explanation in the
diff -Nru unity-6.6.0.orig/services/CMakeLists.txt unity-6.6.0/services/CMakeLists.txt
--- unity-6.6.0.orig/services/CMakeLists.txt	2012-09-23 01:48:56.817580802 -0400
+++ unity-6.6.0/services/CMakeLists.txt	2012-09-23 01:53:02.666105277 -0400
@@ -2,8 +2,7 @@
 # Panel Service
 #
 find_package(PkgConfig)
-
-pkg_check_modules(SERVICE_DEPS REQUIRED gtk+-3.0>=3.3 gobject-2.0 gio-2.0 gthread-2.0 indicator3-0.4>=0.4.90 x11 atk-bridge-2.0)
+pkg_check_modules(SERVICE_DEPS REQUIRED gtk+-3.0>=3.3 gobject-2.0 gio-2.0 gthread-2.0 indicator3-0.4>=0.4.90 x11)
 
 execute_process (COMMAND ${PKG_CONFIG_EXECUTABLE} indicator3-0.4 --variable indicatordir OUTPUT_VARIABLE _indicatordir OUTPUT_STRIP_TRAILING_WHITESPACE)
 execute_process (COMMAND ${PKG_CONFIG_EXECUTABLE} indicator3-0.4 --variable iconsdir OUTPUT_VARIABLE _iconsdir OUTPUT_STRIP_TRAILING_WHITESPACE)
diff -Nru unity-6.6.0.orig/services/panel-a11y.c unity-6.6.0/services/panel-a11y.c
--- unity-6.6.0.orig/services/panel-a11y.c	2012-09-23 01:48:56.816580804 -0400
+++ unity-6.6.0/services/panel-a11y.c	2012-09-23 01:53:02.667105274 -0400
@@ -17,16 +17,119 @@
  */
 
 #include <gio/gio.h>
-#include <atk-bridge.h>
 
 #include "panel-a11y.h"
 #include "panel-util-accessible.h"
 
 static gboolean a11y_initialized = FALSE;
 
+#define INIT_METHOD "gnome_accessibility_module_init"
+#define DESKTOP_SCHEMA "org.gnome.desktop.interface"
+#define ACCESSIBILITY_ENABLED_KEY "toolkit-accessibility"
+#define AT_SPI_SCHEMA "org.a11y.atspi"
+#define ATK_BRIDGE_LOCATION_KEY "atk-bridge-location"
+
+
+/* This method is required because g_setting_new abort if the schema
+   is not present. */
+static gboolean
+has_gsettings_schema (const gchar *schema)
+{
+  const char * const *list_schemas = NULL;
+  gboolean found = FALSE;
+  int i = 0;
+
+  list_schemas = g_settings_list_schemas ();
+  for (i = 0; list_schemas [i]; i++)
+    {
+      if (!g_strcmp0 (list_schemas[i], schema))
+        {
+          found = TRUE;
+          break;
+        }
+    }
+
+  return found;
+}
+
+static gboolean
+should_enable_a11y (void)
+{
+  GSettings *desktop_settings = NULL;
+  gboolean value = FALSE;
+
+  if (!has_gsettings_schema (DESKTOP_SCHEMA))
+    return FALSE;
+
+  desktop_settings = g_settings_new (DESKTOP_SCHEMA);
+  value = g_settings_get_boolean (desktop_settings, ACCESSIBILITY_ENABLED_KEY);
+
+  g_object_unref (desktop_settings);
+
+  return value;
+}
+
+static gchar*
+get_atk_bridge_path (void)
+{
+  GSettings *atspi_settings = NULL;
+  GVariant *variant = NULL;
+  char *value = NULL;
+
+  if (!has_gsettings_schema (AT_SPI_SCHEMA))
+    return NULL;
+
+  atspi_settings = g_settings_new(AT_SPI_SCHEMA);
+  variant = g_settings_get_value (atspi_settings, ATK_BRIDGE_LOCATION_KEY);
+  value = g_variant_dup_bytestring (variant, NULL);
+
+  g_variant_unref (variant);
+  g_object_unref (atspi_settings);
+
+  return value;
+}
+
+static gboolean
+a11y_invoke_module (const char *module_path)
+{
+  GModule    *handle;
+  void      (*invoke_fn) (void);
+
+  if (!module_path)
+    {
+      g_warning ("Accessibility: invalid module path (NULL)");
+
+      return FALSE;
+    }
+
+  if (!(handle = g_module_open (module_path, (GModuleFlags)0)))
+    {
+      g_warning ("Accessibility: failed to load module '%s': '%s'",
+                 module_path, g_module_error ());
+
+      return FALSE;
+    }
+
+  if (!g_module_symbol (handle, INIT_METHOD, (gpointer *)&invoke_fn))
+    {
+      g_warning ("Accessibility: error library '%s' does not include "
+                 "method '%s' required for accessibility support",
+                 module_path, INIT_METHOD);
+      g_module_close (handle);
+
+      return FALSE;
+    }
+
+  invoke_fn ();
+
+  return TRUE;
+}
+
 void
 panel_a11y_init (void)
 {
+  gchar *bridge_path = NULL;
+
   if (a11y_initialized)
     return;
 
@@ -34,9 +137,20 @@
   g_unsetenv ("NO_AT_BRIDGE");
   g_unsetenv ("NO_GAIL");
 
+  if (!should_enable_a11y ())
+    return;
+
   /* Load PanelUtilAccessible class */
   g_type_class_unref (g_type_class_ref (PANEL_TYPE_UTIL_ACCESSIBLE));
-  atk_bridge_adaptor_init(NULL, NULL);
+
+  bridge_path = get_atk_bridge_path ();
+  if (a11y_invoke_module (bridge_path))
+    {
+      g_debug ("Unity accessibility started, using bridge on %s", bridge_path);
+    }
+
+  g_free (bridge_path);
+  atk_get_root ();
 
   a11y_initialized = TRUE;
 }
